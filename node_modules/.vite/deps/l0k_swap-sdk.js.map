{
  "version": 3,
  "sources": ["../../jsbi/tsc-out/jsbi.mjs", "../../tiny-invariant/dist/tiny-invariant.cjs.js", "../../starknet/utils/shortString.js", "../../toformat/toFormat.js", "../../decimal.js-light/decimal.js", "../../big.js/big.js", "../../l0k_swap-sdk/src/errors.ts", "../../l0k_swap-sdk/src/constants.ts", "../../l0k_swap-sdk/src/utils.ts", "../../l0k_swap-sdk/src/entities/token.ts", "../../l0k_swap-sdk/src/entities/fractions/fraction.ts", "../../l0k_swap-sdk/src/entities/fractions/tokenAmount.ts", "../../l0k_swap-sdk/src/entities/fractions/price.ts", "../../l0k_swap-sdk/src/entities/pair.ts", "../../l0k_swap-sdk/src/entities/route.ts", "../../l0k_swap-sdk/src/entities/fractions/percent.ts", "../../l0k_swap-sdk/src/entities/trade.ts", "../../l0k_swap-sdk/src/router.ts", "../../l0k_swap-sdk/src/fetcher.ts", "../../l0k_swap-sdk/dist/index.js"],
  "sourcesContent": ["// Copyright 2018 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the “License”);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// <https://apache.org/licenses/LICENSE-2.0>.\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an “AS IS” BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nclass JSBI extends Array {\n    constructor(length, sign) {\n        super(length);\n        this.sign = sign;\n        // Explicitly set the prototype as per\n        // https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        Object.setPrototypeOf(this, JSBI.prototype);\n        if (length > JSBI.__kMaxLength) {\n            throw new RangeError('Maximum BigInt size exceeded');\n        }\n    }\n    static BigInt(arg) {\n        if (typeof arg === 'number') {\n            if (arg === 0)\n                return JSBI.__zero();\n            if (JSBI.__isOneDigitInt(arg)) {\n                if (arg < 0) {\n                    return JSBI.__oneDigit(-arg, true);\n                }\n                return JSBI.__oneDigit(arg, false);\n            }\n            if (!Number.isFinite(arg) || Math.floor(arg) !== arg) {\n                throw new RangeError('The number ' + arg + ' cannot be converted to ' +\n                    'BigInt because it is not an integer');\n            }\n            return JSBI.__fromDouble(arg);\n        }\n        else if (typeof arg === 'string') {\n            const result = JSBI.__fromString(arg);\n            if (result === null) {\n                throw new SyntaxError('Cannot convert ' + arg + ' to a BigInt');\n            }\n            return result;\n        }\n        else if (typeof arg === 'boolean') {\n            if (arg === true) {\n                return JSBI.__oneDigit(1, false);\n            }\n            return JSBI.__zero();\n        }\n        else if (typeof arg === 'object') {\n            if (arg.constructor === JSBI)\n                return arg;\n            const primitive = JSBI.__toPrimitive(arg);\n            return JSBI.BigInt(primitive);\n        }\n        throw new TypeError('Cannot convert ' + arg + ' to a BigInt');\n    }\n    toDebugString() {\n        const result = ['BigInt['];\n        for (const digit of this) {\n            result.push((digit ? (digit >>> 0).toString(16) : digit) + ', ');\n        }\n        result.push(']');\n        return result.join('');\n    }\n    toString(radix = 10) {\n        if (radix < 2 || radix > 36) {\n            throw new RangeError('toString() radix argument must be between 2 and 36');\n        }\n        if (this.length === 0)\n            return '0';\n        if ((radix & (radix - 1)) === 0) {\n            return JSBI.__toStringBasePowerOfTwo(this, radix);\n        }\n        return JSBI.__toStringGeneric(this, radix, false);\n    }\n    valueOf() {\n        throw new Error('Convert JSBI instances to native numbers using `toNumber`.');\n    }\n    // Equivalent of \"Number(my_bigint)\" in the native implementation.\n    // TODO: add more tests\n    static toNumber(x) {\n        const xLength = x.length;\n        if (xLength === 0)\n            return 0;\n        if (xLength === 1) {\n            const value = x.__unsignedDigit(0);\n            return x.sign ? -value : value;\n        }\n        const xMsd = x.__digit(xLength - 1);\n        const msdLeadingZeros = JSBI.__clz30(xMsd);\n        const xBitLength = xLength * 30 - msdLeadingZeros;\n        if (xBitLength > 1024)\n            return x.sign ? -Infinity : Infinity;\n        let exponent = xBitLength - 1;\n        let currentDigit = xMsd;\n        let digitIndex = xLength - 1;\n        const shift = msdLeadingZeros + 3;\n        let mantissaHigh = (shift === 32) ? 0 : currentDigit << shift;\n        mantissaHigh >>>= 12;\n        const mantissaHighBitsUnset = shift - 12;\n        let mantissaLow = (shift >= 12) ? 0 : (currentDigit << (20 + shift));\n        let mantissaLowBitsUnset = 20 + shift;\n        if (mantissaHighBitsUnset > 0 && digitIndex > 0) {\n            digitIndex--;\n            currentDigit = x.__digit(digitIndex);\n            mantissaHigh |= (currentDigit >>> (30 - mantissaHighBitsUnset));\n            mantissaLow = currentDigit << mantissaHighBitsUnset + 2;\n            mantissaLowBitsUnset = mantissaHighBitsUnset + 2;\n        }\n        while (mantissaLowBitsUnset > 0 && digitIndex > 0) {\n            digitIndex--;\n            currentDigit = x.__digit(digitIndex);\n            if (mantissaLowBitsUnset >= 30) {\n                mantissaLow |= (currentDigit << (mantissaLowBitsUnset - 30));\n            }\n            else {\n                mantissaLow |= (currentDigit >>> (30 - mantissaLowBitsUnset));\n            }\n            mantissaLowBitsUnset -= 30;\n        }\n        const rounding = JSBI.__decideRounding(x, mantissaLowBitsUnset, digitIndex, currentDigit);\n        if (rounding === 1 || (rounding === 0 && (mantissaLow & 1) === 1)) {\n            mantissaLow = (mantissaLow + 1) >>> 0;\n            if (mantissaLow === 0) {\n                // Incrementing mantissaLow overflowed.\n                mantissaHigh++;\n                if ((mantissaHigh >>> 20) !== 0) {\n                    // Incrementing mantissaHigh overflowed.\n                    mantissaHigh = 0;\n                    exponent++;\n                    if (exponent > 1023) {\n                        // Incrementing the exponent overflowed.\n                        return x.sign ? -Infinity : Infinity;\n                    }\n                }\n            }\n        }\n        const signBit = x.sign ? (1 << 31) : 0;\n        exponent = (exponent + 0x3FF) << 20;\n        JSBI.__kBitConversionInts[1] = signBit | exponent | mantissaHigh;\n        JSBI.__kBitConversionInts[0] = mantissaLow;\n        return JSBI.__kBitConversionDouble[0];\n    }\n    // Operations.\n    static unaryMinus(x) {\n        if (x.length === 0)\n            return x;\n        const result = x.__copy();\n        result.sign = !x.sign;\n        return result;\n    }\n    static bitwiseNot(x) {\n        if (x.sign) {\n            // ~(-x) == ~(~(x-1)) == x-1\n            return JSBI.__absoluteSubOne(x).__trim();\n        }\n        // ~x == -x-1 == -(x+1)\n        return JSBI.__absoluteAddOne(x, true);\n    }\n    static exponentiate(x, y) {\n        if (y.sign) {\n            throw new RangeError('Exponent must be positive');\n        }\n        if (y.length === 0) {\n            return JSBI.__oneDigit(1, false);\n        }\n        if (x.length === 0)\n            return x;\n        if (x.length === 1 && x.__digit(0) === 1) {\n            // (-1) ** even_number == 1.\n            if (x.sign && (y.__digit(0) & 1) === 0) {\n                return JSBI.unaryMinus(x);\n            }\n            // (-1) ** odd_number == -1, 1 ** anything == 1.\n            return x;\n        }\n        // For all bases >= 2, very large exponents would lead to unrepresentable\n        // results.\n        if (y.length > 1)\n            throw new RangeError('BigInt too big');\n        let expValue = y.__unsignedDigit(0);\n        if (expValue === 1)\n            return x;\n        if (expValue >= JSBI.__kMaxLengthBits) {\n            throw new RangeError('BigInt too big');\n        }\n        if (x.length === 1 && x.__digit(0) === 2) {\n            // Fast path for 2^n.\n            const neededDigits = 1 + ((expValue / 30) | 0);\n            const sign = x.sign && ((expValue & 1) !== 0);\n            const result = new JSBI(neededDigits, sign);\n            result.__initializeDigits();\n            // All bits are zero. Now set the n-th bit.\n            const msd = 1 << (expValue % 30);\n            result.__setDigit(neededDigits - 1, msd);\n            return result;\n        }\n        let result = null;\n        let runningSquare = x;\n        // This implicitly sets the result's sign correctly.\n        if ((expValue & 1) !== 0)\n            result = x;\n        expValue >>= 1;\n        for (; expValue !== 0; expValue >>= 1) {\n            runningSquare = JSBI.multiply(runningSquare, runningSquare);\n            if ((expValue & 1) !== 0) {\n                if (result === null) {\n                    result = runningSquare;\n                }\n                else {\n                    result = JSBI.multiply(result, runningSquare);\n                }\n            }\n        }\n        // TODO see if there's a way for tsc to infer this will always happen?\n        return result;\n    }\n    static multiply(x, y) {\n        if (x.length === 0)\n            return x;\n        if (y.length === 0)\n            return y;\n        let resultLength = x.length + y.length;\n        if (x.__clzmsd() + y.__clzmsd() >= 30) {\n            resultLength--;\n        }\n        const result = new JSBI(resultLength, x.sign !== y.sign);\n        result.__initializeDigits();\n        for (let i = 0; i < x.length; i++) {\n            JSBI.__multiplyAccumulate(y, x.__digit(i), result, i);\n        }\n        return result.__trim();\n    }\n    static divide(x, y) {\n        if (y.length === 0)\n            throw new RangeError('Division by zero');\n        if (JSBI.__absoluteCompare(x, y) < 0)\n            return JSBI.__zero();\n        const resultSign = x.sign !== y.sign;\n        const divisor = y.__unsignedDigit(0);\n        let quotient;\n        if (y.length === 1 && divisor <= 0x7FFF) {\n            if (divisor === 1) {\n                return resultSign === x.sign ? x : JSBI.unaryMinus(x);\n            }\n            quotient = JSBI.__absoluteDivSmall(x, divisor, null);\n        }\n        else {\n            quotient = JSBI.__absoluteDivLarge(x, y, true, false);\n        }\n        quotient.sign = resultSign;\n        return quotient.__trim();\n    }\n    static remainder(x, y) {\n        if (y.length === 0)\n            throw new RangeError('Division by zero');\n        if (JSBI.__absoluteCompare(x, y) < 0)\n            return x;\n        const divisor = y.__unsignedDigit(0);\n        if (y.length === 1 && divisor <= 0x7FFF) {\n            if (divisor === 1)\n                return JSBI.__zero();\n            const remainderDigit = JSBI.__absoluteModSmall(x, divisor);\n            if (remainderDigit === 0)\n                return JSBI.__zero();\n            return JSBI.__oneDigit(remainderDigit, x.sign);\n        }\n        const remainder = JSBI.__absoluteDivLarge(x, y, false, true);\n        remainder.sign = x.sign;\n        return remainder.__trim();\n    }\n    static add(x, y) {\n        const sign = x.sign;\n        if (sign === y.sign) {\n            // x + y == x + y\n            // -x + -y == -(x + y)\n            return JSBI.__absoluteAdd(x, y, sign);\n        }\n        // x + -y == x - y == -(y - x)\n        // -x + y == y - x == -(x - y)\n        if (JSBI.__absoluteCompare(x, y) >= 0) {\n            return JSBI.__absoluteSub(x, y, sign);\n        }\n        return JSBI.__absoluteSub(y, x, !sign);\n    }\n    static subtract(x, y) {\n        const sign = x.sign;\n        if (sign !== y.sign) {\n            // x - (-y) == x + y\n            // (-x) - y == -(x + y)\n            return JSBI.__absoluteAdd(x, y, sign);\n        }\n        // x - y == -(y - x)\n        // (-x) - (-y) == y - x == -(x - y)\n        if (JSBI.__absoluteCompare(x, y) >= 0) {\n            return JSBI.__absoluteSub(x, y, sign);\n        }\n        return JSBI.__absoluteSub(y, x, !sign);\n    }\n    static leftShift(x, y) {\n        if (y.length === 0 || x.length === 0)\n            return x;\n        if (y.sign)\n            return JSBI.__rightShiftByAbsolute(x, y);\n        return JSBI.__leftShiftByAbsolute(x, y);\n    }\n    static signedRightShift(x, y) {\n        if (y.length === 0 || x.length === 0)\n            return x;\n        if (y.sign)\n            return JSBI.__leftShiftByAbsolute(x, y);\n        return JSBI.__rightShiftByAbsolute(x, y);\n    }\n    static unsignedRightShift() {\n        throw new TypeError('BigInts have no unsigned right shift; use >> instead');\n    }\n    static lessThan(x, y) {\n        return JSBI.__compareToBigInt(x, y) < 0;\n    }\n    static lessThanOrEqual(x, y) {\n        return JSBI.__compareToBigInt(x, y) <= 0;\n    }\n    static greaterThan(x, y) {\n        return JSBI.__compareToBigInt(x, y) > 0;\n    }\n    static greaterThanOrEqual(x, y) {\n        return JSBI.__compareToBigInt(x, y) >= 0;\n    }\n    static equal(x, y) {\n        if (x.sign !== y.sign)\n            return false;\n        if (x.length !== y.length)\n            return false;\n        for (let i = 0; i < x.length; i++) {\n            if (x.__digit(i) !== y.__digit(i))\n                return false;\n        }\n        return true;\n    }\n    static notEqual(x, y) {\n        return !JSBI.equal(x, y);\n    }\n    static bitwiseAnd(x, y) {\n        if (!x.sign && !y.sign) {\n            return JSBI.__absoluteAnd(x, y).__trim();\n        }\n        else if (x.sign && y.sign) {\n            const resultLength = Math.max(x.length, y.length) + 1;\n            // (-x) & (-y) == ~(x-1) & ~(y-1) == ~((x-1) | (y-1))\n            // == -(((x-1) | (y-1)) + 1)\n            let result = JSBI.__absoluteSubOne(x, resultLength);\n            const y1 = JSBI.__absoluteSubOne(y);\n            result = JSBI.__absoluteOr(result, y1, result);\n            return JSBI.__absoluteAddOne(result, true, result).__trim();\n        }\n        // Assume that x is the positive BigInt.\n        if (x.sign) {\n            [x, y] = [y, x];\n        }\n        // x & (-y) == x & ~(y-1) == x &~ (y-1)\n        return JSBI.__absoluteAndNot(x, JSBI.__absoluteSubOne(y)).__trim();\n    }\n    static bitwiseXor(x, y) {\n        if (!x.sign && !y.sign) {\n            return JSBI.__absoluteXor(x, y).__trim();\n        }\n        else if (x.sign && y.sign) {\n            // (-x) ^ (-y) == ~(x-1) ^ ~(y-1) == (x-1) ^ (y-1)\n            const resultLength = Math.max(x.length, y.length);\n            const result = JSBI.__absoluteSubOne(x, resultLength);\n            const y1 = JSBI.__absoluteSubOne(y);\n            return JSBI.__absoluteXor(result, y1, result).__trim();\n        }\n        const resultLength = Math.max(x.length, y.length) + 1;\n        // Assume that x is the positive BigInt.\n        if (x.sign) {\n            [x, y] = [y, x];\n        }\n        // x ^ (-y) == x ^ ~(y-1) == ~(x ^ (y-1)) == -((x ^ (y-1)) + 1)\n        let result = JSBI.__absoluteSubOne(y, resultLength);\n        result = JSBI.__absoluteXor(result, x, result);\n        return JSBI.__absoluteAddOne(result, true, result).__trim();\n    }\n    static bitwiseOr(x, y) {\n        const resultLength = Math.max(x.length, y.length);\n        if (!x.sign && !y.sign) {\n            return JSBI.__absoluteOr(x, y).__trim();\n        }\n        else if (x.sign && y.sign) {\n            // (-x) | (-y) == ~(x-1) | ~(y-1) == ~((x-1) & (y-1))\n            // == -(((x-1) & (y-1)) + 1)\n            let result = JSBI.__absoluteSubOne(x, resultLength);\n            const y1 = JSBI.__absoluteSubOne(y);\n            result = JSBI.__absoluteAnd(result, y1, result);\n            return JSBI.__absoluteAddOne(result, true, result).__trim();\n        }\n        // Assume that x is the positive BigInt.\n        if (x.sign) {\n            [x, y] = [y, x];\n        }\n        // x | (-y) == x | ~(y-1) == ~((y-1) &~ x) == -(((y-1) ~& x) + 1)\n        let result = JSBI.__absoluteSubOne(y, resultLength);\n        result = JSBI.__absoluteAndNot(result, x, result);\n        return JSBI.__absoluteAddOne(result, true, result).__trim();\n    }\n    static asIntN(n, x) {\n        if (x.length === 0)\n            return x;\n        n = Math.floor(n);\n        if (n < 0) {\n            throw new RangeError('Invalid value: not (convertible to) a safe integer');\n        }\n        if (n === 0)\n            return JSBI.__zero();\n        // If {x} has less than {n} bits, return it directly.\n        if (n >= JSBI.__kMaxLengthBits)\n            return x;\n        const neededLength = ((n + 29) / 30) | 0;\n        if (x.length < neededLength)\n            return x;\n        const topDigit = x.__unsignedDigit(neededLength - 1);\n        const compareDigit = 1 << ((n - 1) % 30);\n        if (x.length === neededLength && topDigit < compareDigit)\n            return x;\n        // Otherwise truncate and simulate two's complement.\n        const hasBit = (topDigit & compareDigit) === compareDigit;\n        if (!hasBit)\n            return JSBI.__truncateToNBits(n, x);\n        if (!x.sign)\n            return JSBI.__truncateAndSubFromPowerOfTwo(n, x, true);\n        if ((topDigit & (compareDigit - 1)) === 0) {\n            for (let i = neededLength - 2; i >= 0; i--) {\n                if (x.__digit(i) !== 0) {\n                    return JSBI.__truncateAndSubFromPowerOfTwo(n, x, false);\n                }\n            }\n            if (x.length === neededLength && topDigit === compareDigit)\n                return x;\n            return JSBI.__truncateToNBits(n, x);\n        }\n        return JSBI.__truncateAndSubFromPowerOfTwo(n, x, false);\n    }\n    static asUintN(n, x) {\n        if (x.length === 0)\n            return x;\n        n = Math.floor(n);\n        if (n < 0) {\n            throw new RangeError('Invalid value: not (convertible to) a safe integer');\n        }\n        if (n === 0)\n            return JSBI.__zero();\n        // If {x} is negative, simulate two's complement representation.\n        if (x.sign) {\n            if (n > JSBI.__kMaxLengthBits) {\n                throw new RangeError('BigInt too big');\n            }\n            return JSBI.__truncateAndSubFromPowerOfTwo(n, x, false);\n        }\n        // If {x} is positive and has up to {n} bits, return it directly.\n        if (n >= JSBI.__kMaxLengthBits)\n            return x;\n        const neededLength = ((n + 29) / 30) | 0;\n        if (x.length < neededLength)\n            return x;\n        const bitsInTopDigit = n % 30;\n        if (x.length == neededLength) {\n            if (bitsInTopDigit === 0)\n                return x;\n            const topDigit = x.__digit(neededLength - 1);\n            if ((topDigit >>> bitsInTopDigit) === 0)\n                return x;\n        }\n        // Otherwise, truncate.\n        return JSBI.__truncateToNBits(n, x);\n    }\n    // Operators.\n    static ADD(x, y) {\n        x = JSBI.__toPrimitive(x);\n        y = JSBI.__toPrimitive(y);\n        if (typeof x === 'string') {\n            if (typeof y !== 'string')\n                y = y.toString();\n            return x + y;\n        }\n        if (typeof y === 'string') {\n            return x.toString() + y;\n        }\n        x = JSBI.__toNumeric(x);\n        y = JSBI.__toNumeric(y);\n        if (JSBI.__isBigInt(x) && JSBI.__isBigInt(y)) {\n            return JSBI.add(x, y);\n        }\n        if (typeof x === 'number' && typeof y === 'number') {\n            return x + y;\n        }\n        throw new TypeError('Cannot mix BigInt and other types, use explicit conversions');\n    }\n    static LT(x, y) {\n        return JSBI.__compare(x, y, 0);\n    }\n    static LE(x, y) {\n        return JSBI.__compare(x, y, 1);\n    }\n    static GT(x, y) {\n        return JSBI.__compare(x, y, 2);\n    }\n    static GE(x, y) {\n        return JSBI.__compare(x, y, 3);\n    }\n    static EQ(x, y) {\n        while (true) {\n            if (JSBI.__isBigInt(x)) {\n                if (JSBI.__isBigInt(y))\n                    return JSBI.equal(x, y);\n                return JSBI.EQ(y, x);\n            }\n            else if (typeof x === 'number') {\n                if (JSBI.__isBigInt(y))\n                    return JSBI.__equalToNumber(y, x);\n                if (typeof y !== 'object')\n                    return x == y;\n                y = JSBI.__toPrimitive(y);\n            }\n            else if (typeof x === 'string') {\n                if (JSBI.__isBigInt(y)) {\n                    x = JSBI.__fromString(x);\n                    if (x === null)\n                        return false;\n                    return JSBI.equal(x, y);\n                }\n                if (typeof y !== 'object')\n                    return x == y;\n                y = JSBI.__toPrimitive(y);\n            }\n            else if (typeof x === 'boolean') {\n                if (JSBI.__isBigInt(y))\n                    return JSBI.__equalToNumber(y, +x);\n                if (typeof y !== 'object')\n                    return x == y;\n                y = JSBI.__toPrimitive(y);\n            }\n            else if (typeof x === 'symbol') {\n                if (JSBI.__isBigInt(y))\n                    return false;\n                if (typeof y !== 'object')\n                    return x == y;\n                y = JSBI.__toPrimitive(y);\n            }\n            else if (typeof x === 'object') {\n                if (typeof y === 'object' && y.constructor !== JSBI)\n                    return x == y;\n                x = JSBI.__toPrimitive(x);\n            }\n            else {\n                return x == y;\n            }\n        }\n    }\n    static NE(x, y) {\n        return !JSBI.EQ(x, y);\n    }\n    // DataView-related functionality.\n    static DataViewGetBigInt64(dataview, byteOffset, littleEndian = false) {\n        return JSBI.asIntN(64, JSBI.DataViewGetBigUint64(dataview, byteOffset, littleEndian));\n    }\n    static DataViewGetBigUint64(dataview, byteOffset, littleEndian = false) {\n        const [h, l] = littleEndian ? [4, 0] : [0, 4];\n        const high = dataview.getUint32(byteOffset + h, littleEndian);\n        const low = dataview.getUint32(byteOffset + l, littleEndian);\n        const result = new JSBI(3, false);\n        result.__setDigit(0, low & 0x3FFFFFFF);\n        result.__setDigit(1, ((high & 0xFFFFFFF) << 2) | (low >>> 30));\n        result.__setDigit(2, high >>> 28);\n        return result.__trim();\n    }\n    static DataViewSetBigInt64(dataview, byteOffset, value, littleEndian = false) {\n        JSBI.DataViewSetBigUint64(dataview, byteOffset, value, littleEndian);\n    }\n    static DataViewSetBigUint64(dataview, byteOffset, value, littleEndian = false) {\n        value = JSBI.asUintN(64, value);\n        let high = 0;\n        let low = 0;\n        if (value.length > 0) {\n            low = value.__digit(0);\n            if (value.length > 1) {\n                const d1 = value.__digit(1);\n                low = low | d1 << 30;\n                high = d1 >>> 2;\n                if (value.length > 2) {\n                    high = high | (value.__digit(2) << 28);\n                }\n            }\n        }\n        const [h, l] = littleEndian ? [4, 0] : [0, 4];\n        dataview.setUint32(byteOffset + h, high, littleEndian);\n        dataview.setUint32(byteOffset + l, low, littleEndian);\n    }\n    // Helpers.\n    static __zero() {\n        return new JSBI(0, false);\n    }\n    static __oneDigit(value, sign) {\n        const result = new JSBI(1, sign);\n        result.__setDigit(0, value);\n        return result;\n    }\n    __copy() {\n        const result = new JSBI(this.length, this.sign);\n        for (let i = 0; i < this.length; i++) {\n            result[i] = this[i];\n        }\n        return result;\n    }\n    __trim() {\n        let newLength = this.length;\n        let last = this[newLength - 1];\n        while (last === 0) {\n            newLength--;\n            last = this[newLength - 1];\n            this.pop();\n        }\n        if (newLength === 0)\n            this.sign = false;\n        return this;\n    }\n    __initializeDigits() {\n        for (let i = 0; i < this.length; i++) {\n            this[i] = 0;\n        }\n    }\n    static __decideRounding(x, mantissaBitsUnset, digitIndex, currentDigit) {\n        if (mantissaBitsUnset > 0)\n            return -1;\n        let topUnconsumedBit;\n        if (mantissaBitsUnset < 0) {\n            topUnconsumedBit = -mantissaBitsUnset - 1;\n        }\n        else {\n            // {currentDigit} fit the mantissa exactly; look at the next digit.\n            if (digitIndex === 0)\n                return -1;\n            digitIndex--;\n            currentDigit = x.__digit(digitIndex);\n            topUnconsumedBit = 29;\n        }\n        // If the most significant remaining bit is 0, round down.\n        let mask = 1 << topUnconsumedBit;\n        if ((currentDigit & mask) === 0)\n            return -1;\n        // If any other remaining bit is set, round up.\n        mask -= 1;\n        if ((currentDigit & mask) !== 0)\n            return 1;\n        while (digitIndex > 0) {\n            digitIndex--;\n            if (x.__digit(digitIndex) !== 0)\n                return 1;\n        }\n        return 0;\n    }\n    static __fromDouble(value) {\n        const sign = value < 0;\n        JSBI.__kBitConversionDouble[0] = value;\n        const rawExponent = (JSBI.__kBitConversionInts[1] >>> 20) & 0x7FF;\n        const exponent = rawExponent - 0x3FF;\n        const digits = ((exponent / 30) | 0) + 1;\n        const result = new JSBI(digits, sign);\n        const kHiddenBit = 0x00100000;\n        let mantissaHigh = (JSBI.__kBitConversionInts[1] & 0xFFFFF) | kHiddenBit;\n        let mantissaLow = JSBI.__kBitConversionInts[0];\n        const kMantissaHighTopBit = 20;\n        // 0-indexed position of most significant bit in most significant digit.\n        const msdTopBit = exponent % 30;\n        // Number of unused bits in the mantissa. We'll keep them shifted to the\n        // left (i.e. most significant part).\n        let remainingMantissaBits = 0;\n        // Next digit under construction.\n        let digit;\n        // First, build the MSD by shifting the mantissa appropriately.\n        if (msdTopBit < kMantissaHighTopBit) {\n            const shift = kMantissaHighTopBit - msdTopBit;\n            remainingMantissaBits = shift + 32;\n            digit = mantissaHigh >>> shift;\n            mantissaHigh = (mantissaHigh << (32 - shift)) | (mantissaLow >>> shift);\n            mantissaLow = mantissaLow << (32 - shift);\n        }\n        else if (msdTopBit === kMantissaHighTopBit) {\n            remainingMantissaBits = 32;\n            digit = mantissaHigh;\n            mantissaHigh = mantissaLow;\n            mantissaLow = 0;\n        }\n        else {\n            const shift = msdTopBit - kMantissaHighTopBit;\n            remainingMantissaBits = 32 - shift;\n            digit = (mantissaHigh << shift) | (mantissaLow >>> (32 - shift));\n            mantissaHigh = mantissaLow << shift;\n            mantissaLow = 0;\n        }\n        result.__setDigit(digits - 1, digit);\n        // Then fill in the rest of the digits.\n        for (let digitIndex = digits - 2; digitIndex >= 0; digitIndex--) {\n            if (remainingMantissaBits > 0) {\n                remainingMantissaBits -= 30;\n                digit = mantissaHigh >>> 2;\n                mantissaHigh = (mantissaHigh << 30) | (mantissaLow >>> 2);\n                mantissaLow = (mantissaLow << 30);\n            }\n            else {\n                digit = 0;\n            }\n            result.__setDigit(digitIndex, digit);\n        }\n        return result.__trim();\n    }\n    static __isWhitespace(c) {\n        if (c <= 0x0D && c >= 0x09)\n            return true;\n        if (c <= 0x9F)\n            return c === 0x20;\n        if (c <= 0x01FFFF) {\n            return c === 0xA0 || c === 0x1680;\n        }\n        if (c <= 0x02FFFF) {\n            c &= 0x01FFFF;\n            return c <= 0x0A || c === 0x28 || c === 0x29 || c === 0x2F ||\n                c === 0x5F || c === 0x1000;\n        }\n        return c === 0xFEFF;\n    }\n    static __fromString(string, radix = 0) {\n        let sign = 0;\n        let leadingZero = false;\n        const length = string.length;\n        let cursor = 0;\n        if (cursor === length)\n            return JSBI.__zero();\n        let current = string.charCodeAt(cursor);\n        // Skip whitespace.\n        while (JSBI.__isWhitespace(current)) {\n            if (++cursor === length)\n                return JSBI.__zero();\n            current = string.charCodeAt(cursor);\n        }\n        // Detect radix.\n        if (current === 0x2B) { // '+'\n            if (++cursor === length)\n                return null;\n            current = string.charCodeAt(cursor);\n            sign = 1;\n        }\n        else if (current === 0x2D) { // '-'\n            if (++cursor === length)\n                return null;\n            current = string.charCodeAt(cursor);\n            sign = -1;\n        }\n        if (radix === 0) {\n            radix = 10;\n            if (current === 0x30) { // '0'\n                if (++cursor === length)\n                    return JSBI.__zero();\n                current = string.charCodeAt(cursor);\n                if (current === 0x58 || current === 0x78) { // 'X' or 'x'\n                    radix = 16;\n                    if (++cursor === length)\n                        return null;\n                    current = string.charCodeAt(cursor);\n                }\n                else if (current === 0x4F || current === 0x6F) { // 'O' or 'o'\n                    radix = 8;\n                    if (++cursor === length)\n                        return null;\n                    current = string.charCodeAt(cursor);\n                }\n                else if (current === 0x42 || current === 0x62) { // 'B' or 'b'\n                    radix = 2;\n                    if (++cursor === length)\n                        return null;\n                    current = string.charCodeAt(cursor);\n                }\n                else {\n                    leadingZero = true;\n                }\n            }\n        }\n        else if (radix === 16) {\n            if (current === 0x30) { // '0'\n                // Allow \"0x\" prefix.\n                if (++cursor === length)\n                    return JSBI.__zero();\n                current = string.charCodeAt(cursor);\n                if (current === 0x58 || current === 0x78) { // 'X' or 'x'\n                    if (++cursor === length)\n                        return null;\n                    current = string.charCodeAt(cursor);\n                }\n                else {\n                    leadingZero = true;\n                }\n            }\n        }\n        if (sign !== 0 && radix !== 10)\n            return null;\n        // Skip leading zeros.\n        while (current === 0x30) {\n            leadingZero = true;\n            if (++cursor === length)\n                return JSBI.__zero();\n            current = string.charCodeAt(cursor);\n        }\n        // Allocate result.\n        const chars = length - cursor;\n        let bitsPerChar = JSBI.__kMaxBitsPerChar[radix];\n        let roundup = JSBI.__kBitsPerCharTableMultiplier - 1;\n        if (chars > (1 << 30) / bitsPerChar)\n            return null;\n        const bitsMin = (bitsPerChar * chars + roundup) >>> JSBI.__kBitsPerCharTableShift;\n        const resultLength = ((bitsMin + 29) / 30) | 0;\n        const result = new JSBI(resultLength, false);\n        // Parse.\n        const limDigit = radix < 10 ? radix : 10;\n        const limAlpha = radix > 10 ? radix - 10 : 0;\n        if ((radix & (radix - 1)) === 0) {\n            // Power-of-two radix.\n            bitsPerChar >>= JSBI.__kBitsPerCharTableShift;\n            const parts = [];\n            const partsBits = [];\n            let done = false;\n            do {\n                let part = 0;\n                let bits = 0;\n                while (true) {\n                    let d;\n                    if (((current - 48) >>> 0) < limDigit) {\n                        d = current - 48;\n                    }\n                    else if ((((current | 32) - 97) >>> 0) < limAlpha) {\n                        d = (current | 32) - 87;\n                    }\n                    else {\n                        done = true;\n                        break;\n                    }\n                    bits += bitsPerChar;\n                    part = (part << bitsPerChar) | d;\n                    if (++cursor === length) {\n                        done = true;\n                        break;\n                    }\n                    current = string.charCodeAt(cursor);\n                    if (bits + bitsPerChar > 30)\n                        break;\n                }\n                parts.push(part);\n                partsBits.push(bits);\n            } while (!done);\n            JSBI.__fillFromParts(result, parts, partsBits);\n        }\n        else {\n            result.__initializeDigits();\n            let done = false;\n            let charsSoFar = 0;\n            do {\n                let part = 0;\n                let multiplier = 1;\n                while (true) {\n                    let d;\n                    if (((current - 48) >>> 0) < limDigit) {\n                        d = current - 48;\n                    }\n                    else if ((((current | 32) - 97) >>> 0) < limAlpha) {\n                        d = (current | 32) - 87;\n                    }\n                    else {\n                        done = true;\n                        break;\n                    }\n                    const m = multiplier * radix;\n                    if (m > 0x3FFFFFFF)\n                        break;\n                    multiplier = m;\n                    part = part * radix + d;\n                    charsSoFar++;\n                    if (++cursor === length) {\n                        done = true;\n                        break;\n                    }\n                    current = string.charCodeAt(cursor);\n                }\n                roundup = JSBI.__kBitsPerCharTableMultiplier * 30 - 1;\n                const digitsSoFar = (((bitsPerChar * charsSoFar + roundup) >>>\n                    JSBI.__kBitsPerCharTableShift) / 30) | 0;\n                result.__inplaceMultiplyAdd(multiplier, part, digitsSoFar);\n            } while (!done);\n        }\n        if (cursor !== length) {\n            if (!JSBI.__isWhitespace(current))\n                return null;\n            for (cursor++; cursor < length; cursor++) {\n                current = string.charCodeAt(cursor);\n                if (!JSBI.__isWhitespace(current))\n                    return null;\n            }\n        }\n        // Get result.\n        result.sign = (sign === -1);\n        return result.__trim();\n    }\n    static __fillFromParts(result, parts, partsBits) {\n        let digitIndex = 0;\n        let digit = 0;\n        let bitsInDigit = 0;\n        for (let i = parts.length - 1; i >= 0; i--) {\n            const part = parts[i];\n            const partBits = partsBits[i];\n            digit |= (part << bitsInDigit);\n            bitsInDigit += partBits;\n            if (bitsInDigit === 30) {\n                result.__setDigit(digitIndex++, digit);\n                bitsInDigit = 0;\n                digit = 0;\n            }\n            else if (bitsInDigit > 30) {\n                result.__setDigit(digitIndex++, digit & 0x3FFFFFFF);\n                bitsInDigit -= 30;\n                digit = part >>> (partBits - bitsInDigit);\n            }\n        }\n        if (digit !== 0) {\n            if (digitIndex >= result.length)\n                throw new Error('implementation bug');\n            result.__setDigit(digitIndex++, digit);\n        }\n        for (; digitIndex < result.length; digitIndex++) {\n            result.__setDigit(digitIndex, 0);\n        }\n    }\n    static __toStringBasePowerOfTwo(x, radix) {\n        const length = x.length;\n        let bits = radix - 1;\n        bits = ((bits >>> 1) & 0x55) + (bits & 0x55);\n        bits = ((bits >>> 2) & 0x33) + (bits & 0x33);\n        bits = ((bits >>> 4) & 0x0F) + (bits & 0x0F);\n        const bitsPerChar = bits;\n        const charMask = radix - 1;\n        const msd = x.__digit(length - 1);\n        const msdLeadingZeros = JSBI.__clz30(msd);\n        const bitLength = length * 30 - msdLeadingZeros;\n        let charsRequired = ((bitLength + bitsPerChar - 1) / bitsPerChar) | 0;\n        if (x.sign)\n            charsRequired++;\n        if (charsRequired > (1 << 28))\n            throw new Error('string too long');\n        const result = new Array(charsRequired);\n        let pos = charsRequired - 1;\n        let digit = 0;\n        let availableBits = 0;\n        for (let i = 0; i < length - 1; i++) {\n            const newDigit = x.__digit(i);\n            const current = (digit | (newDigit << availableBits)) & charMask;\n            result[pos--] = JSBI.__kConversionChars[current];\n            const consumedBits = bitsPerChar - availableBits;\n            digit = newDigit >>> consumedBits;\n            availableBits = 30 - consumedBits;\n            while (availableBits >= bitsPerChar) {\n                result[pos--] = JSBI.__kConversionChars[digit & charMask];\n                digit >>>= bitsPerChar;\n                availableBits -= bitsPerChar;\n            }\n        }\n        const current = (digit | (msd << availableBits)) & charMask;\n        result[pos--] = JSBI.__kConversionChars[current];\n        digit = msd >>> (bitsPerChar - availableBits);\n        while (digit !== 0) {\n            result[pos--] = JSBI.__kConversionChars[digit & charMask];\n            digit >>>= bitsPerChar;\n        }\n        if (x.sign)\n            result[pos--] = '-';\n        if (pos !== -1)\n            throw new Error('implementation bug');\n        return result.join('');\n    }\n    static __toStringGeneric(x, radix, isRecursiveCall) {\n        const length = x.length;\n        if (length === 0)\n            return '';\n        if (length === 1) {\n            let result = x.__unsignedDigit(0).toString(radix);\n            if (isRecursiveCall === false && x.sign) {\n                result = '-' + result;\n            }\n            return result;\n        }\n        const bitLength = length * 30 - JSBI.__clz30(x.__digit(length - 1));\n        const maxBitsPerChar = JSBI.__kMaxBitsPerChar[radix];\n        const minBitsPerChar = maxBitsPerChar - 1;\n        let charsRequired = bitLength * JSBI.__kBitsPerCharTableMultiplier;\n        charsRequired += minBitsPerChar - 1;\n        charsRequired = (charsRequired / minBitsPerChar) | 0;\n        const secondHalfChars = (charsRequired + 1) >> 1;\n        // Divide-and-conquer: split by a power of {radix} that's approximately\n        // the square root of {x}, then recurse.\n        const conqueror = JSBI.exponentiate(JSBI.__oneDigit(radix, false), JSBI.__oneDigit(secondHalfChars, false));\n        let quotient;\n        let secondHalf;\n        const divisor = conqueror.__unsignedDigit(0);\n        if (conqueror.length === 1 && divisor <= 0x7FFF) {\n            quotient = new JSBI(x.length, false);\n            quotient.__initializeDigits();\n            let remainder = 0;\n            for (let i = x.length * 2 - 1; i >= 0; i--) {\n                const input = (remainder << 15) | x.__halfDigit(i);\n                quotient.__setHalfDigit(i, (input / divisor) | 0);\n                remainder = (input % divisor) | 0;\n            }\n            secondHalf = remainder.toString(radix);\n        }\n        else {\n            const divisionResult = JSBI.__absoluteDivLarge(x, conqueror, true, true);\n            quotient = divisionResult.quotient;\n            const remainder = divisionResult.remainder.__trim();\n            secondHalf = JSBI.__toStringGeneric(remainder, radix, true);\n        }\n        quotient.__trim();\n        let firstHalf = JSBI.__toStringGeneric(quotient, radix, true);\n        while (secondHalf.length < secondHalfChars) {\n            secondHalf = '0' + secondHalf;\n        }\n        if (isRecursiveCall === false && x.sign) {\n            firstHalf = '-' + firstHalf;\n        }\n        return firstHalf + secondHalf;\n    }\n    static __unequalSign(leftNegative) {\n        return leftNegative ? -1 : 1;\n    }\n    static __absoluteGreater(bothNegative) {\n        return bothNegative ? -1 : 1;\n    }\n    static __absoluteLess(bothNegative) {\n        return bothNegative ? 1 : -1;\n    }\n    static __compareToBigInt(x, y) {\n        const xSign = x.sign;\n        if (xSign !== y.sign)\n            return JSBI.__unequalSign(xSign);\n        const result = JSBI.__absoluteCompare(x, y);\n        if (result > 0)\n            return JSBI.__absoluteGreater(xSign);\n        if (result < 0)\n            return JSBI.__absoluteLess(xSign);\n        return 0;\n    }\n    static __compareToNumber(x, y) {\n        if (JSBI.__isOneDigitInt(y)) {\n            const xSign = x.sign;\n            const ySign = (y < 0);\n            if (xSign !== ySign)\n                return JSBI.__unequalSign(xSign);\n            if (x.length === 0) {\n                if (ySign)\n                    throw new Error('implementation bug');\n                return y === 0 ? 0 : -1;\n            }\n            // Any multi-digit BigInt is bigger than an int32.\n            if (x.length > 1)\n                return JSBI.__absoluteGreater(xSign);\n            const yAbs = Math.abs(y);\n            const xDigit = x.__unsignedDigit(0);\n            if (xDigit > yAbs)\n                return JSBI.__absoluteGreater(xSign);\n            if (xDigit < yAbs)\n                return JSBI.__absoluteLess(xSign);\n            return 0;\n        }\n        return JSBI.__compareToDouble(x, y);\n    }\n    static __compareToDouble(x, y) {\n        if (y !== y)\n            return y; // NaN.\n        if (y === Infinity)\n            return -1;\n        if (y === -Infinity)\n            return 1;\n        const xSign = x.sign;\n        const ySign = (y < 0);\n        if (xSign !== ySign)\n            return JSBI.__unequalSign(xSign);\n        if (y === 0) {\n            throw new Error('implementation bug: should be handled elsewhere');\n        }\n        if (x.length === 0)\n            return -1;\n        JSBI.__kBitConversionDouble[0] = y;\n        const rawExponent = (JSBI.__kBitConversionInts[1] >>> 20) & 0x7FF;\n        if (rawExponent === 0x7FF) {\n            throw new Error('implementation bug: handled elsewhere');\n        }\n        const exponent = rawExponent - 0x3FF;\n        if (exponent < 0) {\n            // The absolute value of y is less than 1. Only 0n has an absolute\n            // value smaller than that, but we've already covered that case.\n            return JSBI.__absoluteGreater(xSign);\n        }\n        const xLength = x.length;\n        let xMsd = x.__digit(xLength - 1);\n        const msdLeadingZeros = JSBI.__clz30(xMsd);\n        const xBitLength = xLength * 30 - msdLeadingZeros;\n        const yBitLength = exponent + 1;\n        if (xBitLength < yBitLength)\n            return JSBI.__absoluteLess(xSign);\n        if (xBitLength > yBitLength)\n            return JSBI.__absoluteGreater(xSign);\n        // Same sign, same bit length. Shift mantissa to align with x and compare\n        // bit for bit.\n        const kHiddenBit = 0x00100000;\n        let mantissaHigh = (JSBI.__kBitConversionInts[1] & 0xFFFFF) | kHiddenBit;\n        let mantissaLow = JSBI.__kBitConversionInts[0];\n        const kMantissaHighTopBit = 20;\n        const msdTopBit = 29 - msdLeadingZeros;\n        if (msdTopBit !== (((xBitLength - 1) % 30) | 0)) {\n            throw new Error('implementation bug');\n        }\n        let compareMantissa; // Shifted chunk of mantissa.\n        let remainingMantissaBits = 0;\n        // First, compare most significant digit against beginning of mantissa.\n        if (msdTopBit < kMantissaHighTopBit) {\n            const shift = kMantissaHighTopBit - msdTopBit;\n            remainingMantissaBits = shift + 32;\n            compareMantissa = mantissaHigh >>> shift;\n            mantissaHigh = (mantissaHigh << (32 - shift)) | (mantissaLow >>> shift);\n            mantissaLow = mantissaLow << (32 - shift);\n        }\n        else if (msdTopBit === kMantissaHighTopBit) {\n            remainingMantissaBits = 32;\n            compareMantissa = mantissaHigh;\n            mantissaHigh = mantissaLow;\n            mantissaLow = 0;\n        }\n        else {\n            const shift = msdTopBit - kMantissaHighTopBit;\n            remainingMantissaBits = 32 - shift;\n            compareMantissa =\n                (mantissaHigh << shift) | (mantissaLow >>> (32 - shift));\n            mantissaHigh = mantissaLow << shift;\n            mantissaLow = 0;\n        }\n        xMsd = xMsd >>> 0;\n        compareMantissa = compareMantissa >>> 0;\n        if (xMsd > compareMantissa)\n            return JSBI.__absoluteGreater(xSign);\n        if (xMsd < compareMantissa)\n            return JSBI.__absoluteLess(xSign);\n        // Then, compare additional digits against remaining mantissa bits.\n        for (let digitIndex = xLength - 2; digitIndex >= 0; digitIndex--) {\n            if (remainingMantissaBits > 0) {\n                remainingMantissaBits -= 30;\n                compareMantissa = mantissaHigh >>> 2;\n                mantissaHigh = (mantissaHigh << 30) | (mantissaLow >>> 2);\n                mantissaLow = (mantissaLow << 30);\n            }\n            else {\n                compareMantissa = 0;\n            }\n            const digit = x.__unsignedDigit(digitIndex);\n            if (digit > compareMantissa)\n                return JSBI.__absoluteGreater(xSign);\n            if (digit < compareMantissa)\n                return JSBI.__absoluteLess(xSign);\n        }\n        // Integer parts are equal; check whether {y} has a fractional part.\n        if (mantissaHigh !== 0 || mantissaLow !== 0) {\n            if (remainingMantissaBits === 0)\n                throw new Error('implementation bug');\n            return JSBI.__absoluteLess(xSign);\n        }\n        return 0;\n    }\n    static __equalToNumber(x, y) {\n        if (JSBI.__isOneDigitInt(y)) {\n            if (y === 0)\n                return x.length === 0;\n            // Any multi-digit BigInt is bigger than an int32.\n            return (x.length === 1) && (x.sign === (y < 0)) &&\n                (x.__unsignedDigit(0) === Math.abs(y));\n        }\n        return JSBI.__compareToDouble(x, y) === 0;\n    }\n    // Comparison operations, chosen such that \"op ^ 2\" reverses direction:\n    // 0 - lessThan\n    // 1 - lessThanOrEqual\n    // 2 - greaterThan\n    // 3 - greaterThanOrEqual\n    static __comparisonResultToBool(result, op) {\n        switch (op) {\n            case 0: return result < 0;\n            case 1: return result <= 0;\n            case 2: return result > 0;\n            case 3: return result >= 0;\n        }\n    }\n    static __compare(x, y, op) {\n        x = JSBI.__toPrimitive(x);\n        y = JSBI.__toPrimitive(y);\n        if (typeof x === 'string' && typeof y === 'string') {\n            switch (op) {\n                case 0: return x < y;\n                case 1: return x <= y;\n                case 2: return x > y;\n                case 3: return x >= y;\n            }\n        }\n        if (JSBI.__isBigInt(x) && typeof y === 'string') {\n            y = JSBI.__fromString(y);\n            if (y === null)\n                return false;\n            return JSBI.__comparisonResultToBool(JSBI.__compareToBigInt(x, y), op);\n        }\n        if (typeof x === 'string' && JSBI.__isBigInt(y)) {\n            x = JSBI.__fromString(x);\n            if (x === null)\n                return false;\n            return JSBI.__comparisonResultToBool(JSBI.__compareToBigInt(x, y), op);\n        }\n        x = JSBI.__toNumeric(x);\n        y = JSBI.__toNumeric(y);\n        if (JSBI.__isBigInt(x)) {\n            if (JSBI.__isBigInt(y)) {\n                return JSBI.__comparisonResultToBool(JSBI.__compareToBigInt(x, y), op);\n            }\n            if (typeof y !== 'number')\n                throw new Error('implementation bug');\n            return JSBI.__comparisonResultToBool(JSBI.__compareToNumber(x, y), op);\n        }\n        if (typeof x !== 'number')\n            throw new Error('implementation bug');\n        if (JSBI.__isBigInt(y)) {\n            // Note that \"op ^ 2\" reverses the op's direction.\n            return JSBI.__comparisonResultToBool(JSBI.__compareToNumber(y, x), (op ^ 2));\n        }\n        if (typeof y !== 'number')\n            throw new Error('implementation bug');\n        switch (op) {\n            case 0: return x < y;\n            case 1: return x <= y;\n            case 2: return x > y;\n            case 3: return x >= y;\n        }\n    }\n    __clzmsd() {\n        return JSBI.__clz30(this.__digit(this.length - 1));\n    }\n    static __absoluteAdd(x, y, resultSign) {\n        if (x.length < y.length)\n            return JSBI.__absoluteAdd(y, x, resultSign);\n        if (x.length === 0)\n            return x;\n        if (y.length === 0)\n            return x.sign === resultSign ? x : JSBI.unaryMinus(x);\n        let resultLength = x.length;\n        if (x.__clzmsd() === 0 || (y.length === x.length && y.__clzmsd() === 0)) {\n            resultLength++;\n        }\n        const result = new JSBI(resultLength, resultSign);\n        let carry = 0;\n        let i = 0;\n        for (; i < y.length; i++) {\n            const r = x.__digit(i) + y.__digit(i) + carry;\n            carry = r >>> 30;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        for (; i < x.length; i++) {\n            const r = x.__digit(i) + carry;\n            carry = r >>> 30;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        if (i < result.length) {\n            result.__setDigit(i, carry);\n        }\n        return result.__trim();\n    }\n    static __absoluteSub(x, y, resultSign) {\n        if (x.length === 0)\n            return x;\n        if (y.length === 0)\n            return x.sign === resultSign ? x : JSBI.unaryMinus(x);\n        const result = new JSBI(x.length, resultSign);\n        let borrow = 0;\n        let i = 0;\n        for (; i < y.length; i++) {\n            const r = x.__digit(i) - y.__digit(i) - borrow;\n            borrow = (r >>> 30) & 1;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        for (; i < x.length; i++) {\n            const r = x.__digit(i) - borrow;\n            borrow = (r >>> 30) & 1;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        return result.__trim();\n    }\n    static __absoluteAddOne(x, sign, result = null) {\n        const inputLength = x.length;\n        if (result === null) {\n            result = new JSBI(inputLength, sign);\n        }\n        else {\n            result.sign = sign;\n        }\n        let carry = 1;\n        for (let i = 0; i < inputLength; i++) {\n            const r = x.__digit(i) + carry;\n            carry = r >>> 30;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        if (carry !== 0) {\n            result.__setDigitGrow(inputLength, 1);\n        }\n        return result;\n    }\n    static __absoluteSubOne(x, resultLength) {\n        const length = x.length;\n        resultLength = resultLength || length;\n        const result = new JSBI(resultLength, false);\n        let borrow = 1;\n        for (let i = 0; i < length; i++) {\n            const r = x.__digit(i) - borrow;\n            borrow = (r >>> 30) & 1;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        if (borrow !== 0)\n            throw new Error('implementation bug');\n        for (let i = length; i < resultLength; i++) {\n            result.__setDigit(i, 0);\n        }\n        return result;\n    }\n    static __absoluteAnd(x, y, result = null) {\n        let xLength = x.length;\n        let yLength = y.length;\n        let numPairs = yLength;\n        if (xLength < yLength) {\n            numPairs = xLength;\n            const tmp = x;\n            const tmpLength = xLength;\n            x = y;\n            xLength = yLength;\n            y = tmp;\n            yLength = tmpLength;\n        }\n        let resultLength = numPairs;\n        if (result === null) {\n            result = new JSBI(resultLength, false);\n        }\n        else {\n            resultLength = result.length;\n        }\n        let i = 0;\n        for (; i < numPairs; i++) {\n            result.__setDigit(i, x.__digit(i) & y.__digit(i));\n        }\n        for (; i < resultLength; i++) {\n            result.__setDigit(i, 0);\n        }\n        return result;\n    }\n    static __absoluteAndNot(x, y, result = null) {\n        const xLength = x.length;\n        const yLength = y.length;\n        let numPairs = yLength;\n        if (xLength < yLength) {\n            numPairs = xLength;\n        }\n        let resultLength = xLength;\n        if (result === null) {\n            result = new JSBI(resultLength, false);\n        }\n        else {\n            resultLength = result.length;\n        }\n        let i = 0;\n        for (; i < numPairs; i++) {\n            result.__setDigit(i, x.__digit(i) & ~y.__digit(i));\n        }\n        for (; i < xLength; i++) {\n            result.__setDigit(i, x.__digit(i));\n        }\n        for (; i < resultLength; i++) {\n            result.__setDigit(i, 0);\n        }\n        return result;\n    }\n    static __absoluteOr(x, y, result = null) {\n        let xLength = x.length;\n        let yLength = y.length;\n        let numPairs = yLength;\n        if (xLength < yLength) {\n            numPairs = xLength;\n            const tmp = x;\n            const tmpLength = xLength;\n            x = y;\n            xLength = yLength;\n            y = tmp;\n            yLength = tmpLength;\n        }\n        let resultLength = xLength;\n        if (result === null) {\n            result = new JSBI(resultLength, false);\n        }\n        else {\n            resultLength = result.length;\n        }\n        let i = 0;\n        for (; i < numPairs; i++) {\n            result.__setDigit(i, x.__digit(i) | y.__digit(i));\n        }\n        for (; i < xLength; i++) {\n            result.__setDigit(i, x.__digit(i));\n        }\n        for (; i < resultLength; i++) {\n            result.__setDigit(i, 0);\n        }\n        return result;\n    }\n    static __absoluteXor(x, y, result = null) {\n        let xLength = x.length;\n        let yLength = y.length;\n        let numPairs = yLength;\n        if (xLength < yLength) {\n            numPairs = xLength;\n            const tmp = x;\n            const tmpLength = xLength;\n            x = y;\n            xLength = yLength;\n            y = tmp;\n            yLength = tmpLength;\n        }\n        let resultLength = xLength;\n        if (result === null) {\n            result = new JSBI(resultLength, false);\n        }\n        else {\n            resultLength = result.length;\n        }\n        let i = 0;\n        for (; i < numPairs; i++) {\n            result.__setDigit(i, x.__digit(i) ^ y.__digit(i));\n        }\n        for (; i < xLength; i++) {\n            result.__setDigit(i, x.__digit(i));\n        }\n        for (; i < resultLength; i++) {\n            result.__setDigit(i, 0);\n        }\n        return result;\n    }\n    static __absoluteCompare(x, y) {\n        const diff = x.length - y.length;\n        if (diff !== 0)\n            return diff;\n        let i = x.length - 1;\n        while (i >= 0 && x.__digit(i) === y.__digit(i))\n            i--;\n        if (i < 0)\n            return 0;\n        return x.__unsignedDigit(i) > y.__unsignedDigit(i) ? 1 : -1;\n    }\n    static __multiplyAccumulate(multiplicand, multiplier, accumulator, accumulatorIndex) {\n        if (multiplier === 0)\n            return;\n        const m2Low = multiplier & 0x7FFF;\n        const m2High = multiplier >>> 15;\n        let carry = 0;\n        let high = 0;\n        for (let i = 0; i < multiplicand.length; i++, accumulatorIndex++) {\n            let acc = accumulator.__digit(accumulatorIndex);\n            const m1 = multiplicand.__digit(i);\n            const m1Low = m1 & 0x7FFF;\n            const m1High = m1 >>> 15;\n            const rLow = JSBI.__imul(m1Low, m2Low);\n            const rMid1 = JSBI.__imul(m1Low, m2High);\n            const rMid2 = JSBI.__imul(m1High, m2Low);\n            const rHigh = JSBI.__imul(m1High, m2High);\n            acc += high + rLow + carry;\n            carry = acc >>> 30;\n            acc &= 0x3FFFFFFF;\n            acc += ((rMid1 & 0x7FFF) << 15) + ((rMid2 & 0x7FFF) << 15);\n            carry += acc >>> 30;\n            high = rHigh + (rMid1 >>> 15) + (rMid2 >>> 15);\n            accumulator.__setDigit(accumulatorIndex, acc & 0x3FFFFFFF);\n        }\n        for (; carry !== 0 || high !== 0; accumulatorIndex++) {\n            let acc = accumulator.__digit(accumulatorIndex);\n            acc += carry + high;\n            high = 0;\n            carry = acc >>> 30;\n            accumulator.__setDigit(accumulatorIndex, acc & 0x3FFFFFFF);\n        }\n    }\n    static __internalMultiplyAdd(source, factor, summand, n, result) {\n        let carry = summand;\n        let high = 0;\n        for (let i = 0; i < n; i++) {\n            const digit = source.__digit(i);\n            const rx = JSBI.__imul(digit & 0x7FFF, factor);\n            const ry = JSBI.__imul(digit >>> 15, factor);\n            const r = rx + ((ry & 0x7FFF) << 15) + high + carry;\n            carry = r >>> 30;\n            high = ry >>> 15;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        if (result.length > n) {\n            result.__setDigit(n++, carry + high);\n            while (n < result.length) {\n                result.__setDigit(n++, 0);\n            }\n        }\n        else {\n            if (carry + high !== 0)\n                throw new Error('implementation bug');\n        }\n    }\n    __inplaceMultiplyAdd(multiplier, summand, length) {\n        if (length > this.length)\n            length = this.length;\n        const mLow = multiplier & 0x7FFF;\n        const mHigh = multiplier >>> 15;\n        let carry = 0;\n        let high = summand;\n        for (let i = 0; i < length; i++) {\n            const d = this.__digit(i);\n            const dLow = d & 0x7FFF;\n            const dHigh = d >>> 15;\n            const pLow = JSBI.__imul(dLow, mLow);\n            const pMid1 = JSBI.__imul(dLow, mHigh);\n            const pMid2 = JSBI.__imul(dHigh, mLow);\n            const pHigh = JSBI.__imul(dHigh, mHigh);\n            let result = high + pLow + carry;\n            carry = result >>> 30;\n            result &= 0x3FFFFFFF;\n            result += ((pMid1 & 0x7FFF) << 15) + ((pMid2 & 0x7FFF) << 15);\n            carry += result >>> 30;\n            high = pHigh + (pMid1 >>> 15) + (pMid2 >>> 15);\n            this.__setDigit(i, result & 0x3FFFFFFF);\n        }\n        if (carry !== 0 || high !== 0) {\n            throw new Error('implementation bug');\n        }\n    }\n    static __absoluteDivSmall(x, divisor, quotient = null) {\n        if (quotient === null)\n            quotient = new JSBI(x.length, false);\n        let remainder = 0;\n        for (let i = x.length * 2 - 1; i >= 0; i -= 2) {\n            let input = ((remainder << 15) | x.__halfDigit(i)) >>> 0;\n            const upperHalf = (input / divisor) | 0;\n            remainder = (input % divisor) | 0;\n            input = ((remainder << 15) | x.__halfDigit(i - 1)) >>> 0;\n            const lowerHalf = (input / divisor) | 0;\n            remainder = (input % divisor) | 0;\n            quotient.__setDigit(i >>> 1, (upperHalf << 15) | lowerHalf);\n        }\n        return quotient;\n    }\n    static __absoluteModSmall(x, divisor) {\n        let remainder = 0;\n        for (let i = x.length * 2 - 1; i >= 0; i--) {\n            const input = ((remainder << 15) | x.__halfDigit(i)) >>> 0;\n            remainder = (input % divisor) | 0;\n        }\n        return remainder;\n    }\n    static __absoluteDivLarge(dividend, divisor, wantQuotient, wantRemainder) {\n        const n = divisor.__halfDigitLength();\n        const n2 = divisor.length;\n        const m = dividend.__halfDigitLength() - n;\n        let q = null;\n        if (wantQuotient) {\n            q = new JSBI((m + 2) >>> 1, false);\n            q.__initializeDigits();\n        }\n        const qhatv = new JSBI((n + 2) >>> 1, false);\n        qhatv.__initializeDigits();\n        // D1.\n        const shift = JSBI.__clz15(divisor.__halfDigit(n - 1));\n        if (shift > 0) {\n            divisor = JSBI.__specialLeftShift(divisor, shift, 0 /* add no digits*/);\n        }\n        const u = JSBI.__specialLeftShift(dividend, shift, 1 /* add one digit */);\n        // D2.\n        const vn1 = divisor.__halfDigit(n - 1);\n        let halfDigitBuffer = 0;\n        for (let j = m; j >= 0; j--) {\n            // D3.\n            let qhat = 0x7FFF;\n            const ujn = u.__halfDigit(j + n);\n            if (ujn !== vn1) {\n                const input = ((ujn << 15) | u.__halfDigit(j + n - 1)) >>> 0;\n                qhat = (input / vn1) | 0;\n                let rhat = (input % vn1) | 0;\n                const vn2 = divisor.__halfDigit(n - 2);\n                const ujn2 = u.__halfDigit(j + n - 2);\n                while ((JSBI.__imul(qhat, vn2) >>> 0) > (((rhat << 16) | ujn2) >>> 0)) {\n                    qhat--;\n                    rhat += vn1;\n                    if (rhat > 0x7FFF)\n                        break;\n                }\n            }\n            // D4.\n            JSBI.__internalMultiplyAdd(divisor, qhat, 0, n2, qhatv);\n            let c = u.__inplaceSub(qhatv, j, n + 1);\n            if (c !== 0) {\n                c = u.__inplaceAdd(divisor, j, n);\n                u.__setHalfDigit(j + n, (u.__halfDigit(j + n) + c) & 0x7FFF);\n                qhat--;\n            }\n            if (wantQuotient) {\n                if (j & 1) {\n                    halfDigitBuffer = qhat << 15;\n                }\n                else {\n                    // TODO make this statically determinable\n                    q.__setDigit(j >>> 1, halfDigitBuffer | qhat);\n                }\n            }\n        }\n        if (wantRemainder) {\n            u.__inplaceRightShift(shift);\n            if (wantQuotient) {\n                return { quotient: q, remainder: u };\n            }\n            return u;\n        }\n        if (wantQuotient)\n            return q;\n        // TODO find a way to make this statically unreachable?\n        throw new Error('unreachable');\n    }\n    static __clz15(value) {\n        return JSBI.__clz30(value) - 15;\n    }\n    // TODO: work on full digits, like __inplaceSub?\n    __inplaceAdd(summand, startIndex, halfDigits) {\n        let carry = 0;\n        for (let i = 0; i < halfDigits; i++) {\n            const sum = this.__halfDigit(startIndex + i) +\n                summand.__halfDigit(i) +\n                carry;\n            carry = sum >>> 15;\n            this.__setHalfDigit(startIndex + i, sum & 0x7FFF);\n        }\n        return carry;\n    }\n    __inplaceSub(subtrahend, startIndex, halfDigits) {\n        const fullSteps = (halfDigits - 1) >>> 1;\n        let borrow = 0;\n        if (startIndex & 1) {\n            // this:   [..][..][..]\n            // subtr.:   [..][..]\n            startIndex >>= 1;\n            let current = this.__digit(startIndex);\n            let r0 = current & 0x7FFF;\n            let i = 0;\n            for (; i < fullSteps; i++) {\n                const sub = subtrahend.__digit(i);\n                const r15 = (current >>> 15) - (sub & 0x7FFF) - borrow;\n                borrow = (r15 >>> 15) & 1;\n                this.__setDigit(startIndex + i, ((r15 & 0x7FFF) << 15) | (r0 & 0x7FFF));\n                current = this.__digit(startIndex + i + 1);\n                r0 = (current & 0x7FFF) - (sub >>> 15) - borrow;\n                borrow = (r0 >>> 15) & 1;\n            }\n            // Unrolling the last iteration gives a 5% performance benefit!\n            const sub = subtrahend.__digit(i);\n            const r15 = (current >>> 15) - (sub & 0x7FFF) - borrow;\n            borrow = (r15 >>> 15) & 1;\n            this.__setDigit(startIndex + i, ((r15 & 0x7FFF) << 15) | (r0 & 0x7FFF));\n            const subTop = sub >>> 15;\n            if (startIndex + i + 1 >= this.length) {\n                throw new RangeError('out of bounds');\n            }\n            if ((halfDigits & 1) === 0) {\n                current = this.__digit(startIndex + i + 1);\n                r0 = (current & 0x7FFF) - subTop - borrow;\n                borrow = (r0 >>> 15) & 1;\n                this.__setDigit(startIndex + subtrahend.length, (current & 0x3FFF8000) | (r0 & 0x7FFF));\n            }\n        }\n        else {\n            startIndex >>= 1;\n            let i = 0;\n            for (; i < subtrahend.length - 1; i++) {\n                const current = this.__digit(startIndex + i);\n                const sub = subtrahend.__digit(i);\n                const r0 = (current & 0x7FFF) - (sub & 0x7FFF) - borrow;\n                borrow = (r0 >>> 15) & 1;\n                const r15 = (current >>> 15) - (sub >>> 15) - borrow;\n                borrow = (r15 >>> 15) & 1;\n                this.__setDigit(startIndex + i, ((r15 & 0x7FFF) << 15) | (r0 & 0x7FFF));\n            }\n            const current = this.__digit(startIndex + i);\n            const sub = subtrahend.__digit(i);\n            const r0 = (current & 0x7FFF) - (sub & 0x7FFF) - borrow;\n            borrow = (r0 >>> 15) & 1;\n            let r15 = 0;\n            if ((halfDigits & 1) === 0) {\n                r15 = (current >>> 15) - (sub >>> 15) - borrow;\n                borrow = (r15 >>> 15) & 1;\n            }\n            this.__setDigit(startIndex + i, ((r15 & 0x7FFF) << 15) | (r0 & 0x7FFF));\n        }\n        return borrow;\n    }\n    __inplaceRightShift(shift) {\n        if (shift === 0)\n            return;\n        let carry = this.__digit(0) >>> shift;\n        const last = this.length - 1;\n        for (let i = 0; i < last; i++) {\n            const d = this.__digit(i + 1);\n            this.__setDigit(i, ((d << (30 - shift)) & 0x3FFFFFFF) | carry);\n            carry = d >>> shift;\n        }\n        this.__setDigit(last, carry);\n    }\n    static __specialLeftShift(x, shift, addDigit) {\n        const n = x.length;\n        const resultLength = n + addDigit;\n        const result = new JSBI(resultLength, false);\n        if (shift === 0) {\n            for (let i = 0; i < n; i++)\n                result.__setDigit(i, x.__digit(i));\n            if (addDigit > 0)\n                result.__setDigit(n, 0);\n            return result;\n        }\n        let carry = 0;\n        for (let i = 0; i < n; i++) {\n            const d = x.__digit(i);\n            result.__setDigit(i, ((d << shift) & 0x3FFFFFFF) | carry);\n            carry = d >>> (30 - shift);\n        }\n        if (addDigit > 0) {\n            result.__setDigit(n, carry);\n        }\n        return result;\n    }\n    static __leftShiftByAbsolute(x, y) {\n        const shift = JSBI.__toShiftAmount(y);\n        if (shift < 0)\n            throw new RangeError('BigInt too big');\n        const digitShift = (shift / 30) | 0;\n        const bitsShift = shift % 30;\n        const length = x.length;\n        const grow = bitsShift !== 0 &&\n            (x.__digit(length - 1) >>> (30 - bitsShift)) !== 0;\n        const resultLength = length + digitShift + (grow ? 1 : 0);\n        const result = new JSBI(resultLength, x.sign);\n        if (bitsShift === 0) {\n            let i = 0;\n            for (; i < digitShift; i++)\n                result.__setDigit(i, 0);\n            for (; i < resultLength; i++) {\n                result.__setDigit(i, x.__digit(i - digitShift));\n            }\n        }\n        else {\n            let carry = 0;\n            for (let i = 0; i < digitShift; i++)\n                result.__setDigit(i, 0);\n            for (let i = 0; i < length; i++) {\n                const d = x.__digit(i);\n                result.__setDigit(i + digitShift, ((d << bitsShift) & 0x3FFFFFFF) | carry);\n                carry = d >>> (30 - bitsShift);\n            }\n            if (grow) {\n                result.__setDigit(length + digitShift, carry);\n            }\n            else {\n                if (carry !== 0)\n                    throw new Error('implementation bug');\n            }\n        }\n        return result.__trim();\n    }\n    static __rightShiftByAbsolute(x, y) {\n        const length = x.length;\n        const sign = x.sign;\n        const shift = JSBI.__toShiftAmount(y);\n        if (shift < 0)\n            return JSBI.__rightShiftByMaximum(sign);\n        const digitShift = (shift / 30) | 0;\n        const bitsShift = shift % 30;\n        let resultLength = length - digitShift;\n        if (resultLength <= 0)\n            return JSBI.__rightShiftByMaximum(sign);\n        // For negative numbers, round down if any bit was shifted out (so that\n        // e.g. -5n >> 1n == -3n and not -2n). Check now whether this will happen\n        // and whether itc an cause overflow into a new digit. If we allocate the\n        // result large enough up front, it avoids having to do grow it later.\n        let mustRoundDown = false;\n        if (sign) {\n            const mask = (1 << bitsShift) - 1;\n            if ((x.__digit(digitShift) & mask) !== 0) {\n                mustRoundDown = true;\n            }\n            else {\n                for (let i = 0; i < digitShift; i++) {\n                    if (x.__digit(i) !== 0) {\n                        mustRoundDown = true;\n                        break;\n                    }\n                }\n            }\n        }\n        // If bitsShift is non-zero, it frees up bits, preventing overflow.\n        if (mustRoundDown && bitsShift === 0) {\n            // Overflow cannot happen if the most significant digit has unset bits.\n            const msd = x.__digit(length - 1);\n            const roundingCanOverflow = ~msd === 0;\n            if (roundingCanOverflow)\n                resultLength++;\n        }\n        let result = new JSBI(resultLength, sign);\n        if (bitsShift === 0) {\n            // Zero out any overflow digit (see \"roundingCanOverflow\" above).\n            result.__setDigit(resultLength - 1, 0);\n            for (let i = digitShift; i < length; i++) {\n                result.__setDigit(i - digitShift, x.__digit(i));\n            }\n        }\n        else {\n            let carry = x.__digit(digitShift) >>> bitsShift;\n            const last = length - digitShift - 1;\n            for (let i = 0; i < last; i++) {\n                const d = x.__digit(i + digitShift + 1);\n                result.__setDigit(i, ((d << (30 - bitsShift)) & 0x3FFFFFFF) | carry);\n                carry = d >>> bitsShift;\n            }\n            result.__setDigit(last, carry);\n        }\n        if (mustRoundDown) {\n            // Since the result is negative, rounding down means adding one to its\n            // absolute value. This cannot overflow.\n            result = JSBI.__absoluteAddOne(result, true, result);\n        }\n        return result.__trim();\n    }\n    static __rightShiftByMaximum(sign) {\n        if (sign) {\n            return JSBI.__oneDigit(1, true);\n        }\n        return JSBI.__zero();\n    }\n    static __toShiftAmount(x) {\n        if (x.length > 1)\n            return -1;\n        const value = x.__unsignedDigit(0);\n        if (value > JSBI.__kMaxLengthBits)\n            return -1;\n        return value;\n    }\n    static __toPrimitive(obj, hint = 'default') {\n        if (typeof obj !== 'object')\n            return obj;\n        if (obj.constructor === JSBI)\n            return obj;\n        if (typeof Symbol !== 'undefined' &&\n            typeof Symbol.toPrimitive === 'symbol') {\n            const exoticToPrim = obj[Symbol.toPrimitive];\n            if (exoticToPrim) {\n                const primitive = exoticToPrim(hint);\n                if (typeof primitive !== 'object')\n                    return primitive;\n                throw new TypeError('Cannot convert object to primitive value');\n            }\n        }\n        const valueOf = obj.valueOf;\n        if (valueOf) {\n            const primitive = valueOf.call(obj);\n            if (typeof primitive !== 'object')\n                return primitive;\n        }\n        const toString = obj.toString;\n        if (toString) {\n            const primitive = toString.call(obj);\n            if (typeof primitive !== 'object')\n                return primitive;\n        }\n        throw new TypeError('Cannot convert object to primitive value');\n    }\n    static __toNumeric(value) {\n        if (JSBI.__isBigInt(value))\n            return value;\n        return +value;\n    }\n    static __isBigInt(value) {\n        return typeof value === 'object' && value !== null &&\n            value.constructor === JSBI;\n    }\n    static __truncateToNBits(n, x) {\n        const neededDigits = ((n + 29) / 30) | 0;\n        const result = new JSBI(neededDigits, x.sign);\n        const last = neededDigits - 1;\n        for (let i = 0; i < last; i++) {\n            result.__setDigit(i, x.__digit(i));\n        }\n        let msd = x.__digit(last);\n        if ((n % 30) !== 0) {\n            const drop = 32 - (n % 30);\n            msd = (msd << drop) >>> drop;\n        }\n        result.__setDigit(last, msd);\n        return result.__trim();\n    }\n    static __truncateAndSubFromPowerOfTwo(n, x, resultSign) {\n        const neededDigits = ((n + 29) / 30) | 0;\n        const result = new JSBI(neededDigits, resultSign);\n        let i = 0;\n        const last = neededDigits - 1;\n        let borrow = 0;\n        const limit = Math.min(last, x.length);\n        for (; i < limit; i++) {\n            const r = 0 - x.__digit(i) - borrow;\n            borrow = (r >>> 30) & 1;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        for (; i < last; i++) {\n            result.__setDigit(i, (-borrow & 0x3FFFFFFF) | 0);\n        }\n        let msd = last < x.length ? x.__digit(last) : 0;\n        const msdBitsConsumed = n % 30;\n        let resultMsd;\n        if (msdBitsConsumed === 0) {\n            resultMsd = 0 - msd - borrow;\n            resultMsd &= 0x3FFFFFFF;\n        }\n        else {\n            const drop = 32 - msdBitsConsumed;\n            msd = (msd << drop) >>> drop;\n            const minuendMsd = 1 << (32 - drop);\n            resultMsd = minuendMsd - msd - borrow;\n            resultMsd &= (minuendMsd - 1);\n        }\n        result.__setDigit(last, resultMsd);\n        return result.__trim();\n    }\n    // Digit helpers.\n    __digit(i) {\n        return this[i];\n    }\n    __unsignedDigit(i) {\n        return this[i] >>> 0;\n    }\n    __setDigit(i, digit) {\n        this[i] = digit | 0;\n    }\n    __setDigitGrow(i, digit) {\n        this[i] = digit | 0;\n    }\n    __halfDigitLength() {\n        const len = this.length;\n        if (this.__unsignedDigit(len - 1) <= 0x7FFF)\n            return len * 2 - 1;\n        return len * 2;\n    }\n    __halfDigit(i) {\n        return (this[i >>> 1] >>> ((i & 1) * 15)) & 0x7FFF;\n    }\n    __setHalfDigit(i, value) {\n        const digitIndex = i >>> 1;\n        const previous = this.__digit(digitIndex);\n        const updated = (i & 1) ? (previous & 0x7FFF) | (value << 15)\n            : (previous & 0x3FFF8000) | (value & 0x7FFF);\n        this.__setDigit(digitIndex, updated);\n    }\n    static __digitPow(base, exponent) {\n        let result = 1;\n        while (exponent > 0) {\n            if (exponent & 1)\n                result *= base;\n            exponent >>>= 1;\n            base *= base;\n        }\n        return result;\n    }\n    static __isOneDigitInt(x) {\n        return (x & 0x3FFFFFFF) === x;\n    }\n}\nJSBI.__kMaxLength = 1 << 25;\nJSBI.__kMaxLengthBits = JSBI.__kMaxLength << 5;\n// Lookup table for the maximum number of bits required per character of a\n// base-N string representation of a number. To increase accuracy, the array\n// value is the actual value multiplied by 32. To generate this table:\n//\n// for (let i = 0; i <= 36; i++) {\n//   console.log(Math.ceil(Math.log2(i) * 32) + ',');\n// }\nJSBI.__kMaxBitsPerChar = [\n    0, 0, 32, 51, 64, 75, 83, 90, 96,\n    102, 107, 111, 115, 119, 122, 126, 128,\n    131, 134, 136, 139, 141, 143, 145, 147,\n    149, 151, 153, 154, 156, 158, 159, 160,\n    162, 163, 165, 166, // 33..36\n];\nJSBI.__kBitsPerCharTableShift = 5;\nJSBI.__kBitsPerCharTableMultiplier = 1 << JSBI.__kBitsPerCharTableShift;\nJSBI.__kConversionChars = '0123456789abcdefghijklmnopqrstuvwxyz'.split('');\nJSBI.__kBitConversionBuffer = new ArrayBuffer(8);\nJSBI.__kBitConversionDouble = new Float64Array(JSBI.__kBitConversionBuffer);\nJSBI.__kBitConversionInts = new Int32Array(JSBI.__kBitConversionBuffer);\n// For IE11 compatibility.\n// Note that the custom replacements are tailored for JSBI's needs, and as\n// such are not reusable as general-purpose polyfills.\nJSBI.__clz30 = Math.clz32 ? function (x) {\n    return Math.clz32(x) - 2;\n} : function (x) {\n    if (x === 0)\n        return 30;\n    return 29 - (Math.log(x >>> 0) / Math.LN2 | 0) | 0;\n};\nJSBI.__imul = Math.imul || function (a, b) {\n    return (a * b) | 0;\n};\nexport default JSBI;\n//# sourceMappingURL=jsbi.js.map", "'use strict';\n\nvar isProduction = process.env.NODE_ENV === 'production';\nvar prefix = 'Invariant failed';\nfunction invariant(condition, message) {\n    if (condition) {\n        return;\n    }\n    if (isProduction) {\n        throw new Error(prefix);\n    }\n    var provided = typeof message === 'function' ? message() : message;\n    var value = provided ? \"\".concat(prefix, \": \").concat(provided) : prefix;\n    throw new Error(value);\n}\n\nmodule.exports = invariant;\n", "'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nexports.decodeShortString =\n  exports.encodeShortString =\n  exports.isShortString =\n  exports.isASCII =\n    void 0;\nvar encode_1 = require('./encode');\nfunction isASCII(str) {\n  // eslint-disable-next-line no-control-regex\n  return /^[\\x00-\\x7F]*$/.test(str);\n}\nexports.isASCII = isASCII;\n// function to check if string has less or equal 31 characters\nfunction isShortString(str) {\n  return str.length <= 31;\n}\nexports.isShortString = isShortString;\nfunction encodeShortString(str) {\n  if (!isASCII(str)) throw new Error(''.concat(str, ' is not an ASCII string'));\n  if (!isShortString(str)) throw new Error(''.concat(str, ' is too long'));\n  return (0, encode_1.addHexPrefix)(\n    str.replace(/./g, function (char) {\n      return char.charCodeAt(0).toString(16);\n    })\n  );\n}\nexports.encodeShortString = encodeShortString;\nfunction decodeShortString(str) {\n  return (0, encode_1.removeHexPrefix)(str).replace(/.{2}/g, function (hex) {\n    return String.fromCharCode(parseInt(hex, 16));\n  });\n}\nexports.decodeShortString = decodeShortString;\n", "/*\r\n *  toFormat v2.0.0\r\n *  Adds a toFormat instance method to big.js or decimal.js\r\n *  Copyright (c) 2017 Michael Mclaughlin\r\n *  MIT Licence\r\n */\r\n\r\n /*\r\n * Adds a `toFormat` method to `Ctor.prototype` and a `format` object to `Ctor`, where `Ctor` is\r\n * a big number constructor such as `Decimal` (decimal.js) or `Big` (big.js).\r\n */\r\nfunction toFormat(Ctor) {\r\n  'use strict';\r\n\r\n  /*\r\n   *  Returns a string representing the value of this big number in fixed-point notation to `dp`\r\n   *  decimal places using rounding mode `rm`, and formatted according to the properties of the\r\n   * `fmt`, `this.format` and `this.constructor.format` objects, in that order of precedence.\r\n   *\r\n   *  Example:\r\n   *\r\n   *  x = new Decimal('123456789.987654321')\r\n   *\r\n   *  // Add a format object to the constructor...\r\n   *  Decimal.format = {\r\n   *    decimalSeparator: '.',\r\n   *    groupSeparator: ',',\r\n   *    groupSize: 3,\r\n   *    secondaryGroupSize: 0,\r\n   *    fractionGroupSeparator: '',     // '\\xA0' non-breaking space\r\n   *    fractionGroupSize : 0\r\n   *  }\r\n   *\r\n   *  x.toFormat();                // 123,456,789.987654321\r\n   *  x.toFormat(2, 1);            // 123,456,789.98\r\n   *\r\n   *  // And/or add a format object to the big number itself...\r\n   *  x.format = {\r\n   *    decimalSeparator: ',',\r\n   *    groupSeparator: '',\r\n   *  }\r\n   *\r\n   *  x.toFormat();                // 123456789,987654321\r\n   *\r\n   *  format = {\r\n   *    decimalSeparator: '.',\r\n   *    groupSeparator: ' ',\r\n   *    groupSize: 3,\r\n   *    fractionGroupSeparator: ' ',     // '\\xA0' non-breaking space\r\n   *    fractionGroupSize : 5\r\n   *  }\r\n\r\n   *  // And/or pass a format object to the method call.\r\n   *  x.toFormat(format);          // 123 456 789.98765 4321\r\n   *  x.toFormat(4, format);       // 123 456 789.9877\r\n   *  x.toFormat(2, 1, format);    // 123 456 789.98\r\n   *\r\n   *  [dp] {number} Decimal places. Integer.\r\n   *  [rm] {number} Rounding mode. Integer, 0 to 8. (Ignored if using big.js.)\r\n   *  [fmt] {Object} A format object.\r\n   *\r\n   */\r\n  Ctor.prototype.toFormat = function toFormat(dp, rm, fmt) {\r\n\r\n    if (!this.e && this.e !== 0) return this.toString();   // Infinity/NaN\r\n\r\n    var arr, g1, g2, i,\r\n      u,                             // undefined\r\n      nd,                            // number of integer digits\r\n      intd,                          // integer digits\r\n      intp,                          // integer part\r\n      fracp,                         // fraction part\r\n      dsep,                          // decimalSeparator\r\n      gsep,                          // groupSeparator\r\n      gsize,                         // groupSize\r\n      sgsize,                        // secondaryGroupSize\r\n      fgsep,                         // fractionGroupSeparator\r\n      fgsize,                        // fractionGroupSize\r\n      tfmt = this.format || {},\r\n      cfmt = this.constructor.format || {};\r\n\r\n    if (dp != u) {\r\n      if (typeof dp == 'object') {\r\n        fmt = dp;\r\n        dp = u;\r\n      } else if (rm != u) {\r\n        if (typeof rm == 'object') {\r\n          fmt = rm;\r\n          rm = u;\r\n        } else if (typeof fmt != 'object') {\r\n          fmt = {};\r\n        }\r\n      } else {\r\n        fmt = {};\r\n      }\r\n    } else {\r\n      fmt = {};\r\n    }\r\n\r\n    arr = this.toFixed(dp, rm).split('.');\r\n    intp = arr[0];\r\n    fracp = arr[1];\r\n    intd = this.s < 0 ? intp.slice(1) : intp;\r\n    nd = intd.length;\r\n\r\n    dsep = fmt.decimalSeparator;\r\n    if (dsep == u) {\r\n      dsep = tfmt.decimalSeparator;\r\n      if (dsep == u) {\r\n        dsep = cfmt.decimalSeparator;\r\n        if (dsep == u) dsep = '.';\r\n      }\r\n    }\r\n\r\n    gsep = fmt.groupSeparator;\r\n    if (gsep == u) {\r\n      gsep = tfmt.groupSeparator;\r\n      if (gsep == u) gsep = cfmt.groupSeparator;\r\n    }\r\n\r\n    if (gsep) {\r\n      gsize = fmt.groupSize;\r\n      if (gsize == u) {\r\n        gsize = tfmt.groupSize;\r\n        if (gsize == u) {\r\n          gsize = cfmt.groupSize;\r\n          if (gsize == u) gsize = 0;\r\n        }\r\n      }\r\n\r\n      sgsize = fmt.secondaryGroupSize;\r\n      if (sgsize == u) {\r\n        sgsize = tfmt.secondaryGroupSize;\r\n        if (sgsize == u) {\r\n          sgsize = cfmt.secondaryGroupSize;\r\n          if (sgsize == u) sgsize = 0;\r\n        }\r\n      }\r\n\r\n      if (sgsize) {\r\n        g1 = +sgsize;\r\n        g2 = +gsize;\r\n        nd -= g2;\r\n      } else {\r\n        g1 = +gsize;\r\n        g2 = +sgsize;\r\n      }\r\n\r\n      if (g1 > 0 && nd > 0) {\r\n        i = nd % g1 || g1;\r\n        intp = intd.substr(0, i);\r\n        for (; i < nd; i += g1) intp += gsep + intd.substr(i, g1);\r\n        if (g2 > 0) intp += gsep + intd.slice(i);\r\n        if (this.s < 0) intp = '-' + intp;\r\n      }\r\n    }\r\n\r\n    if (fracp) {\r\n      fgsep = fmt.fractionGroupSeparator;\r\n      if (fgsep == u) {\r\n        fgsep = tfmt.fractionGroupSeparator;\r\n        if (fgsep == u) fgsep = cfmt.fractionGroupSeparator;\r\n      }\r\n\r\n      if (fgsep) {\r\n        fgsize = fmt.fractionGroupSize;\r\n        if (fgsize == u) {\r\n          fgsize = tfmt.fractionGroupSize;\r\n          if (fgsize == u) {\r\n            fgsize = cfmt.fractionGroupSize;\r\n            if (fgsize == u) fgsize = 0;\r\n          }\r\n        }\r\n\r\n        fgsize = +fgsize;\r\n\r\n        if (fgsize) {\r\n          fracp = fracp.replace(new RegExp('\\\\d{' + fgsize + '}\\\\B', 'g'), '$&' + fgsep);\r\n        }\r\n      }\r\n\r\n      return intp + dsep + fracp;\r\n    } else {\r\n\r\n      return intp;\r\n    }\r\n  };\r\n\r\n  Ctor.format = {\r\n    decimalSeparator: '.',\r\n    groupSeparator: ',',\r\n    groupSize: 3,\r\n    secondaryGroupSize: 0,\r\n    fractionGroupSeparator: '',\r\n    fractionGroupSize: 0\r\n  };\r\n\r\n  return Ctor;\r\n}\r\n\r\nif (typeof module !== 'undefined' && module.exports) module.exports = toFormat;\r\n", "/*! decimal.js-light v2.5.1 https://github.com/MikeMcl/decimal.js-light/LICENCE */\r\n;(function (globalScope) {\r\n  'use strict';\r\n\r\n\r\n  /*\r\n   *  decimal.js-light v2.5.1\r\n   *  An arbitrary-precision Decimal type for JavaScript.\r\n   *  https://github.com/MikeMcl/decimal.js-light\r\n   *  Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\r\n   *  MIT Expat Licence\r\n   */\r\n\r\n\r\n  // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\r\n\r\n\r\n    // The limit on the value of `precision`, and on the value of the first argument to\r\n    // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n  var MAX_DIGITS = 1e9,                        // 0 to 1e9\r\n\r\n\r\n    // The initial configuration properties of the Decimal constructor.\r\n    Decimal = {\r\n\r\n      // These values must be integers within the stated ranges (inclusive).\r\n      // Most of these values can be changed during run-time using `Decimal.config`.\r\n\r\n      // The maximum number of significant digits of the result of a calculation or base conversion.\r\n      // E.g. `Decimal.config({ precision: 20 });`\r\n      precision: 20,                         // 1 to MAX_DIGITS\r\n\r\n      // The rounding mode used by default by `toInteger`, `toDecimalPlaces`, `toExponential`,\r\n      // `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n      //\r\n      // ROUND_UP         0 Away from zero.\r\n      // ROUND_DOWN       1 Towards zero.\r\n      // ROUND_CEIL       2 Towards +Infinity.\r\n      // ROUND_FLOOR      3 Towards -Infinity.\r\n      // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      //\r\n      // E.g.\r\n      // `Decimal.rounding = 4;`\r\n      // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\r\n      rounding: 4,                           // 0 to 8\r\n\r\n      // The exponent value at and beneath which `toString` returns exponential notation.\r\n      // JavaScript numbers: -7\r\n      toExpNeg: -7,                          // 0 to -MAX_E\r\n\r\n      // The exponent value at and above which `toString` returns exponential notation.\r\n      // JavaScript numbers: 21\r\n      toExpPos:  21,                         // 0 to MAX_E\r\n\r\n      // The natural logarithm of 10.\r\n      // 115 digits\r\n      LN10: '2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598298341967784042286'\r\n    },\r\n\r\n\r\n  // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\r\n\r\n\r\n    external = true,\r\n\r\n    decimalError = '[DecimalError] ',\r\n    invalidArgument = decimalError + 'Invalid argument: ',\r\n    exponentOutOfRange = decimalError + 'Exponent out of range: ',\r\n\r\n    mathfloor = Math.floor,\r\n    mathpow = Math.pow,\r\n\r\n    isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n\r\n    ONE,\r\n    BASE = 1e7,\r\n    LOG_BASE = 7,\r\n    MAX_SAFE_INTEGER = 9007199254740991,\r\n    MAX_E = mathfloor(MAX_SAFE_INTEGER / LOG_BASE),    // 1286742750677284\r\n\r\n    // Decimal.prototype object\r\n    P = {};\r\n\r\n\r\n  // Decimal prototype methods\r\n\r\n\r\n  /*\r\n   *  absoluteValue                       abs\r\n   *  comparedTo                          cmp\r\n   *  decimalPlaces                       dp\r\n   *  dividedBy                           div\r\n   *  dividedToIntegerBy                  idiv\r\n   *  equals                              eq\r\n   *  exponent\r\n   *  greaterThan                         gt\r\n   *  greaterThanOrEqualTo                gte\r\n   *  isInteger                           isint\r\n   *  isNegative                          isneg\r\n   *  isPositive                          ispos\r\n   *  isZero\r\n   *  lessThan                            lt\r\n   *  lessThanOrEqualTo                   lte\r\n   *  logarithm                           log\r\n   *  minus                               sub\r\n   *  modulo                              mod\r\n   *  naturalExponential                  exp\r\n   *  naturalLogarithm                    ln\r\n   *  negated                             neg\r\n   *  plus                                add\r\n   *  precision                           sd\r\n   *  squareRoot                          sqrt\r\n   *  times                               mul\r\n   *  toDecimalPlaces                     todp\r\n   *  toExponential\r\n   *  toFixed\r\n   *  toInteger                           toint\r\n   *  toNumber\r\n   *  toPower                             pow\r\n   *  toPrecision\r\n   *  toSignificantDigits                 tosd\r\n   *  toString\r\n   *  valueOf                             val\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the absolute value of this Decimal.\r\n   *\r\n   */\r\n  P.absoluteValue = P.abs = function () {\r\n    var x = new this.constructor(this);\r\n    if (x.s) x.s = 1;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1    if the value of this Decimal is greater than the value of `y`,\r\n   *  -1    if the value of this Decimal is less than the value of `y`,\r\n   *   0    if they have the same value\r\n   *\r\n   */\r\n  P.comparedTo = P.cmp = function (y) {\r\n    var i, j, xdL, ydL,\r\n      x = this;\r\n\r\n    y = new x.constructor(y);\r\n\r\n    // Signs differ?\r\n    if (x.s !== y.s) return x.s || -y.s;\r\n\r\n    // Compare exponents.\r\n    if (x.e !== y.e) return x.e > y.e ^ x.s < 0 ? 1 : -1;\r\n\r\n    xdL = x.d.length;\r\n    ydL = y.d.length;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\r\n      if (x.d[i] !== y.d[i]) return x.d[i] > y.d[i] ^ x.s < 0 ? 1 : -1;\r\n    }\r\n\r\n    // Compare lengths.\r\n    return xdL === ydL ? 0 : xdL > ydL ^ x.s < 0 ? 1 : -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the number of decimal places of the value of this Decimal.\r\n   *\r\n   */\r\n  P.decimalPlaces = P.dp = function () {\r\n    var x = this,\r\n      w = x.d.length - 1,\r\n      dp = (w - x.e) * LOG_BASE;\r\n\r\n    // Subtract the number of trailing zeros of the last word.\r\n    w = x.d[w];\r\n    if (w) for (; w % 10 == 0; w /= 10) dp--;\r\n\r\n    return dp < 0 ? 0 : dp;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal divided by `y`, truncated to\r\n   * `precision` significant digits.\r\n   *\r\n   */\r\n  P.dividedBy = P.div = function (y) {\r\n    return divide(this, new this.constructor(y));\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n   * by the value of `y`, truncated to `precision` significant digits.\r\n   *\r\n   */\r\n  P.dividedToIntegerBy = P.idiv = function (y) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n    return round(divide(x, new Ctor(y), 0, 1), Ctor.precision);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.equals = P.eq = function (y) {\r\n    return !this.cmp(y);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the (base 10) exponent value of this Decimal (this.e is the base 10000000 exponent).\r\n   *\r\n   */\r\n  P.exponent = function () {\r\n    return getBase10Exponent(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n   * false.\r\n   *\r\n   */\r\n  P.greaterThan = P.gt = function (y) {\r\n    return this.cmp(y) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n   * otherwise return false.\r\n   *\r\n   */\r\n  P.greaterThanOrEqualTo = P.gte = function (y) {\r\n    return this.cmp(y) >= 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is an integer, otherwise return false.\r\n   *\r\n   */\r\n  P.isInteger = P.isint = function () {\r\n    return this.e > this.d.length - 2;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is negative, otherwise return false.\r\n   *\r\n   */\r\n  P.isNegative = P.isneg = function () {\r\n    return this.s < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is positive, otherwise return false.\r\n   *\r\n   */\r\n  P.isPositive = P.ispos = function () {\r\n    return this.s > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is 0, otherwise return false.\r\n   *\r\n   */\r\n  P.isZero = function () {\r\n    return this.s === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.lessThan = P.lt = function (y) {\r\n    return this.cmp(y) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.lessThanOrEqualTo = P.lte = function (y) {\r\n    return this.cmp(y) < 1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the logarithm of the value of this Decimal to the specified base, truncated to\r\n   * `precision` significant digits.\r\n   *\r\n   * If no base is specified, return log[10](x).\r\n   *\r\n   * log[base](x) = ln(x) / ln(base)\r\n   *\r\n   * The maximum error of the result is 1 ulp (unit in the last place).\r\n   *\r\n   * [base] {number|string|Decimal} The base of the logarithm.\r\n   *\r\n   */\r\n  P.logarithm = P.log = function (base) {\r\n    var r,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision,\r\n      wpr = pr + 5;\r\n\r\n    // Default base is 10.\r\n    if (base === void 0) {\r\n      base = new Ctor(10);\r\n    } else {\r\n      base = new Ctor(base);\r\n\r\n      // log[-b](x) = NaN\r\n      // log[0](x)  = NaN\r\n      // log[1](x)  = NaN\r\n      if (base.s < 1 || base.eq(ONE)) throw Error(decimalError + 'NaN');\r\n    }\r\n\r\n    // log[b](-x) = NaN\r\n    // log[b](0) = -Infinity\r\n    if (x.s < 1) throw Error(decimalError + (x.s ? 'NaN' : '-Infinity'));\r\n\r\n    // log[b](1) = 0\r\n    if (x.eq(ONE)) return new Ctor(0);\r\n\r\n    external = false;\r\n    r = divide(ln(x, wpr), ln(base, wpr), wpr);\r\n    external = true;\r\n\r\n    return round(r, pr);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal minus `y`, truncated to\r\n   * `precision` significant digits.\r\n   *\r\n   */\r\n  P.minus = P.sub = function (y) {\r\n    var x = this;\r\n    y = new x.constructor(y);\r\n    return x.s == y.s ? subtract(x, y) : add(x, (y.s = -y.s, y));\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal modulo `y`, truncated to\r\n   * `precision` significant digits.\r\n   *\r\n   */\r\n  P.modulo = P.mod = function (y) {\r\n    var q,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // x % 0 = NaN\r\n    if (!y.s) throw Error(decimalError + 'NaN');\r\n\r\n    // Return x if x is 0.\r\n    if (!x.s) return round(new Ctor(x), pr);\r\n\r\n    // Prevent rounding of intermediate calculations.\r\n    external = false;\r\n    q = divide(x, y, 0, 1).times(y);\r\n    external = true;\r\n\r\n    return x.minus(q);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n   * i.e. the base e raised to the power the value of this Decimal, truncated to `precision`\r\n   * significant digits.\r\n   *\r\n   */\r\n  P.naturalExponential = P.exp = function () {\r\n    return exp(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n   * truncated to `precision` significant digits.\r\n   *\r\n   */\r\n  P.naturalLogarithm = P.ln = function () {\r\n    return ln(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n   * -1.\r\n   *\r\n   */\r\n  P.negated = P.neg = function () {\r\n    var x = new this.constructor(this);\r\n    x.s = -x.s || 0;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal plus `y`, truncated to\r\n   * `precision` significant digits.\r\n   *\r\n   */\r\n  P.plus = P.add = function (y) {\r\n    var x = this;\r\n    y = new x.constructor(y);\r\n    return x.s == y.s ? add(x, y) : subtract(x, (y.s = -y.s, y));\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the number of significant digits of the value of this Decimal.\r\n   *\r\n   * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n   *\r\n   */\r\n  P.precision = P.sd = function (z) {\r\n    var e, sd, w,\r\n      x = this;\r\n\r\n    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\r\n\r\n    e = getBase10Exponent(x) + 1;\r\n    w = x.d.length - 1;\r\n    sd = w * LOG_BASE + 1;\r\n    w = x.d[w];\r\n\r\n    // If non-zero...\r\n    if (w) {\r\n\r\n      // Subtract the number of trailing zeros of the last word.\r\n      for (; w % 10 == 0; w /= 10) sd--;\r\n\r\n      // Add the number of digits of the first word.\r\n      for (w = x.d[0]; w >= 10; w /= 10) sd++;\r\n    }\r\n\r\n    return z && e > sd ? e : sd;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of this Decimal, truncated to `precision`\r\n   * significant digits.\r\n   *\r\n   */\r\n  P.squareRoot = P.sqrt = function () {\r\n    var e, n, pr, r, s, t, wpr,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    // Negative or zero?\r\n    if (x.s < 1) {\r\n      if (!x.s) return new Ctor(0);\r\n\r\n      // sqrt(-x) = NaN\r\n      throw Error(decimalError + 'NaN');\r\n    }\r\n\r\n    e = getBase10Exponent(x);\r\n    external = false;\r\n\r\n    // Initial estimate.\r\n    s = Math.sqrt(+x);\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n    if (s == 0 || s == 1 / 0) {\r\n      n = digitsToString(x.d);\r\n      if ((n.length + e) % 2 == 0) n += '0';\r\n      s = Math.sqrt(n);\r\n      e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new Ctor(n);\r\n    } else {\r\n      r = new Ctor(s.toString());\r\n    }\r\n\r\n    pr = Ctor.precision;\r\n    s = wpr = pr + 3;\r\n\r\n    // Newton-Raphson iteration.\r\n    for (;;) {\r\n      t = r;\r\n      r = t.plus(divide(x, t, wpr + 2)).times(0.5);\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === (n = digitsToString(r.d)).slice(0, wpr)) {\r\n        n = n.slice(wpr - 3, wpr + 1);\r\n\r\n        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\r\n        // 4999, i.e. approaching a rounding boundary, continue the iteration.\r\n        if (s == wpr && n == '4999') {\r\n\r\n          // On the first iteration only, check to see if rounding up gives the exact result as the\r\n          // nines may infinitely repeat.\r\n          round(t, pr + 1, 0);\r\n\r\n          if (t.times(t).eq(x)) {\r\n            r = t;\r\n            break;\r\n          }\r\n        } else if (n != '9999') {\r\n          break;\r\n        }\r\n\r\n        wpr += 4;\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return round(r, pr);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal times `y`, truncated to\r\n   * `precision` significant digits.\r\n   *\r\n   */\r\n  P.times = P.mul = function (y) {\r\n    var carry, e, i, k, r, rL, t, xdL, ydL,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      xd = x.d,\r\n      yd = (y = new Ctor(y)).d;\r\n\r\n    // Return 0 if either is 0.\r\n    if (!x.s || !y.s) return new Ctor(0);\r\n\r\n    y.s *= x.s;\r\n    e = x.e + y.e;\r\n    xdL = xd.length;\r\n    ydL = yd.length;\r\n\r\n    // Ensure xd points to the longer array.\r\n    if (xdL < ydL) {\r\n      r = xd;\r\n      xd = yd;\r\n      yd = r;\r\n      rL = xdL;\r\n      xdL = ydL;\r\n      ydL = rL;\r\n    }\r\n\r\n    // Initialise the result array with zeros.\r\n    r = [];\r\n    rL = xdL + ydL;\r\n    for (i = rL; i--;) r.push(0);\r\n\r\n    // Multiply!\r\n    for (i = ydL; --i >= 0;) {\r\n      carry = 0;\r\n      for (k = xdL + i; k > i;) {\r\n        t = r[k] + yd[i] * xd[k - i - 1] + carry;\r\n        r[k--] = t % BASE | 0;\r\n        carry = t / BASE | 0;\r\n      }\r\n\r\n      r[k] = (r[k] + carry) % BASE | 0;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; !r[--rL];) r.pop();\r\n\r\n    if (carry) ++e;\r\n    else r.shift();\r\n\r\n    y.d = r;\r\n    y.e = e;\r\n\r\n    return external ? round(y, Ctor.precision) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n   * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n   *\r\n   * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toDecimalPlaces = P.todp = function (dp, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    x = new Ctor(x);\r\n    if (dp === void 0) return x;\r\n\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    return round(x, dp + getBase10Exponent(x) + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in exponential notation rounded to\r\n   * `dp` fixed decimal places using rounding mode `rounding`.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    var str,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (dp === void 0) {\r\n      str = toString(x, true);\r\n    } else {\r\n      checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      x = round(new Ctor(x), dp + 1, rm);\r\n      str = toString(x, true, dp + 1);\r\n    }\r\n\r\n    return str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n   * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n   * omitted.\r\n   *\r\n   * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n   * (-0).toFixed(3) is '0.000'.\r\n   * (-0.5).toFixed(0) is '-0'.\r\n   *\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    var str, y,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (dp === void 0) return toString(x);\r\n\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    y = round(new Ctor(x), dp + getBase10Exponent(x) + 1, rm);\r\n    str = toString(y.abs(), false, dp + getBase10Exponent(y) + 1);\r\n\r\n    // To determine whether to add the minus sign look at the value before it was rounded,\r\n    // i.e. look at `x` rather than `y`.\r\n    return x.isneg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n   * rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.toInteger = P.toint = function () {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n    return round(new Ctor(x), getBase10Exponent(x) + 1, Ctor.rounding);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this Decimal converted to a number primitive.\r\n   *\r\n   */\r\n  P.toNumber = function () {\r\n    return +this;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal raised to the power `y`,\r\n   * truncated to `precision` significant digits.\r\n   *\r\n   * For non-integer or very large exponents pow(x, y) is calculated using\r\n   *\r\n   *   x^y = exp(y*ln(x))\r\n   *\r\n   * The maximum error is 1 ulp (unit in last place).\r\n   *\r\n   * y {number|string|Decimal} The power to which to raise this Decimal.\r\n   *\r\n   */\r\n  P.toPower = P.pow = function (y) {\r\n    var e, k, pr, r, sign, yIsInt,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      guard = 12,\r\n      yn = +(y = new Ctor(y));\r\n\r\n    // pow(x, 0) = 1\r\n    if (!y.s) return new Ctor(ONE);\r\n\r\n    x = new Ctor(x);\r\n\r\n    // pow(0, y > 0) = 0\r\n    // pow(0, y < 0) = Infinity\r\n    if (!x.s) {\r\n      if (y.s < 1) throw Error(decimalError + 'Infinity');\r\n      return x;\r\n    }\r\n\r\n    // pow(1, y) = 1\r\n    if (x.eq(ONE)) return x;\r\n\r\n    pr = Ctor.precision;\r\n\r\n    // pow(x, 1) = x\r\n    if (y.eq(ONE)) return round(x, pr);\r\n\r\n    e = y.e;\r\n    k = y.d.length - 1;\r\n    yIsInt = e >= k;\r\n    sign = x.s;\r\n\r\n    if (!yIsInt) {\r\n\r\n      // pow(x < 0, y non-integer) = NaN\r\n      if (sign < 0) throw Error(decimalError + 'NaN');\r\n\r\n    // If y is a small integer use the 'exponentiation by squaring' algorithm.\r\n    } else if ((k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\r\n      r = new Ctor(ONE);\r\n\r\n      // Max k of 9007199254740991 takes 53 loop iterations.\r\n      // Maximum digits array length; leaves [28, 34] guard digits.\r\n      e = Math.ceil(pr / LOG_BASE + 4);\r\n\r\n      external = false;\r\n\r\n      for (;;) {\r\n        if (k % 2) {\r\n          r = r.times(x);\r\n          truncate(r.d, e);\r\n        }\r\n\r\n        k = mathfloor(k / 2);\r\n        if (k === 0) break;\r\n\r\n        x = x.times(x);\r\n        truncate(x.d, e);\r\n      }\r\n\r\n      external = true;\r\n\r\n      return y.s < 0 ? new Ctor(ONE).div(r) : round(r, pr);\r\n    }\r\n\r\n    // Result is negative if x is negative and the last digit of integer y is odd.\r\n    sign = sign < 0 && y.d[Math.max(e, k)] & 1 ? -1 : 1;\r\n\r\n    x.s = 1;\r\n    external = false;\r\n    r = y.times(ln(x, pr + guard));\r\n    external = true;\r\n    r = exp(r);\r\n    r.s = sign;\r\n\r\n    return r;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n   * the integer part of the value in normal notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    var e, str,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (sd === void 0) {\r\n      e = getBase10Exponent(x);\r\n      str = toString(x, e <= Ctor.toExpNeg || e >= Ctor.toExpPos);\r\n    } else {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      x = round(new Ctor(x), sd, rm);\r\n      e = getBase10Exponent(x);\r\n      str = toString(x, sd <= e || e <= Ctor.toExpNeg, sd);\r\n    }\r\n\r\n    return str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n   * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n   * omitted.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toSignificantDigits = P.tosd = function (sd, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (sd === void 0) {\r\n      sd = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n    }\r\n\r\n    return round(new Ctor(x), sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal.\r\n   *\r\n   * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n   * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n   *\r\n   */\r\n  P.toString = P.valueOf = P.val = P.toJSON = function () {\r\n    var x = this,\r\n      e = getBase10Exponent(x),\r\n      Ctor = x.constructor;\r\n\r\n    return toString(x, e <= Ctor.toExpNeg || e >= Ctor.toExpPos);\r\n  };\r\n\r\n\r\n  // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\r\n\r\n\r\n  /*\r\n   *  add                 P.minus, P.plus\r\n   *  checkInt32          P.todp, P.toExponential, P.toFixed, P.toPrecision, P.tosd\r\n   *  digitsToString      P.log, P.sqrt, P.pow, toString, exp, ln\r\n   *  divide              P.div, P.idiv, P.log, P.mod, P.sqrt, exp, ln\r\n   *  exp                 P.exp, P.pow\r\n   *  getBase10Exponent   P.exponent, P.sd, P.toint, P.sqrt, P.todp, P.toFixed, P.toPrecision,\r\n   *                      P.toString, divide, round, toString, exp, ln\r\n   *  getLn10             P.log, ln\r\n   *  getZeroString       digitsToString, toString\r\n   *  ln                  P.log, P.ln, P.pow, exp\r\n   *  parseDecimal        Decimal\r\n   *  round               P.abs, P.idiv, P.log, P.minus, P.mod, P.neg, P.plus, P.toint, P.sqrt,\r\n   *                      P.times, P.todp, P.toExponential, P.toFixed, P.pow, P.toPrecision, P.tosd,\r\n   *                      divide, getLn10, exp, ln\r\n   *  subtract            P.minus, P.plus\r\n   *  toString            P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf\r\n   *  truncate            P.pow\r\n   *\r\n   *  Throws:             P.log, P.mod, P.sd, P.sqrt, P.pow,  checkInt32, divide, round,\r\n   *                      getLn10, exp, ln, parseDecimal, Decimal, config\r\n   */\r\n\r\n\r\n  function add(x, y) {\r\n    var carry, d, e, i, k, len, xd, yd,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision;\r\n\r\n    // If either is zero...\r\n    if (!x.s || !y.s) {\r\n\r\n      // Return x if y is zero.\r\n      // Return y if y is non-zero.\r\n      if (!y.s) y = new Ctor(x);\r\n      return external ? round(y, pr) : y;\r\n    }\r\n\r\n    xd = x.d;\r\n    yd = y.d;\r\n\r\n    // x and y are finite, non-zero numbers with the same sign.\r\n\r\n    k = x.e;\r\n    e = y.e;\r\n    xd = xd.slice();\r\n    i = k - e;\r\n\r\n    // If base 1e7 exponents differ...\r\n    if (i) {\r\n      if (i < 0) {\r\n        d = xd;\r\n        i = -i;\r\n        len = yd.length;\r\n      } else {\r\n        d = yd;\r\n        e = k;\r\n        len = xd.length;\r\n      }\r\n\r\n      // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\r\n      k = Math.ceil(pr / LOG_BASE);\r\n      len = k > len ? k + 1 : len + 1;\r\n\r\n      if (i > len) {\r\n        i = len;\r\n        d.length = 1;\r\n      }\r\n\r\n      // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\r\n      d.reverse();\r\n      for (; i--;) d.push(0);\r\n      d.reverse();\r\n    }\r\n\r\n    len = xd.length;\r\n    i = yd.length;\r\n\r\n    // If yd is longer than xd, swap xd and yd so xd points to the longer array.\r\n    if (len - i < 0) {\r\n      i = len;\r\n      d = yd;\r\n      yd = xd;\r\n      xd = d;\r\n    }\r\n\r\n    // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\r\n    for (carry = 0; i;) {\r\n      carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\r\n      xd[i] %= BASE;\r\n    }\r\n\r\n    if (carry) {\r\n      xd.unshift(carry);\r\n      ++e;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n    for (len = xd.length; xd[--len] == 0;) xd.pop();\r\n\r\n    y.d = xd;\r\n    y.e = e;\r\n\r\n    return external ? round(y, pr) : y;\r\n  }\r\n\r\n\r\n  function checkInt32(i, min, max) {\r\n    if (i !== ~~i || i < min || i > max) {\r\n      throw Error(invalidArgument + i);\r\n    }\r\n  }\r\n\r\n\r\n  function digitsToString(d) {\r\n    var i, k, ws,\r\n      indexOfLastWord = d.length - 1,\r\n      str = '',\r\n      w = d[0];\r\n\r\n    if (indexOfLastWord > 0) {\r\n      str += w;\r\n      for (i = 1; i < indexOfLastWord; i++) {\r\n        ws = d[i] + '';\r\n        k = LOG_BASE - ws.length;\r\n        if (k) str += getZeroString(k);\r\n        str += ws;\r\n      }\r\n\r\n      w = d[i];\r\n      ws = w + '';\r\n      k = LOG_BASE - ws.length;\r\n      if (k) str += getZeroString(k);\r\n    } else if (w === 0) {\r\n      return '0';\r\n    }\r\n\r\n    // Remove trailing zeros of last w.\r\n    for (; w % 10 === 0;) w /= 10;\r\n\r\n    return str + w;\r\n  }\r\n\r\n\r\n  var divide = (function () {\r\n\r\n    // Assumes non-zero x and k, and hence non-zero result.\r\n    function multiplyInteger(x, k) {\r\n      var temp,\r\n        carry = 0,\r\n        i = x.length;\r\n\r\n      for (x = x.slice(); i--;) {\r\n        temp = x[i] * k + carry;\r\n        x[i] = temp % BASE | 0;\r\n        carry = temp / BASE | 0;\r\n      }\r\n\r\n      if (carry) x.unshift(carry);\r\n\r\n      return x;\r\n    }\r\n\r\n    function compare(a, b, aL, bL) {\r\n      var i, r;\r\n\r\n      if (aL != bL) {\r\n        r = aL > bL ? 1 : -1;\r\n      } else {\r\n        for (i = r = 0; i < aL; i++) {\r\n          if (a[i] != b[i]) {\r\n            r = a[i] > b[i] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return r;\r\n    }\r\n\r\n    function subtract(a, b, aL) {\r\n      var i = 0;\r\n\r\n      // Subtract b from a.\r\n      for (; aL--;) {\r\n        a[aL] -= i;\r\n        i = a[aL] < b[aL] ? 1 : 0;\r\n        a[aL] = i * BASE + a[aL] - b[aL];\r\n      }\r\n\r\n      // Remove leading zeros.\r\n      for (; !a[0] && a.length > 1;) a.shift();\r\n    }\r\n\r\n    return function (x, y, pr, dp) {\r\n      var cmp, e, i, k, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0, yL, yz,\r\n        Ctor = x.constructor,\r\n        sign = x.s == y.s ? 1 : -1,\r\n        xd = x.d,\r\n        yd = y.d;\r\n\r\n      // Either 0?\r\n      if (!x.s) return new Ctor(x);\r\n      if (!y.s) throw Error(decimalError + 'Division by zero');\r\n\r\n      e = x.e - y.e;\r\n      yL = yd.length;\r\n      xL = xd.length;\r\n      q = new Ctor(sign);\r\n      qd = q.d = [];\r\n\r\n      // Result exponent may be one less than e.\r\n      for (i = 0; yd[i] == (xd[i] || 0); ) ++i;\r\n      if (yd[i] > (xd[i] || 0)) --e;\r\n\r\n      if (pr == null) {\r\n        sd = pr = Ctor.precision;\r\n      } else if (dp) {\r\n        sd = pr + (getBase10Exponent(x) - getBase10Exponent(y)) + 1;\r\n      } else {\r\n        sd = pr;\r\n      }\r\n\r\n      if (sd < 0) return new Ctor(0);\r\n\r\n      // Convert precision in number of base 10 digits to base 1e7 digits.\r\n      sd = sd / LOG_BASE + 2 | 0;\r\n      i = 0;\r\n\r\n      // divisor < 1e7\r\n      if (yL == 1) {\r\n        k = 0;\r\n        yd = yd[0];\r\n        sd++;\r\n\r\n        // k is the carry.\r\n        for (; (i < xL || k) && sd--; i++) {\r\n          t = k * BASE + (xd[i] || 0);\r\n          qd[i] = t / yd | 0;\r\n          k = t % yd | 0;\r\n        }\r\n\r\n      // divisor >= 1e7\r\n      } else {\r\n\r\n        // Normalise xd and yd so highest order digit of yd is >= BASE/2\r\n        k = BASE / (yd[0] + 1) | 0;\r\n\r\n        if (k > 1) {\r\n          yd = multiplyInteger(yd, k);\r\n          xd = multiplyInteger(xd, k);\r\n          yL = yd.length;\r\n          xL = xd.length;\r\n        }\r\n\r\n        xi = yL;\r\n        rem = xd.slice(0, yL);\r\n        remL = rem.length;\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL < yL;) rem[remL++] = 0;\r\n\r\n        yz = yd.slice();\r\n        yz.unshift(0);\r\n        yd0 = yd[0];\r\n\r\n        if (yd[1] >= BASE / 2) ++yd0;\r\n\r\n        do {\r\n          k = 0;\r\n\r\n          // Compare divisor and remainder.\r\n          cmp = compare(yd, rem, yL, remL);\r\n\r\n          // If divisor < remainder.\r\n          if (cmp < 0) {\r\n\r\n            // Calculate trial digit, k.\r\n            rem0 = rem[0];\r\n            if (yL != remL) rem0 = rem0 * BASE + (rem[1] || 0);\r\n\r\n            // k will be how many times the divisor goes into the current remainder.\r\n            k = rem0 / yd0 | 0;\r\n\r\n            //  Algorithm:\r\n            //  1. product = divisor * trial digit (k)\r\n            //  2. if product > remainder: product -= divisor, k--\r\n            //  3. remainder -= product\r\n            //  4. if product was < remainder at 2:\r\n            //    5. compare new remainder and divisor\r\n            //    6. If remainder > divisor: remainder -= divisor, k++\r\n\r\n            if (k > 1) {\r\n              if (k >= BASE) k = BASE - 1;\r\n\r\n              // product = divisor * trial digit.\r\n              prod = multiplyInteger(yd, k);\r\n              prodL = prod.length;\r\n              remL = rem.length;\r\n\r\n              // Compare product and remainder.\r\n              cmp = compare(prod, rem, prodL, remL);\r\n\r\n              // product > remainder.\r\n              if (cmp == 1) {\r\n                k--;\r\n\r\n                // Subtract divisor from product.\r\n                subtract(prod, yL < prodL ? yz : yd, prodL);\r\n              }\r\n            } else {\r\n\r\n              // cmp is -1.\r\n              // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\r\n              // to avoid it. If k is 1 there is a need to compare yd and rem again below.\r\n              if (k == 0) cmp = k = 1;\r\n              prod = yd.slice();\r\n            }\r\n\r\n            prodL = prod.length;\r\n            if (prodL < remL) prod.unshift(0);\r\n\r\n            // Subtract product from remainder.\r\n            subtract(rem, prod, remL);\r\n\r\n            // If product was < previous remainder.\r\n            if (cmp == -1) {\r\n              remL = rem.length;\r\n\r\n              // Compare divisor and new remainder.\r\n              cmp = compare(yd, rem, yL, remL);\r\n\r\n              // If divisor < new remainder, subtract divisor from remainder.\r\n              if (cmp < 1) {\r\n                k++;\r\n\r\n                // Subtract divisor from remainder.\r\n                subtract(rem, yL < remL ? yz : yd, remL);\r\n              }\r\n            }\r\n\r\n            remL = rem.length;\r\n          } else if (cmp === 0) {\r\n            k++;\r\n            rem = [0];\r\n          }    // if cmp === 1, k will be 0\r\n\r\n          // Add the next digit, k, to the result array.\r\n          qd[i++] = k;\r\n\r\n          // Update the remainder.\r\n          if (cmp && rem[0]) {\r\n            rem[remL++] = xd[xi] || 0;\r\n          } else {\r\n            rem = [xd[xi]];\r\n            remL = 1;\r\n          }\r\n\r\n        } while ((xi++ < xL || rem[0] !== void 0) && sd--);\r\n      }\r\n\r\n      // Leading zero?\r\n      if (!qd[0]) qd.shift();\r\n\r\n      q.e = e;\r\n\r\n      return round(q, dp ? pr + getBase10Exponent(q) + 1 : pr);\r\n    };\r\n  })();\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of `x` truncated to `sd`\r\n   * significant digits.\r\n   *\r\n   * Taylor/Maclaurin series.\r\n   *\r\n   * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n   *\r\n   * Argument reduction:\r\n   *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n   *   exp(x) = exp(x / 2^k)^(2^k)\r\n   *\r\n   * Previously, the argument was initially reduced by\r\n   * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n   * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n   * found to be slower than just dividing repeatedly by 32 as above.\r\n   *\r\n   * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n   *\r\n   *  exp(x) is non-terminating for any finite, non-zero x.\r\n   *\r\n   */\r\n  function exp(x, sd) {\r\n    var denominator, guard, pow, sum, t, wpr,\r\n      i = 0,\r\n      k = 0,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision;\r\n\r\n    if (getBase10Exponent(x) > 16) throw Error(exponentOutOfRange + getBase10Exponent(x));\r\n\r\n    // exp(0) = 1\r\n    if (!x.s) return new Ctor(ONE);\r\n\r\n    if (sd == null) {\r\n      external = false;\r\n      wpr = pr;\r\n    } else {\r\n      wpr = sd;\r\n    }\r\n\r\n    t = new Ctor(0.03125);\r\n\r\n    while (x.abs().gte(0.1)) {\r\n      x = x.times(t);    // x = x / 2^5\r\n      k += 5;\r\n    }\r\n\r\n    // Estimate the precision increase necessary to ensure the first 4 rounding digits are correct.\r\n    guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\r\n    wpr += guard;\r\n    denominator = pow = sum = new Ctor(ONE);\r\n    Ctor.precision = wpr;\r\n\r\n    for (;;) {\r\n      pow = round(pow.times(x), wpr);\r\n      denominator = denominator.times(++i);\r\n      t = sum.plus(divide(pow, denominator, wpr));\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n        while (k--) sum = round(sum.times(sum), wpr);\r\n        Ctor.precision = pr;\r\n        return sd == null ? (external = true, round(sum, pr)) : sum;\r\n      }\r\n\r\n      sum = t;\r\n    }\r\n  }\r\n\r\n\r\n  // Calculate the base 10 exponent from the base 1e7 exponent.\r\n  function getBase10Exponent(x) {\r\n    var e = x.e * LOG_BASE,\r\n      w = x.d[0];\r\n\r\n    // Add the number of digits of the first word of the digits array.\r\n    for (; w >= 10; w /= 10) e++;\r\n    return e;\r\n  }\r\n\r\n\r\n  function getLn10(Ctor, sd, pr) {\r\n\r\n    if (sd > Ctor.LN10.sd()) {\r\n\r\n\r\n      // Reset global state in case the exception is caught.\r\n      external = true;\r\n      if (pr) Ctor.precision = pr;\r\n      throw Error(decimalError + 'LN10 precision limit exceeded');\r\n    }\r\n\r\n    return round(new Ctor(Ctor.LN10), sd);\r\n  }\r\n\r\n\r\n  function getZeroString(k) {\r\n    var zs = '';\r\n    for (; k--;) zs += '0';\r\n    return zs;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of `x` truncated to `sd` significant\r\n   * digits.\r\n   *\r\n   *  ln(n) is non-terminating (n != 1)\r\n   *\r\n   */\r\n  function ln(y, sd) {\r\n    var c, c0, denominator, e, numerator, sum, t, wpr, x2,\r\n      n = 1,\r\n      guard = 10,\r\n      x = y,\r\n      xd = x.d,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision;\r\n\r\n    // ln(-x) = NaN\r\n    // ln(0) = -Infinity\r\n    if (x.s < 1) throw Error(decimalError + (x.s ? 'NaN' : '-Infinity'));\r\n\r\n    // ln(1) = 0\r\n    if (x.eq(ONE)) return new Ctor(0);\r\n\r\n    if (sd == null) {\r\n      external = false;\r\n      wpr = pr;\r\n    } else {\r\n      wpr = sd;\r\n    }\r\n\r\n    if (x.eq(10)) {\r\n      if (sd == null) external = true;\r\n      return getLn10(Ctor, wpr);\r\n    }\r\n\r\n    wpr += guard;\r\n    Ctor.precision = wpr;\r\n    c = digitsToString(xd);\r\n    c0 = c.charAt(0);\r\n    e = getBase10Exponent(x);\r\n\r\n    if (Math.abs(e) < 1.5e15) {\r\n\r\n      // Argument reduction.\r\n      // The series converges faster the closer the argument is to 1, so using\r\n      // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\r\n      // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\r\n      // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\r\n      // later be divided by this number, then separate out the power of 10 using\r\n      // ln(a*10^b) = ln(a) + b*ln(10).\r\n\r\n      // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\r\n      //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\r\n      // max n is 6 (gives 0.7 - 1.3)\r\n      while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\r\n        x = x.times(y);\r\n        c = digitsToString(x.d);\r\n        c0 = c.charAt(0);\r\n        n++;\r\n      }\r\n\r\n      e = getBase10Exponent(x);\r\n\r\n      if (c0 > 1) {\r\n        x = new Ctor('0.' + c);\r\n        e++;\r\n      } else {\r\n        x = new Ctor(c0 + '.' + c.slice(1));\r\n      }\r\n    } else {\r\n\r\n      // The argument reduction method above may result in overflow if the argument y is a massive\r\n      // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\r\n      // function using ln(x*10^e) = ln(x) + e*ln(10).\r\n      t = getLn10(Ctor, wpr + 2, pr).times(e + '');\r\n      x = ln(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\r\n\r\n      Ctor.precision = pr;\r\n      return sd == null ? (external = true, round(x, pr)) : x;\r\n    }\r\n\r\n    // x is reduced to a value near 1.\r\n\r\n    // Taylor series.\r\n    // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\r\n    // where x = (y - 1)/(y + 1)    (|x| < 1)\r\n    sum = numerator = x = divide(x.minus(ONE), x.plus(ONE), wpr);\r\n    x2 = round(x.times(x), wpr);\r\n    denominator = 3;\r\n\r\n    for (;;) {\r\n      numerator = round(numerator.times(x2), wpr);\r\n      t = sum.plus(divide(numerator, new Ctor(denominator), wpr));\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n        sum = sum.times(2);\r\n\r\n        // Reverse the argument reduction.\r\n        if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\r\n        sum = divide(sum, new Ctor(n), wpr);\r\n\r\n        Ctor.precision = pr;\r\n        return sd == null ? (external = true, round(sum, pr)) : sum;\r\n      }\r\n\r\n      sum = t;\r\n      denominator += 2;\r\n    }\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the value of a new Decimal `x` from string `str`.\r\n   */\r\n  function parseDecimal(x, str) {\r\n    var e, i, len;\r\n\r\n    // Decimal point?\r\n    if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n    // Exponential form?\r\n    if ((i = str.search(/e/i)) > 0) {\r\n\r\n      // Determine exponent.\r\n      if (e < 0) e = i;\r\n      e += +str.slice(i + 1);\r\n      str = str.substring(0, i);\r\n    } else if (e < 0) {\r\n\r\n      // Integer.\r\n      e = str.length;\r\n    }\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; str.charCodeAt(i) === 48;) ++i;\r\n\r\n    // Determine trailing zeros.\r\n    for (len = str.length; str.charCodeAt(len - 1) === 48;) --len;\r\n    str = str.slice(i, len);\r\n\r\n    if (str) {\r\n      len -= i;\r\n      e = e - i - 1;\r\n      x.e = mathfloor(e / LOG_BASE);\r\n      x.d = [];\r\n\r\n      // Transform base\r\n\r\n      // e is the base 10 exponent.\r\n      // i is where to slice str to get the first word of the digits array.\r\n      i = (e + 1) % LOG_BASE;\r\n      if (e < 0) i += LOG_BASE;\r\n\r\n      if (i < len) {\r\n        if (i) x.d.push(+str.slice(0, i));\r\n        for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\r\n        str = str.slice(i);\r\n        i = LOG_BASE - str.length;\r\n      } else {\r\n        i -= len;\r\n      }\r\n\r\n      for (; i--;) str += '0';\r\n      x.d.push(+str);\r\n\r\n      if (external && (x.e > MAX_E || x.e < -MAX_E)) throw Error(exponentOutOfRange + e);\r\n    } else {\r\n\r\n      // Zero.\r\n      x.s = 0;\r\n      x.e = 0;\r\n      x.d = [0];\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Round `x` to `sd` significant digits, using rounding mode `rm` if present (truncate otherwise).\r\n   */\r\n   function round(x, sd, rm) {\r\n    var i, j, k, n, rd, doRound, w, xdi,\r\n      xd = x.d;\r\n\r\n    // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n    // w: the word of xd which contains the rounding digit, a base 1e7 number.\r\n    // xdi: the index of w within xd.\r\n    // n: the number of digits of w.\r\n    // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\r\n    // they had leading zeros)\r\n    // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\r\n\r\n    // Get the length of the first word of the digits array xd.\r\n    for (n = 1, k = xd[0]; k >= 10; k /= 10) n++;\r\n    i = sd - n;\r\n\r\n    // Is the rounding digit in the first word of xd?\r\n    if (i < 0) {\r\n      i += LOG_BASE;\r\n      j = sd;\r\n      w = xd[xdi = 0];\r\n    } else {\r\n      xdi = Math.ceil((i + 1) / LOG_BASE);\r\n      k = xd.length;\r\n      if (xdi >= k) return x;\r\n      w = k = xd[xdi];\r\n\r\n      // Get the number of digits of w.\r\n      for (n = 1; k >= 10; k /= 10) n++;\r\n\r\n      // Get the index of rd within w.\r\n      i %= LOG_BASE;\r\n\r\n      // Get the index of rd within w, adjusted for leading zeros.\r\n      // The number of leading zeros of w is given by LOG_BASE - n.\r\n      j = i - LOG_BASE + n;\r\n    }\r\n\r\n    if (rm !== void 0) {\r\n      k = mathpow(10, n - j - 1);\r\n\r\n      // Get the rounding digit at index j of w.\r\n      rd = w / k % 10 | 0;\r\n\r\n      // Are there any non-zero digits after the rounding digit?\r\n      doRound = sd < 0 || xd[xdi + 1] !== void 0 || w % k;\r\n\r\n      // The expression `w % mathpow(10, n - j - 1)` returns all the digits of w to the right of the\r\n      // digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression will give\r\n      // 714.\r\n\r\n      doRound = rm < 4\r\n        ? (rd || doRound) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n        : rd > 5 || rd == 5 && (rm == 4 || doRound || rm == 6 &&\r\n\r\n          // Check whether the digit to the left of the rounding digit is odd.\r\n          ((i > 0 ? j > 0 ? w / mathpow(10, n - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\r\n            rm == (x.s < 0 ? 8 : 7));\r\n    }\r\n\r\n    if (sd < 1 || !xd[0]) {\r\n      if (doRound) {\r\n        k = getBase10Exponent(x);\r\n        xd.length = 1;\r\n\r\n        // Convert sd to decimal places.\r\n        sd = sd - k - 1;\r\n\r\n        // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n        xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\r\n        x.e = mathfloor(-sd / LOG_BASE) || 0;\r\n      } else {\r\n        xd.length = 1;\r\n\r\n        // Zero.\r\n        xd[0] = x.e = x.s = 0;\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n    // Remove excess digits.\r\n    if (i == 0) {\r\n      xd.length = xdi;\r\n      k = 1;\r\n      xdi--;\r\n    } else {\r\n      xd.length = xdi + 1;\r\n      k = mathpow(10, LOG_BASE - i);\r\n\r\n      // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n      // j > 0 means i > number of leading zeros of w.\r\n      xd[xdi] = j > 0 ? (w / mathpow(10, n - j) % mathpow(10, j) | 0) * k : 0;\r\n    }\r\n\r\n    if (doRound) {\r\n      for (;;) {\r\n\r\n        // Is the digit to be rounded up in the first word of xd?\r\n        if (xdi == 0) {\r\n          if ((xd[0] += k) == BASE) {\r\n            xd[0] = 1;\r\n            ++x.e;\r\n          }\r\n\r\n          break;\r\n        } else {\r\n          xd[xdi] += k;\r\n          if (xd[xdi] != BASE) break;\r\n          xd[xdi--] = 0;\r\n          k = 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (i = xd.length; xd[--i] === 0;) xd.pop();\r\n\r\n    if (external && (x.e > MAX_E || x.e < -MAX_E)) {\r\n      throw Error(exponentOutOfRange + getBase10Exponent(x));\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  function subtract(x, y) {\r\n    var d, e, i, j, k, len, xd, xe, xLTy, yd,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision;\r\n\r\n    // Return y negated if x is zero.\r\n    // Return x if y is zero and x is non-zero.\r\n    if (!x.s || !y.s) {\r\n      if (y.s) y.s = -y.s;\r\n      else y = new Ctor(x);\r\n      return external ? round(y, pr) : y;\r\n    }\r\n\r\n    xd = x.d;\r\n    yd = y.d;\r\n\r\n    // x and y are non-zero numbers with the same sign.\r\n\r\n    e = y.e;\r\n    xe = x.e;\r\n    xd = xd.slice();\r\n    k = xe - e;\r\n\r\n    // If exponents differ...\r\n    if (k) {\r\n      xLTy = k < 0;\r\n\r\n      if (xLTy) {\r\n        d = xd;\r\n        k = -k;\r\n        len = yd.length;\r\n      } else {\r\n        d = yd;\r\n        e = xe;\r\n        len = xd.length;\r\n      }\r\n\r\n      // Numbers with massively different exponents would result in a very high number of zeros\r\n      // needing to be prepended, but this can be avoided while still ensuring correct rounding by\r\n      // limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\r\n      i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\r\n\r\n      if (k > i) {\r\n        k = i;\r\n        d.length = 1;\r\n      }\r\n\r\n      // Prepend zeros to equalise exponents.\r\n      d.reverse();\r\n      for (i = k; i--;) d.push(0);\r\n      d.reverse();\r\n\r\n    // Base 1e7 exponents equal.\r\n    } else {\r\n\r\n      // Check digits to determine which is the bigger number.\r\n\r\n      i = xd.length;\r\n      len = yd.length;\r\n      xLTy = i < len;\r\n      if (xLTy) len = i;\r\n\r\n      for (i = 0; i < len; i++) {\r\n        if (xd[i] != yd[i]) {\r\n          xLTy = xd[i] < yd[i];\r\n          break;\r\n        }\r\n      }\r\n\r\n      k = 0;\r\n    }\r\n\r\n    if (xLTy) {\r\n      d = xd;\r\n      xd = yd;\r\n      yd = d;\r\n      y.s = -y.s;\r\n    }\r\n\r\n    len = xd.length;\r\n\r\n    // Append zeros to xd if shorter.\r\n    // Don't add zeros to yd if shorter as subtraction only needs to start at yd length.\r\n    for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\r\n\r\n    // Subtract yd from xd.\r\n    for (i = yd.length; i > k;) {\r\n      if (xd[--i] < yd[i]) {\r\n        for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\r\n        --xd[j];\r\n        xd[i] += BASE;\r\n      }\r\n\r\n      xd[i] -= yd[i];\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; xd[--len] === 0;) xd.pop();\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xd[0] === 0; xd.shift()) --e;\r\n\r\n    // Zero?\r\n    if (!xd[0]) return new Ctor(0);\r\n\r\n    y.d = xd;\r\n    y.e = e;\r\n\r\n    //return external && xd.length >= pr / LOG_BASE ? round(y, pr) : y;\r\n    return external ? round(y, pr) : y;\r\n  }\r\n\r\n\r\n  function toString(x, isExp, sd) {\r\n    var k,\r\n      e = getBase10Exponent(x),\r\n      str = digitsToString(x.d),\r\n      len = str.length;\r\n\r\n    if (isExp) {\r\n      if (sd && (k = sd - len) > 0) {\r\n        str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\r\n      } else if (len > 1) {\r\n        str = str.charAt(0) + '.' + str.slice(1);\r\n      }\r\n\r\n      str = str + (e < 0 ? 'e' : 'e+') + e;\r\n    } else if (e < 0) {\r\n      str = '0.' + getZeroString(-e - 1) + str;\r\n      if (sd && (k = sd - len) > 0) str += getZeroString(k);\r\n    } else if (e >= len) {\r\n      str += getZeroString(e + 1 - len);\r\n      if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\r\n    } else {\r\n      if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\r\n      if (sd && (k = sd - len) > 0) {\r\n        if (e + 1 === len) str += '.';\r\n        str += getZeroString(k);\r\n      }\r\n    }\r\n\r\n    return x.s < 0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // Does not strip trailing zeros.\r\n  function truncate(arr, len) {\r\n    if (arr.length > len) {\r\n      arr.length = len;\r\n      return true;\r\n    }\r\n  }\r\n\r\n\r\n  // Decimal methods\r\n\r\n\r\n  /*\r\n   *  clone\r\n   *  config/set\r\n   */\r\n\r\n\r\n  /*\r\n   * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n   * constructor.\r\n   *\r\n   */\r\n  function clone(obj) {\r\n    var i, p, ps;\r\n\r\n    /*\r\n     * The Decimal constructor and exported function.\r\n     * Return a new Decimal instance.\r\n     *\r\n     * value {number|string|Decimal} A numeric value.\r\n     *\r\n     */\r\n    function Decimal(value) {\r\n      var x = this;\r\n\r\n      // Decimal called without new.\r\n      if (!(x instanceof Decimal)) return new Decimal(value);\r\n\r\n      // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\r\n      // which points to Object.\r\n      x.constructor = Decimal;\r\n\r\n      // Duplicate.\r\n      if (value instanceof Decimal) {\r\n        x.s = value.s;\r\n        x.e = value.e;\r\n        x.d = (value = value.d) ? value.slice() : value;\r\n        return;\r\n      }\r\n\r\n      if (typeof value === 'number') {\r\n\r\n        // Reject Infinity/NaN.\r\n        if (value * 0 !== 0) {\r\n          throw Error(invalidArgument + value);\r\n        }\r\n\r\n        if (value > 0) {\r\n          x.s = 1;\r\n        } else if (value < 0) {\r\n          value = -value;\r\n          x.s = -1;\r\n        } else {\r\n          x.s = 0;\r\n          x.e = 0;\r\n          x.d = [0];\r\n          return;\r\n        }\r\n\r\n        // Fast path for small integers.\r\n        if (value === ~~value && value < 1e7) {\r\n          x.e = 0;\r\n          x.d = [value];\r\n          return;\r\n        }\r\n\r\n        return parseDecimal(x, value.toString());\r\n      } else if (typeof value !== 'string') {\r\n        throw Error(invalidArgument + value);\r\n      }\r\n\r\n      // Minus sign?\r\n      if (value.charCodeAt(0) === 45) {\r\n        value = value.slice(1);\r\n        x.s = -1;\r\n      } else {\r\n        x.s = 1;\r\n      }\r\n\r\n      if (isDecimal.test(value)) parseDecimal(x, value);\r\n      else throw Error(invalidArgument + value);\r\n    }\r\n\r\n    Decimal.prototype = P;\r\n\r\n    Decimal.ROUND_UP = 0;\r\n    Decimal.ROUND_DOWN = 1;\r\n    Decimal.ROUND_CEIL = 2;\r\n    Decimal.ROUND_FLOOR = 3;\r\n    Decimal.ROUND_HALF_UP = 4;\r\n    Decimal.ROUND_HALF_DOWN = 5;\r\n    Decimal.ROUND_HALF_EVEN = 6;\r\n    Decimal.ROUND_HALF_CEIL = 7;\r\n    Decimal.ROUND_HALF_FLOOR = 8;\r\n\r\n    Decimal.clone = clone;\r\n    Decimal.config = Decimal.set = config;\r\n\r\n    if (obj === void 0) obj = {};\r\n    if (obj) {\r\n      ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'LN10'];\r\n      for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\r\n    }\r\n\r\n    Decimal.config(obj);\r\n\r\n    return Decimal;\r\n  }\r\n\r\n\r\n  /*\r\n   * Configure global settings for a Decimal constructor.\r\n   *\r\n   * `obj` is an object with one or more of the following properties,\r\n   *\r\n   *   precision  {number}\r\n   *   rounding   {number}\r\n   *   toExpNeg   {number}\r\n   *   toExpPos   {number}\r\n   *\r\n   * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n   *\r\n   */\r\n  function config(obj) {\r\n    if (!obj || typeof obj !== 'object') {\r\n      throw Error(decimalError + 'Object expected');\r\n    }\r\n    var i, p, v,\r\n      ps = [\r\n        'precision', 1, MAX_DIGITS,\r\n        'rounding', 0, 8,\r\n        'toExpNeg', -1 / 0, 0,\r\n        'toExpPos', 0, 1 / 0\r\n      ];\r\n\r\n    for (i = 0; i < ps.length; i += 3) {\r\n      if ((v = obj[p = ps[i]]) !== void 0) {\r\n        if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\r\n        else throw Error(invalidArgument + p + ': ' + v);\r\n      }\r\n    }\r\n\r\n    if ((v = obj[p = 'LN10']) !== void 0) {\r\n        if (v == Math.LN10) this[p] = new this(v);\r\n        else throw Error(invalidArgument + p + ': ' + v);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n\r\n  // Create and configure initial Decimal constructor.\r\n  Decimal = clone(Decimal);\r\n\r\n  Decimal['default'] = Decimal.Decimal = Decimal;\r\n\r\n  // Internal constant.\r\n  ONE = new Decimal(1);\r\n\r\n\r\n  // Export.\r\n\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () {\r\n      return Decimal;\r\n    });\r\n\r\n  // Node and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = Decimal;\r\n\r\n    // Browser.\r\n  } else {\r\n    if (!globalScope) {\r\n      globalScope = typeof self != 'undefined' && self && self.self == self\r\n        ? self : Function('return this')();\r\n    }\r\n\r\n    globalScope.Decimal = Decimal;\r\n  }\r\n})(this);\r\n", "/*\r\n *  big.js v6.2.1\r\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\r\n *  Copyright (c) 2022 Michael Mclaughlin\r\n *  https://github.com/MikeMcl/big.js/LICENCE.md\r\n */\r\n;(function (GLOBAL) {\r\n  'use strict';\r\n  var Big,\r\n\r\n\r\n/************************************** EDITABLE DEFAULTS *****************************************/\r\n\r\n\r\n    // The default values below must be integers within the stated ranges.\r\n\r\n    /*\r\n     * The maximum number of decimal places (DP) of the results of operations involving division:\r\n     * div and sqrt, and pow with negative exponents.\r\n     */\r\n    DP = 20,            // 0 to MAX_DP\r\n\r\n    /*\r\n     * The rounding mode (RM) used when rounding to the above decimal places.\r\n     *\r\n     *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\r\n     *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\r\n     *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\r\n     *  3  Away from zero.                                  (ROUND_UP)\r\n     */\r\n    RM = 1,             // 0, 1, 2 or 3\r\n\r\n    // The maximum value of DP and Big.DP.\r\n    MAX_DP = 1E6,       // 0 to 1000000\r\n\r\n    // The maximum magnitude of the exponent argument to the pow method.\r\n    MAX_POWER = 1E6,    // 1 to 1000000\r\n\r\n    /*\r\n     * The negative exponent (NE) at and beneath which toString returns exponential notation.\r\n     * (JavaScript numbers: -7)\r\n     * -1000000 is the minimum recommended exponent value of a Big.\r\n     */\r\n    NE = -7,            // 0 to -1000000\r\n\r\n    /*\r\n     * The positive exponent (PE) at and above which toString returns exponential notation.\r\n     * (JavaScript numbers: 21)\r\n     * 1000000 is the maximum recommended exponent value of a Big, but this limit is not enforced.\r\n     */\r\n    PE = 21,            // 0 to 1000000\r\n\r\n    /*\r\n     * When true, an error will be thrown if a primitive number is passed to the Big constructor,\r\n     * or if valueOf is called, or if toNumber is called on a Big which cannot be converted to a\r\n     * primitive number without a loss of precision.\r\n     */\r\n    STRICT = false,     // true or false\r\n\r\n\r\n/**************************************************************************************************/\r\n\r\n\r\n    // Error messages.\r\n    NAME = '[big.js] ',\r\n    INVALID = NAME + 'Invalid ',\r\n    INVALID_DP = INVALID + 'decimal places',\r\n    INVALID_RM = INVALID + 'rounding mode',\r\n    DIV_BY_ZERO = NAME + 'Division by zero',\r\n\r\n    // The shared prototype object.\r\n    P = {},\r\n    UNDEFINED = void 0,\r\n    NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\r\n\r\n\r\n  /*\r\n   * Create and return a Big constructor.\r\n   */\r\n  function _Big_() {\r\n\r\n    /*\r\n     * The Big constructor and exported function.\r\n     * Create and return a new instance of a Big number object.\r\n     *\r\n     * n {number|string|Big} A numeric value.\r\n     */\r\n    function Big(n) {\r\n      var x = this;\r\n\r\n      // Enable constructor usage without new.\r\n      if (!(x instanceof Big)) return n === UNDEFINED ? _Big_() : new Big(n);\r\n\r\n      // Duplicate.\r\n      if (n instanceof Big) {\r\n        x.s = n.s;\r\n        x.e = n.e;\r\n        x.c = n.c.slice();\r\n      } else {\r\n        if (typeof n !== 'string') {\r\n          if (Big.strict === true && typeof n !== 'bigint') {\r\n            throw TypeError(INVALID + 'value');\r\n          }\r\n\r\n          // Minus zero?\r\n          n = n === 0 && 1 / n < 0 ? '-0' : String(n);\r\n        }\r\n\r\n        parse(x, n);\r\n      }\r\n\r\n      // Retain a reference to this Big constructor.\r\n      // Shadow Big.prototype.constructor which points to Object.\r\n      x.constructor = Big;\r\n    }\r\n\r\n    Big.prototype = P;\r\n    Big.DP = DP;\r\n    Big.RM = RM;\r\n    Big.NE = NE;\r\n    Big.PE = PE;\r\n    Big.strict = STRICT;\r\n    Big.roundDown = 0;\r\n    Big.roundHalfUp = 1;\r\n    Big.roundHalfEven = 2;\r\n    Big.roundUp = 3;\r\n\r\n    return Big;\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the number or string value passed to a Big constructor.\r\n   *\r\n   * x {Big} A Big number instance.\r\n   * n {number|string} A numeric value.\r\n   */\r\n  function parse(x, n) {\r\n    var e, i, nl;\r\n\r\n    if (!NUMERIC.test(n)) {\r\n      throw Error(INVALID + 'number');\r\n    }\r\n\r\n    // Determine sign.\r\n    x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;\r\n\r\n    // Decimal point?\r\n    if ((e = n.indexOf('.')) > -1) n = n.replace('.', '');\r\n\r\n    // Exponential form?\r\n    if ((i = n.search(/e/i)) > 0) {\r\n\r\n      // Determine exponent.\r\n      if (e < 0) e = i;\r\n      e += +n.slice(i + 1);\r\n      n = n.substring(0, i);\r\n    } else if (e < 0) {\r\n\r\n      // Integer.\r\n      e = n.length;\r\n    }\r\n\r\n    nl = n.length;\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; i < nl && n.charAt(i) == '0';) ++i;\r\n\r\n    if (i == nl) {\r\n\r\n      // Zero.\r\n      x.c = [x.e = 0];\r\n    } else {\r\n\r\n      // Determine trailing zeros.\r\n      for (; nl > 0 && n.charAt(--nl) == '0';);\r\n      x.e = e - i - 1;\r\n      x.c = [];\r\n\r\n      // Convert string to array of digits without leading/trailing zeros.\r\n      for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Round Big x to a maximum of sd significant digits using rounding mode rm.\r\n   *\r\n   * x {Big} The Big to round.\r\n   * sd {number} Significant digits: integer, 0 to MAX_DP inclusive.\r\n   * rm {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   * [more] {boolean} Whether the result of division was truncated.\r\n   */\r\n  function round(x, sd, rm, more) {\r\n    var xc = x.c;\r\n\r\n    if (rm === UNDEFINED) rm = x.constructor.RM;\r\n    if (rm !== 0 && rm !== 1 && rm !== 2 && rm !== 3) {\r\n      throw Error(INVALID_RM);\r\n    }\r\n\r\n    if (sd < 1) {\r\n      more =\r\n        rm === 3 && (more || !!xc[0]) || sd === 0 && (\r\n        rm === 1 && xc[0] >= 5 ||\r\n        rm === 2 && (xc[0] > 5 || xc[0] === 5 && (more || xc[1] !== UNDEFINED))\r\n      );\r\n\r\n      xc.length = 1;\r\n\r\n      if (more) {\r\n\r\n        // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n        x.e = x.e - sd + 1;\r\n        xc[0] = 1;\r\n      } else {\r\n\r\n        // Zero.\r\n        xc[0] = x.e = 0;\r\n      }\r\n    } else if (sd < xc.length) {\r\n\r\n      // xc[sd] is the digit after the digit that may be rounded up.\r\n      more =\r\n        rm === 1 && xc[sd] >= 5 ||\r\n        rm === 2 && (xc[sd] > 5 || xc[sd] === 5 &&\r\n          (more || xc[sd + 1] !== UNDEFINED || xc[sd - 1] & 1)) ||\r\n        rm === 3 && (more || !!xc[0]);\r\n\r\n      // Remove any digits after the required precision.\r\n      xc.length = sd;\r\n\r\n      // Round up?\r\n      if (more) {\r\n\r\n        // Rounding up may mean the previous digit has to be rounded up.\r\n        for (; ++xc[--sd] > 9;) {\r\n          xc[sd] = 0;\r\n          if (sd === 0) {\r\n            ++x.e;\r\n            xc.unshift(1);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Remove trailing zeros.\r\n      for (sd = xc.length; !xc[--sd];) xc.pop();\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of Big x in normal or exponential notation.\r\n   * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\r\n   */\r\n  function stringify(x, doExponential, isNonzero) {\r\n    var e = x.e,\r\n      s = x.c.join(''),\r\n      n = s.length;\r\n\r\n    // Exponential notation?\r\n    if (doExponential) {\r\n      s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;\r\n\r\n    // Normal notation.\r\n    } else if (e < 0) {\r\n      for (; ++e;) s = '0' + s;\r\n      s = '0.' + s;\r\n    } else if (e > 0) {\r\n      if (++e > n) {\r\n        for (e -= n; e--;) s += '0';\r\n      } else if (e < n) {\r\n        s = s.slice(0, e) + '.' + s.slice(e);\r\n      }\r\n    } else if (n > 1) {\r\n      s = s.charAt(0) + '.' + s.slice(1);\r\n    }\r\n\r\n    return x.s < 0 && isNonzero ? '-' + s : s;\r\n  }\r\n\r\n\r\n  // Prototype/instance methods\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the absolute value of this Big.\r\n   */\r\n  P.abs = function () {\r\n    var x = new this.constructor(this);\r\n    x.s = 1;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return 1 if the value of this Big is greater than the value of Big y,\r\n   *       -1 if the value of this Big is less than the value of Big y, or\r\n   *        0 if they have the same value.\r\n   */\r\n  P.cmp = function (y) {\r\n    var isneg,\r\n      x = this,\r\n      xc = x.c,\r\n      yc = (y = new x.constructor(y)).c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either zero?\r\n    if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    isneg = i < 0;\r\n\r\n    // Compare exponents.\r\n    if (k != l) return k > l ^ isneg ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = -1; ++i < j;) {\r\n      if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\r\n    }\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ isneg ? 1 : -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\r\n   * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n   */\r\n  P.div = function (y) {\r\n    var x = this,\r\n      Big = x.constructor,\r\n      a = x.c,                  // dividend\r\n      b = (y = new Big(y)).c,   // divisor\r\n      k = x.s == y.s ? 1 : -1,\r\n      dp = Big.DP;\r\n\r\n    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\r\n      throw Error(INVALID_DP);\r\n    }\r\n\r\n    // Divisor is zero?\r\n    if (!b[0]) {\r\n      throw Error(DIV_BY_ZERO);\r\n    }\r\n\r\n    // Dividend is 0? Return +-0.\r\n    if (!a[0]) {\r\n      y.s = k;\r\n      y.c = [y.e = 0];\r\n      return y;\r\n    }\r\n\r\n    var bl, bt, n, cmp, ri,\r\n      bz = b.slice(),\r\n      ai = bl = b.length,\r\n      al = a.length,\r\n      r = a.slice(0, bl),   // remainder\r\n      rl = r.length,\r\n      q = y,                // quotient\r\n      qc = q.c = [],\r\n      qi = 0,\r\n      p = dp + (q.e = x.e - y.e) + 1;    // precision of the result\r\n\r\n    q.s = k;\r\n    k = p < 0 ? 0 : p;\r\n\r\n    // Create version of divisor with leading zero.\r\n    bz.unshift(0);\r\n\r\n    // Add zeros to make remainder as long as divisor.\r\n    for (; rl++ < bl;) r.push(0);\r\n\r\n    do {\r\n\r\n      // n is how many times the divisor goes into current remainder.\r\n      for (n = 0; n < 10; n++) {\r\n\r\n        // Compare divisor and remainder.\r\n        if (bl != (rl = r.length)) {\r\n          cmp = bl > rl ? 1 : -1;\r\n        } else {\r\n          for (ri = -1, cmp = 0; ++ri < bl;) {\r\n            if (b[ri] != r[ri]) {\r\n              cmp = b[ri] > r[ri] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        // If divisor < remainder, subtract divisor from remainder.\r\n        if (cmp < 0) {\r\n\r\n          // Remainder can't be more than 1 digit longer than divisor.\r\n          // Equalise lengths using divisor with extra leading zero?\r\n          for (bt = rl == bl ? b : bz; rl;) {\r\n            if (r[--rl] < bt[rl]) {\r\n              ri = rl;\r\n              for (; ri && !r[--ri];) r[ri] = 9;\r\n              --r[ri];\r\n              r[rl] += 10;\r\n            }\r\n            r[rl] -= bt[rl];\r\n          }\r\n\r\n          for (; !r[0];) r.shift();\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n\r\n      // Add the digit n to the result array.\r\n      qc[qi++] = cmp ? n : ++n;\r\n\r\n      // Update the remainder.\r\n      if (r[0] && cmp) r[rl] = a[ai] || 0;\r\n      else r = [a[ai]];\r\n\r\n    } while ((ai++ < al || r[0] !== UNDEFINED) && k--);\r\n\r\n    // Leading zero? Do not remove if result is simply zero (qi == 1).\r\n    if (!qc[0] && qi != 1) {\r\n\r\n      // There can't be more than one zero.\r\n      qc.shift();\r\n      q.e--;\r\n      p--;\r\n    }\r\n\r\n    // Round?\r\n    if (qi > p) round(q, p, Big.RM, r[0] !== UNDEFINED);\r\n\r\n    return q;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\r\n   */\r\n  P.eq = function (y) {\r\n    return this.cmp(y) === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is greater than the value of Big y, otherwise return\r\n   * false.\r\n   */\r\n  P.gt = function (y) {\r\n    return this.cmp(y) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\r\n   * return false.\r\n   */\r\n  P.gte = function (y) {\r\n    return this.cmp(y) > -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is less than the value of Big y, otherwise return false.\r\n   */\r\n  P.lt = function (y) {\r\n    return this.cmp(y) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\r\n   * return false.\r\n   */\r\n  P.lte = function (y) {\r\n    return this.cmp(y) < 1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big minus the value of Big y.\r\n   */\r\n  P.minus = P.sub = function (y) {\r\n    var i, j, t, xlty,\r\n      x = this,\r\n      Big = x.constructor,\r\n      a = x.s,\r\n      b = (y = new Big(y)).s;\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.plus(y);\r\n    }\r\n\r\n    var xc = x.c.slice(),\r\n      xe = x.e,\r\n      yc = y.c,\r\n      ye = y.e;\r\n\r\n    // Either zero?\r\n    if (!xc[0] || !yc[0]) {\r\n      if (yc[0]) {\r\n        y.s = -b;\r\n      } else if (xc[0]) {\r\n        y = new Big(x);\r\n      } else {\r\n        y.s = 1;\r\n      }\r\n      return y;\r\n    }\r\n\r\n    // Determine which is the bigger number. Prepend zeros to equalise exponents.\r\n    if (a = xe - ye) {\r\n\r\n      if (xlty = a < 0) {\r\n        a = -a;\r\n        t = xc;\r\n      } else {\r\n        ye = xe;\r\n        t = yc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (b = a; b--;) t.push(0);\r\n      t.reverse();\r\n    } else {\r\n\r\n      // Exponents equal. Check digit by digit.\r\n      j = ((xlty = xc.length < yc.length) ? xc : yc).length;\r\n\r\n      for (a = b = 0; b < j; b++) {\r\n        if (xc[b] != yc[b]) {\r\n          xlty = xc[b] < yc[b];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // x < y? Point xc to the array of the bigger number.\r\n    if (xlty) {\r\n      t = xc;\r\n      xc = yc;\r\n      yc = t;\r\n      y.s = -y.s;\r\n    }\r\n\r\n    /*\r\n     * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\r\n     * needs to start at yc.length.\r\n     */\r\n    if ((b = (j = yc.length) - (i = xc.length)) > 0) for (; b--;) xc[i++] = 0;\r\n\r\n    // Subtract yc from xc.\r\n    for (b = i; j > a;) {\r\n      if (xc[--j] < yc[j]) {\r\n        for (i = j; i && !xc[--i];) xc[i] = 9;\r\n        --xc[i];\r\n        xc[j] += 10;\r\n      }\r\n\r\n      xc[j] -= yc[j];\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; xc[--b] === 0;) xc.pop();\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xc[0] === 0;) {\r\n      xc.shift();\r\n      --ye;\r\n    }\r\n\r\n    if (!xc[0]) {\r\n\r\n      // n - n = +0\r\n      y.s = 1;\r\n\r\n      // Result must be zero.\r\n      xc = [ye = 0];\r\n    }\r\n\r\n    y.c = xc;\r\n    y.e = ye;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big modulo the value of Big y.\r\n   */\r\n  P.mod = function (y) {\r\n    var ygtx,\r\n      x = this,\r\n      Big = x.constructor,\r\n      a = x.s,\r\n      b = (y = new Big(y)).s;\r\n\r\n    if (!y.c[0]) {\r\n      throw Error(DIV_BY_ZERO);\r\n    }\r\n\r\n    x.s = y.s = 1;\r\n    ygtx = y.cmp(x) == 1;\r\n    x.s = a;\r\n    y.s = b;\r\n\r\n    if (ygtx) return new Big(x);\r\n\r\n    a = Big.DP;\r\n    b = Big.RM;\r\n    Big.DP = Big.RM = 0;\r\n    x = x.div(y);\r\n    Big.DP = a;\r\n    Big.RM = b;\r\n\r\n    return this.minus(x.times(y));\r\n  };\r\n  \r\n  \r\n  /*\r\n   * Return a new Big whose value is the value of this Big negated.\r\n   */\r\n  P.neg = function () {\r\n    var x = new this.constructor(this);\r\n    x.s = -x.s;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big plus the value of Big y.\r\n   */\r\n  P.plus = P.add = function (y) {\r\n    var e, k, t,\r\n      x = this,\r\n      Big = x.constructor;\r\n\r\n    y = new Big(y);\r\n\r\n    // Signs differ?\r\n    if (x.s != y.s) {\r\n      y.s = -y.s;\r\n      return x.minus(y);\r\n    }\r\n\r\n    var xe = x.e,\r\n      xc = x.c,\r\n      ye = y.e,\r\n      yc = y.c;\r\n\r\n    // Either zero?\r\n    if (!xc[0] || !yc[0]) {\r\n      if (!yc[0]) {\r\n        if (xc[0]) {\r\n          y = new Big(x);\r\n        } else {\r\n          y.s = x.s;\r\n        }\r\n      }\r\n      return y;\r\n    }\r\n\r\n    xc = xc.slice();\r\n\r\n    // Prepend zeros to equalise exponents.\r\n    // Note: reverse faster than unshifts.\r\n    if (e = xe - ye) {\r\n      if (e > 0) {\r\n        ye = xe;\r\n        t = yc;\r\n      } else {\r\n        e = -e;\r\n        t = xc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (; e--;) t.push(0);\r\n      t.reverse();\r\n    }\r\n\r\n    // Point xc to the longer array.\r\n    if (xc.length - yc.length < 0) {\r\n      t = yc;\r\n      yc = xc;\r\n      xc = t;\r\n    }\r\n\r\n    e = yc.length;\r\n\r\n    // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\r\n    for (k = 0; e; xc[e] %= 10) k = (xc[--e] = xc[e] + yc[e] + k) / 10 | 0;\r\n\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n\r\n    if (k) {\r\n      xc.unshift(k);\r\n      ++ye;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (e = xc.length; xc[--e] === 0;) xc.pop();\r\n\r\n    y.c = xc;\r\n    y.e = ye;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a Big whose value is the value of this Big raised to the power n.\r\n   * If n is negative, round to a maximum of Big.DP decimal places using rounding\r\n   * mode Big.RM.\r\n   *\r\n   * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\r\n   */\r\n  P.pow = function (n) {\r\n    var x = this,\r\n      one = new x.constructor('1'),\r\n      y = one,\r\n      isneg = n < 0;\r\n\r\n    if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) {\r\n      throw Error(INVALID + 'exponent');\r\n    }\r\n\r\n    if (isneg) n = -n;\r\n\r\n    for (;;) {\r\n      if (n & 1) y = y.times(x);\r\n      n >>= 1;\r\n      if (!n) break;\r\n      x = x.times(x);\r\n    }\r\n\r\n    return isneg ? one.div(y) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big rounded to a maximum precision of sd\r\n   * significant digits using rounding mode rm, or Big.RM if rm is not specified.\r\n   *\r\n   * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.\r\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   */\r\n  P.prec = function (sd, rm) {\r\n    if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {\r\n      throw Error(INVALID + 'precision');\r\n    }\r\n    return round(new this.constructor(this), sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big rounded to a maximum of dp decimal places\r\n   * using rounding mode rm, or Big.RM if rm is not specified.\r\n   * If dp is negative, round to an integer which is a multiple of 10**-dp.\r\n   * If dp is not specified, round to 0 decimal places.\r\n   *\r\n   * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.\r\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   */\r\n  P.round = function (dp, rm) {\r\n    if (dp === UNDEFINED) dp = 0;\r\n    else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) {\r\n      throw Error(INVALID_DP);\r\n    }\r\n    return round(new this.constructor(this), dp + this.e + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the square root of the value of this Big, rounded, if\r\n   * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n   */\r\n  P.sqrt = function () {\r\n    var r, c, t,\r\n      x = this,\r\n      Big = x.constructor,\r\n      s = x.s,\r\n      e = x.e,\r\n      half = new Big('0.5');\r\n\r\n    // Zero?\r\n    if (!x.c[0]) return new Big(x);\r\n\r\n    // Negative?\r\n    if (s < 0) {\r\n      throw Error(NAME + 'No square root');\r\n    }\r\n\r\n    // Estimate.\r\n    s = Math.sqrt(x + '');\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.\r\n    if (s === 0 || s === 1 / 0) {\r\n      c = x.c.join('');\r\n      if (!(c.length + e & 1)) c += '0';\r\n      s = Math.sqrt(c);\r\n      e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\r\n      r = new Big((s == 1 / 0 ? '5e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);\r\n    } else {\r\n      r = new Big(s + '');\r\n    }\r\n\r\n    e = r.e + (Big.DP += 4);\r\n\r\n    // Newton-Raphson iteration.\r\n    do {\r\n      t = r;\r\n      r = half.times(t.plus(x.div(t)));\r\n    } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));\r\n\r\n    return round(r, (Big.DP -= 4) + r.e + 1, Big.RM);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big times the value of Big y.\r\n   */\r\n  P.times = P.mul = function (y) {\r\n    var c,\r\n      x = this,\r\n      Big = x.constructor,\r\n      xc = x.c,\r\n      yc = (y = new Big(y)).c,\r\n      a = xc.length,\r\n      b = yc.length,\r\n      i = x.e,\r\n      j = y.e;\r\n\r\n    // Determine sign of result.\r\n    y.s = x.s == y.s ? 1 : -1;\r\n\r\n    // Return signed 0 if either 0.\r\n    if (!xc[0] || !yc[0]) {\r\n      y.c = [y.e = 0];\r\n      return y;\r\n    }\r\n\r\n    // Initialise exponent of result as x.e + y.e.\r\n    y.e = i + j;\r\n\r\n    // If array xc has fewer digits than yc, swap xc and yc, and lengths.\r\n    if (a < b) {\r\n      c = xc;\r\n      xc = yc;\r\n      yc = c;\r\n      j = a;\r\n      a = b;\r\n      b = j;\r\n    }\r\n\r\n    // Initialise coefficient array of result with zeros.\r\n    for (c = new Array(j = a + b); j--;) c[j] = 0;\r\n\r\n    // Multiply.\r\n\r\n    // i is initially xc.length.\r\n    for (i = b; i--;) {\r\n      b = 0;\r\n\r\n      // a is yc.length.\r\n      for (j = a + i; j > i;) {\r\n\r\n        // Current sum of products at this digit position, plus carry.\r\n        b = c[j] + yc[i] * xc[j - i - 1] + b;\r\n        c[j--] = b % 10;\r\n\r\n        // carry\r\n        b = b / 10 | 0;\r\n      }\r\n\r\n      c[j] = b;\r\n    }\r\n\r\n    // Increment result exponent if there is a final carry, otherwise remove leading zero.\r\n    if (b) ++y.e;\r\n    else c.shift();\r\n\r\n    // Remove trailing zeros.\r\n    for (i = c.length; !c[--i];) c.pop();\r\n    y.c = c;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big in exponential notation rounded to dp fixed\r\n   * decimal places using rounding mode rm, or Big.RM if rm is not specified.\r\n   *\r\n   * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.\r\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    var x = this,\r\n      n = x.c[0];\r\n\r\n    if (dp !== UNDEFINED) {\r\n      if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\r\n        throw Error(INVALID_DP);\r\n      }\r\n      x = round(new x.constructor(x), ++dp, rm);\r\n      for (; x.c.length < dp;) x.c.push(0);\r\n    }\r\n\r\n    return stringify(x, true, !!n);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big in normal notation rounded to dp fixed\r\n   * decimal places using rounding mode rm, or Big.RM if rm is not specified.\r\n   *\r\n   * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.\r\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   *\r\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    var x = this,\r\n      n = x.c[0];\r\n\r\n    if (dp !== UNDEFINED) {\r\n      if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\r\n        throw Error(INVALID_DP);\r\n      }\r\n      x = round(new x.constructor(x), dp + x.e + 1, rm);\r\n\r\n      // x.e may have changed if the value is rounded up.\r\n      for (dp = dp + x.e + 1; x.c.length < dp;) x.c.push(0);\r\n    }\r\n\r\n    return stringify(x, false, !!n);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big.\r\n   * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n   * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n   * Omit the sign for negative zero.\r\n   */\r\n  P.toJSON = P.toString = function () {\r\n    var x = this,\r\n      Big = x.constructor;\r\n    return stringify(x, x.e <= Big.NE || x.e >= Big.PE, !!x.c[0]);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this Big as a primitve number.\r\n   */\r\n  P.toNumber = function () {\r\n    var n = Number(stringify(this, true, true));\r\n    if (this.constructor.strict === true && !this.eq(n.toString())) {\r\n      throw Error(NAME + 'Imprecise conversion');\r\n    }\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big rounded to sd significant digits using\r\n   * rounding mode rm, or Big.RM if rm is not specified.\r\n   * Use exponential notation if sd is less than the number of digits necessary to represent\r\n   * the integer part of the value in normal notation.\r\n   *\r\n   * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.\r\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    var x = this,\r\n      Big = x.constructor,\r\n      n = x.c[0];\r\n\r\n    if (sd !== UNDEFINED) {\r\n      if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {\r\n        throw Error(INVALID + 'precision');\r\n      }\r\n      x = round(new Big(x), sd, rm);\r\n      for (; x.c.length < sd;) x.c.push(0);\r\n    }\r\n\r\n    return stringify(x, sd <= x.e || x.e <= Big.NE || x.e >= Big.PE, !!n);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big.\r\n   * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n   * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n   * Include the sign for negative zero.\r\n   */\r\n  P.valueOf = function () {\r\n    var x = this,\r\n      Big = x.constructor;\r\n    if (Big.strict === true) {\r\n      throw Error(NAME + 'valueOf disallowed');\r\n    }\r\n    return stringify(x, x.e <= Big.NE || x.e >= Big.PE, true);\r\n  };\r\n\r\n\r\n  // Export\r\n\r\n\r\n  Big = _Big_();\r\n\r\n  Big['default'] = Big.Big = Big;\r\n\r\n  //AMD.\r\n  if (typeof define === 'function' && define.amd) {\r\n    define(function () { return Big; });\r\n\r\n  // Node and other CommonJS-like environments that support module.exports.\r\n  } else if (typeof module !== 'undefined' && module.exports) {\r\n    module.exports = Big;\r\n\r\n  //Browser.\r\n  } else {\r\n    GLOBAL.Big = Big;\r\n  }\r\n})(this);\r\n", "// see https://stackoverflow.com/a/41102306\r\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\r\n\r\n/**\r\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\r\n * obtained by sending any amount of input.\r\n */\r\nexport class InsufficientReservesError extends Error {\r\n  public readonly isInsufficientReservesError = true as const\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n\r\n/**\r\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\r\n * than the price of a single unit of output after fees.\r\n */\r\nexport class InsufficientInputAmountError extends Error {\r\n  public readonly isInsufficientInputAmountError = true as const\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n", "import JSBI from 'jsbi'\r\nimport { encodeShortString } from 'starknet/utils/shortString'\r\nimport { StarknetChainId } from 'starknet/constants'\r\n\r\n// exports for external consumption\r\nexport type BigintIsh = JSBI | bigint | string\r\n\r\nexport { StarknetChainId as ChainId } from 'starknet/constants'\r\n\r\nexport enum TradeType {\r\n  EXACT_INPUT,\r\n  EXACT_OUTPUT\r\n}\r\n\r\nexport enum Rounding {\r\n  ROUND_DOWN,\r\n  ROUND_HALF_UP,\r\n  ROUND_UP\r\n}\r\n\r\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\r\n\r\n// exports for internal consumption\r\nexport const ZERO = JSBI.BigInt(0)\r\nexport const ONE = JSBI.BigInt(1)\r\nexport const TWO = JSBI.BigInt(2)\r\nexport const THREE = JSBI.BigInt(3)\r\nexport const FIVE = JSBI.BigInt(5)\r\nexport const TEN = JSBI.BigInt(10)\r\nexport const _100 = JSBI.BigInt(100)\r\nexport const FEES_NUMERATOR = JSBI.BigInt(9970)\r\nexport const FEES_DENOMINATOR = JSBI.BigInt(10000)\r\n\r\nexport enum SolidityType {\r\n  uint8 = 'uint8',\r\n  uint256 = 'uint256'\r\n}\r\n\r\nexport const SOLIDITY_TYPE_MAXIMA = {\r\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\r\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\r\n}\r\n\r\nexport const PAIR_CONTRACT_CLASS_HASH = '0x231adde42526bad434ca2eb983efdd64472638702f87f97e6e3c084f264e06f'\r\n\r\nexport const FACTORY_ADDRESSES: {\r\n  [chainId in StarknetChainId]: string\r\n} = {\r\n  [StarknetChainId.MAINNET]: '0x00d018832f3b2b082f7ebaa3eae2a5323708a7bb7598db620c0dba0e985e9a53',\r\n  [StarknetChainId.TESTNET]: '0x021b9f5ea693def6bcf563f088008bd0db0b8ed80763dd7a0fbea112742578ab'\r\n}\r\n\r\nexport const CONTRACT_ADDRESS_PREFIX = encodeShortString('STARKNET_CONTRACT_ADDRESS')\r\n", "import invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport { toBN } from 'starknet/utils/number'\r\nimport { computeHashOnElements, pedersen } from 'starknet/dist/utils/hash'\r\nimport { validateAndParseAddress as getAddress } from 'starknet/utils/address'\r\n\r\nimport {\r\n  BigintIsh,\r\n  ZERO,\r\n  ONE,\r\n  TWO,\r\n  THREE,\r\n  SolidityType,\r\n  SOLIDITY_TYPE_MAXIMA,\r\n  FACTORY_ADDRESSES,\r\n  PAIR_CONTRACT_CLASS_HASH,\r\n  CONTRACT_ADDRESS_PREFIX\r\n} from './constants'\r\nimport { Token } from '.'\r\n\r\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\r\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\r\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\r\n}\r\n\r\n// warns if addresses are not checksummed\r\nexport function validateAndParseAddress(address: string): string {\r\n  try {\r\n    const checksummedAddress = getAddress(address)\r\n    // warning(address === checksummedAddress, `${address} is not checksummed.`)\r\n    return checksummedAddress\r\n  } catch (error) {\r\n    invariant(false, `${address} is not a valid address.`)\r\n  }\r\n}\r\n\r\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\r\n  return bigintIsh instanceof JSBI ? bigintIsh : typeof bigintIsh === 'bigint' ? JSBI.BigInt(bigintIsh.toString()) : JSBI.BigInt(bigintIsh)\r\n}\r\n\r\n// mock the on-chain sqrt function\r\nexport function sqrt(y: JSBI): JSBI {\r\n  validateSolidityTypeInstance(y, SolidityType.uint256)\r\n  let z: JSBI = ZERO\r\n  let x: JSBI\r\n  if (JSBI.greaterThan(y, THREE)) {\r\n    z = y\r\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\r\n    while (JSBI.lessThan(x, z)) {\r\n      z = x\r\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\r\n    }\r\n  } else if (JSBI.notEqual(y, ZERO)) {\r\n    z = ONE\r\n  }\r\n  return z\r\n}\r\n\r\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\r\n// `maxSize` by removing the last item\r\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\r\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\r\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\r\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\r\n\r\n  // short circuit first item add\r\n  if (items.length === 0) {\r\n    items.push(add)\r\n    return null\r\n  } else {\r\n    const isFull = items.length === maxSize\r\n    // short circuit if full and the additional item does not come before the last item\r\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\r\n      return add\r\n    }\r\n\r\n    let lo = 0,\r\n      hi = items.length\r\n\r\n    while (lo < hi) {\r\n      const mid = (lo + hi) >>> 1\r\n      if (comparator(items[mid], add) <= 0) {\r\n        lo = mid + 1\r\n      } else {\r\n        hi = mid\r\n      }\r\n    }\r\n    items.splice(lo, 0, add)\r\n    return isFull ? items.pop() ?? null : null\r\n  }\r\n}\r\n\r\nexport function getPairAddress(tokenA: Token, tokenB: Token) {\r\n  const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checksr\r\n  const salt = pedersen([tokens[0].address, tokens[1].address])\r\n  const constructorCalldataHash = computeHashOnElements([])\r\n\r\n  return computeHashOnElements([CONTRACT_ADDRESS_PREFIX, FACTORY_ADDRESSES[tokenA.chainId], salt, PAIR_CONTRACT_CLASS_HASH, constructorCalldataHash])\r\n}\r\n\r\nexport function isEqualAddress(addressA: string, addressB: string): boolean {\r\n  return toBN(addressA).eq(toBN(addressB))\r\n}\r\n\r\nexport function sortsBefore(addressA: string, addressB: string): boolean {\r\n  return toBN(addressA).lt(toBN(addressB))\r\n}\r\n", "import invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport { ChainId, SolidityType } from '../constants'\r\nimport { isEqualAddress, sortsBefore, validateAndParseAddress, validateSolidityTypeInstance } from '../utils'\r\n\r\n/**\r\n * Represents an ERC20 token with a unique address and some metadata.\r\n */\r\nexport class Token {\r\n  public readonly decimals: number\r\n  public readonly symbol?: string\r\n  public readonly name?: string\r\n  public readonly chainId: ChainId\r\n  public readonly address: string\r\n\r\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\r\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\r\n\r\n    this.decimals = decimals\r\n    this.symbol = symbol\r\n    this.name = name\r\n    this.chainId = chainId\r\n    this.address = validateAndParseAddress(address)\r\n  }\r\n\r\n  /**\r\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\r\n   * @param other other token to compare\r\n   */\r\n  public equals(other: Token): boolean {\r\n    // short circuit on reference equality\r\n    if (this === other) {\r\n      return true\r\n    }\r\n    return this.chainId === other.chainId && isEqualAddress(this.address, other.address)\r\n  }\r\n\r\n  /**\r\n   * Returns true if the address of this token sorts before the address of the other token\r\n   * @param other other token to compare\r\n   * @throws if the tokens have the same address\r\n   * @throws if the tokens are on different chains\r\n   */\r\n  public sortsBefore(other: Token): boolean {\r\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\r\n    invariant(this.address !== other.address, 'ADDRESSES')\r\n\r\n    return sortsBefore(this.address, other.address)\r\n  }\r\n}\r\n\r\n/**\r\n * Compares two currencies for equality\r\n */\r\nexport function currencyEquals(currencyA: Token, currencyB: Token): boolean {\r\n  if (currencyA instanceof Token && currencyB instanceof Token) {\r\n    return currencyA.equals(currencyB)\r\n  } else if (currencyA instanceof Token) {\r\n    return false\r\n  } else if (currencyB instanceof Token) {\r\n    return false\r\n  } else {\r\n    return currencyA === currencyB\r\n  }\r\n}\r\n", "import invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport _Decimal from 'decimal.js-light'\r\nimport _Big from 'big.js'\r\nimport toFormat from 'toformat'\r\n\r\nimport { BigintIsh, Rounding } from '../../constants'\r\nimport { ONE } from '../../constants'\r\nimport { parseBigintIsh } from '../../utils'\r\n\r\nconst Decimal = toFormat(_Decimal)\r\nconst Big = toFormat(_Big)\r\n\r\nconst toSignificantRounding = {\r\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\r\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\r\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\r\n}\r\n\r\nconst toFixedRounding = {\r\n  [Rounding.ROUND_DOWN]: 0,\r\n  [Rounding.ROUND_HALF_UP]: 1,\r\n  [Rounding.ROUND_UP]: 3\r\n}\r\n\r\nexport class Fraction {\r\n  public readonly numerator: JSBI\r\n  public readonly denominator: JSBI\r\n\r\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\r\n    this.numerator = parseBigintIsh(numerator)\r\n    this.denominator = parseBigintIsh(denominator)\r\n  }\r\n\r\n  // performs floor division\r\n  public get quotient(): JSBI {\r\n    return JSBI.divide(this.numerator, this.denominator)\r\n  }\r\n\r\n  // remainder after floor division\r\n  public get remainder(): Fraction {\r\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\r\n  }\r\n\r\n  public invert(): Fraction {\r\n    return new Fraction(this.denominator, this.numerator)\r\n  }\r\n\r\n  public add(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.add(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator)),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public subtract(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.subtract(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator)),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public lessThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return JSBI.lessThan(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator))\r\n  }\r\n\r\n  public equalTo(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return JSBI.equal(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator))\r\n  }\r\n\r\n  public greaterThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return JSBI.greaterThan(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator))\r\n  }\r\n\r\n  public multiply(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return new Fraction(JSBI.multiply(this.numerator, otherParsed.numerator), JSBI.multiply(this.denominator, otherParsed.denominator))\r\n  }\r\n\r\n  public divide(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return new Fraction(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(this.denominator, otherParsed.numerator))\r\n  }\r\n\r\n  public toSignificant(significantDigits: number, format: object = { groupSeparator: '' }, rounding: Rounding = Rounding.ROUND_HALF_UP): string {\r\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\r\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\r\n\r\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\r\n    const quotient = new Decimal(this.numerator.toString()).div(this.denominator.toString()).toSignificantDigits(significantDigits)\r\n    return quotient.toFormat(quotient.decimalPlaces(), format)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number, format: object = { groupSeparator: '' }, rounding: Rounding = Rounding.ROUND_HALF_UP): string {\r\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\r\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\r\n\r\n    Big.DP = decimalPlaces\r\n    Big.RM = toFixedRounding[rounding]\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\r\n  }\r\n}\r\n", "import { Token } from '../token'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport toFormat from 'toformat'\r\n\r\nimport { BigintIsh, Rounding, SolidityType, TEN } from '../../constants'\r\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\r\nimport { Fraction } from './fraction'\r\nimport _Big from 'big.js'\r\n\r\nconst Big = toFormat(_Big)\r\nexport class TokenAmount extends Fraction {\r\n  public readonly token: Token\r\n\r\n  // amount _must_ be raw, i.e. in the native representation\r\n  public constructor(token: Token, amount: BigintIsh) {\r\n    const parsedAmount = parseBigintIsh(amount)\r\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\r\n\r\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(token.decimals)))\r\n    this.token = token\r\n  }\r\n\r\n  public get raw(): JSBI {\r\n    return this.numerator\r\n  }\r\n\r\n  public add(other: TokenAmount): TokenAmount {\r\n    invariant(this.token.equals(other.token), 'TOKEN')\r\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\r\n  }\r\n\r\n  public subtract(other: TokenAmount): TokenAmount {\r\n    invariant(this.token.equals(other.token), 'TOKEN')\r\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\r\n  }\r\n\r\n  public toSignificant(significantDigits = 12, format?: object, rounding: Rounding = Rounding.ROUND_DOWN): string {\r\n    return super.toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = this.token.decimals, format?: object, rounding: Rounding = Rounding.ROUND_DOWN): string {\r\n    invariant(decimalPlaces <= this.token.decimals, 'DECIMALS')\r\n    return super.toFixed(decimalPlaces, format, rounding)\r\n  }\r\n\r\n  public toExact(format: object = { groupSeparator: '' }): string {\r\n    Big.DP = this.token.decimals\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\r\n  }\r\n}\r\n", "import { Token } from '../token'\r\nimport { TokenAmount } from './tokenAmount'\r\nimport { currencyEquals } from '../token'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\n\r\nimport { BigintIsh, Rounding, TEN } from '../../constants'\r\nimport { Route } from '../route'\r\nimport { Fraction } from './fraction'\r\n\r\nexport class Price extends Fraction {\r\n  public readonly baseCurrency: Token // input i.e. denominator\r\n  public readonly quoteCurrency: Token // output i.e. numerator\r\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\r\n\r\n  public static fromRoute(route: Route): Price {\r\n    const prices: Price[] = []\r\n    for (const [i, pair] of route.pairs.entries()) {\r\n      prices.push(\r\n        route.path[i].equals(pair.token0)\r\n          ? new Price(pair.reserve0.token, pair.reserve1.token, pair.reserve0.raw, pair.reserve1.raw)\r\n          : new Price(pair.reserve1.token, pair.reserve0.token, pair.reserve1.raw, pair.reserve0.raw)\r\n      )\r\n    }\r\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\r\n  }\r\n\r\n  // denominator and numerator _must_ be raw, i.e. in the native representation\r\n  public constructor(baseCurrency: Token, quoteCurrency: Token, denominator: BigintIsh, numerator: BigintIsh) {\r\n    super(numerator, denominator)\r\n\r\n    this.baseCurrency = baseCurrency\r\n    this.quoteCurrency = quoteCurrency\r\n    this.scalar = new Fraction(\r\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\r\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\r\n    )\r\n  }\r\n\r\n  public get raw(): Fraction {\r\n    return new Fraction(this.numerator, this.denominator)\r\n  }\r\n\r\n  public get adjusted(): Fraction {\r\n    return super.multiply(this.scalar)\r\n  }\r\n\r\n  public invert(): Price {\r\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\r\n  }\r\n\r\n  public multiply(other: Price): Price {\r\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\r\n    const fraction = super.multiply(other)\r\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\r\n  }\r\n\r\n  // performs floor division on overflow\r\n  public quote(currencyAmount: TokenAmount): TokenAmount {\r\n    invariant(currencyEquals(currencyAmount.token, this.baseCurrency), 'TOKEN')\r\n\r\n    return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\r\n  }\r\n\r\n  public toSignificant(significantDigits = 6, format?: object, rounding?: Rounding): string {\r\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces = 4, format?: object, rounding?: Rounding): string {\r\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n", "import { Price } from './fractions/price'\r\nimport { TokenAmount } from './fractions/tokenAmount'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport { BigintIsh, MINIMUM_LIQUIDITY, ZERO, ONE, FIVE, FEES_NUMERATOR, FEES_DENOMINATOR, ChainId } from '../constants'\r\nimport { sqrt, parseBigintIsh, getPairAddress } from '../utils'\r\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\r\nimport { Token } from './token'\r\n\r\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\r\n\r\nexport class Pair {\r\n  public readonly liquidityToken: Token\r\n  readonly tokenAmounts: [TokenAmount, TokenAmount]\r\n\r\n  public static getAddress(tokenA: Token, tokenB: Token): string {\r\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\r\n\r\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\r\n      PAIR_ADDRESS_CACHE = {\r\n        ...PAIR_ADDRESS_CACHE,\r\n        [tokens[0].address]: {\r\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\r\n          [tokens[1].address]: getPairAddress(tokenA, tokenB)\r\n        }\r\n      }\r\n    }\r\n\r\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\r\n  }\r\n\r\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\r\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\r\n      ? [tokenAmountA, tokenAmountB]\r\n      : [tokenAmountB, tokenAmountA]\r\n    this.liquidityToken = new Token(\r\n      tokenAmounts[0].token.chainId,\r\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\r\n      18,\r\n      '10k Swap LP',\r\n      '10k Swap'\r\n    )\r\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\r\n  }\r\n\r\n  /**\r\n   * Returns true if the token is either token0 or token1\r\n   * @param token to check\r\n   */\r\n  public involvesToken(token: Token): boolean {\r\n    return token.equals(this.token0) || token.equals(this.token1)\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\r\n   */\r\n  public get token0Price(): Price {\r\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\r\n   */\r\n  public get token1Price(): Price {\r\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\r\n  }\r\n\r\n  /**\r\n   * Return the price of the given token in terms of the other token in the pair.\r\n   * @param token token to return price of\r\n   */\r\n  public priceOf(token: Token): Price {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\r\n  }\r\n\r\n  /**\r\n   * Returns the chain ID of the tokens in the pair.\r\n   */\r\n  public get chainId(): ChainId {\r\n    return this.token0.chainId\r\n  }\r\n\r\n  public get token0(): Token {\r\n    return this.tokenAmounts[0].token\r\n  }\r\n\r\n  public get token1(): Token {\r\n    return this.tokenAmounts[1].token\r\n  }\r\n\r\n  public get reserve0(): TokenAmount {\r\n    return this.tokenAmounts[0]\r\n  }\r\n\r\n  public get reserve1(): TokenAmount {\r\n    return this.tokenAmounts[1]\r\n  }\r\n\r\n  public reserveOf(token: Token): TokenAmount {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\r\n  }\r\n\r\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\r\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\r\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\r\n      throw new InsufficientReservesError()\r\n    }\r\n    const inputReserve = this.reserveOf(inputAmount.token)\r\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\r\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, FEES_NUMERATOR)\r\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\r\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, FEES_DENOMINATOR), inputAmountWithFee)\r\n    const outputAmount = new TokenAmount(inputAmount.token.equals(this.token0) ? this.token1 : this.token0, JSBI.divide(numerator, denominator))\r\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\r\n      throw new InsufficientInputAmountError()\r\n    }\r\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\r\n  }\r\n\r\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\r\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\r\n    if (\r\n      JSBI.equal(this.reserve0.raw, ZERO) ||\r\n      JSBI.equal(this.reserve1.raw, ZERO) ||\r\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\r\n    ) {\r\n      throw new InsufficientReservesError()\r\n    }\r\n\r\n    const outputReserve = this.reserveOf(outputAmount.token)\r\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\r\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), FEES_DENOMINATOR)\r\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), FEES_NUMERATOR)\r\n    const inputAmount = new TokenAmount(\r\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\r\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\r\n    )\r\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\r\n  }\r\n\r\n  public getLiquidityMinted(totalSupply: TokenAmount, tokenAmountA: TokenAmount, tokenAmountB: TokenAmount): TokenAmount {\r\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\r\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\r\n      ? [tokenAmountA, tokenAmountB]\r\n      : [tokenAmountB, tokenAmountA]\r\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\r\n\r\n    let liquidity: JSBI\r\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\r\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\r\n    } else {\r\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\r\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\r\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\r\n    }\r\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\r\n      throw new InsufficientInputAmountError()\r\n    }\r\n    return new TokenAmount(this.liquidityToken, liquidity)\r\n  }\r\n\r\n  public getLiquidityValue(token: Token, totalSupply: TokenAmount, liquidity: TokenAmount, feeOn = false, kLast?: BigintIsh): TokenAmount {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\r\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\r\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\r\n\r\n    let totalSupplyAdjusted: TokenAmount\r\n    if (!feeOn) {\r\n      totalSupplyAdjusted = totalSupply\r\n    } else {\r\n      invariant(!!kLast, 'K_LAST')\r\n      const kLastParsed = parseBigintIsh(kLast)\r\n      if (!JSBI.equal(kLastParsed, ZERO)) {\r\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\r\n        const rootKLast = sqrt(kLastParsed)\r\n        if (JSBI.greaterThan(rootK, rootKLast)) {\r\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\r\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\r\n          const feeLiquidity = JSBI.divide(numerator, denominator)\r\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\r\n        } else {\r\n          totalSupplyAdjusted = totalSupply\r\n        }\r\n      } else {\r\n        totalSupplyAdjusted = totalSupply\r\n      }\r\n    }\r\n\r\n    return new TokenAmount(token, JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw))\r\n  }\r\n}\r\n", "import { ChainId } from '../constants'\r\nimport invariant from 'tiny-invariant'\r\n\r\nimport { Token } from './token'\r\nimport { Pair } from './pair'\r\nimport { Price } from './fractions/price'\r\n\r\nexport class Route {\r\n  public readonly pairs: Pair[]\r\n  public readonly path: Token[]\r\n  public readonly input: Token\r\n  public readonly output: Token\r\n  public readonly midPrice: Price\r\n\r\n  public constructor(pairs: Pair[], input: Token, output?: Token) {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(\r\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\r\n      'CHAIN_IDS'\r\n    )\r\n    invariant((input instanceof Token && pairs[0].involvesToken(input)) || 'INPUT')\r\n    invariant(typeof output === 'undefined' || (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)), 'OUTPUT')\r\n\r\n    const path: Token[] = [input]\r\n    for (const [i, pair] of pairs.entries()) {\r\n      const currentInput = path[i]\r\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\r\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\r\n      path.push(output)\r\n    }\r\n\r\n    this.pairs = pairs\r\n    this.path = path\r\n    this.midPrice = Price.fromRoute(this)\r\n    this.input = input\r\n    this.output = output ?? path[path.length - 1]\r\n  }\r\n\r\n  public get chainId(): ChainId {\r\n    return this.pairs[0].chainId\r\n  }\r\n}\r\n", "import { Rounding, _100 } from '../../constants'\r\nimport { Fraction } from './fraction'\r\n\r\nconst _100_PERCENT = new Fraction(_100)\r\n\r\nexport class Percent extends Fraction {\r\n  public toSignificant(significantDigits = 5, format?: object, rounding?: Rounding): string {\r\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces = 2, format?: object, rounding?: Rounding): string {\r\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n", "import invariant from 'tiny-invariant'\r\n\r\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\r\nimport { sortedInsert } from '../utils'\r\nimport { Fraction } from './fractions/fraction'\r\nimport { Percent } from './fractions/percent'\r\nimport { Price } from './fractions/price'\r\nimport { TokenAmount } from './fractions/tokenAmount'\r\nimport { Pair } from './pair'\r\nimport { Route } from './route'\r\nimport { currencyEquals, Token } from './token'\r\n\r\n/**\r\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\r\n * @param midPrice mid price before the trade\r\n * @param inputAmount the input amount of the trade\r\n * @param outputAmount the output amount of the trade\r\n */\r\nfunction computePriceImpact(midPrice: Price, inputAmount: TokenAmount, outputAmount: TokenAmount): Percent {\r\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\r\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\r\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\r\n  return new Percent(slippage.numerator, slippage.denominator)\r\n}\r\n\r\n// minimal interface so the input output comparator may be shared across types\r\ninterface InputOutput {\r\n  readonly inputAmount: TokenAmount\r\n  readonly outputAmount: TokenAmount\r\n}\r\n\r\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\r\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\r\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\r\n  // must have same input and output token for comparison\r\n  invariant(currencyEquals(a.inputAmount.token, b.inputAmount.token), 'INPUT_CURRENCY')\r\n  invariant(currencyEquals(a.outputAmount.token, b.outputAmount.token), 'OUTPUT_CURRENCY')\r\n  if (a.outputAmount.equalTo(b.outputAmount)) {\r\n    if (a.inputAmount.equalTo(b.inputAmount)) {\r\n      return 0\r\n    }\r\n    // trade A requires less input than trade B, so A should come first\r\n    if (a.inputAmount.lessThan(b.inputAmount)) {\r\n      return -1\r\n    } else {\r\n      return 1\r\n    }\r\n  } else {\r\n    // tradeA has less output than trade B, so should come second\r\n    if (a.outputAmount.lessThan(b.outputAmount)) {\r\n      return 1\r\n    } else {\r\n      return -1\r\n    }\r\n  }\r\n}\r\n\r\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\r\nexport function tradeComparator(a: Trade, b: Trade) {\r\n  const ioComp = inputOutputComparator(a, b)\r\n  if (ioComp !== 0) {\r\n    return ioComp\r\n  }\r\n\r\n  // consider lowest slippage next, since these are less likely to fail\r\n  if (a.priceImpact.lessThan(b.priceImpact)) {\r\n    return -1\r\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\r\n    return 1\r\n  }\r\n\r\n  // finally consider the number of hops since each hop costs gas\r\n  return a.route.path.length - b.route.path.length\r\n}\r\n\r\nexport interface BestTradeOptions {\r\n  // how many results to return\r\n  maxNumResults?: number\r\n  // the maximum number of hops a trade should contain\r\n  maxHops?: number\r\n}\r\n\r\n/**\r\n * Represents a trade executed against a list of pairs.\r\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\r\n */\r\nexport class Trade {\r\n  /**\r\n   * The route of the trade, i.e. which pairs the trade goes through.\r\n   */\r\n  public readonly route: Route\r\n  /**\r\n   * The type of the trade, either exact in or exact out.\r\n   */\r\n  public readonly tradeType: TradeType\r\n  /**\r\n   * The input amount for the trade assuming no slippage.\r\n   */\r\n  public readonly inputAmount: TokenAmount\r\n  /**\r\n   * The output amount for the trade assuming no slippage.\r\n   */\r\n  public readonly outputAmount: TokenAmount\r\n  /**\r\n   * The price expressed in terms of output amount/input amount.\r\n   */\r\n  public readonly executionPrice: Price\r\n  /**\r\n   * The mid price after the trade executes assuming no slippage.\r\n   */\r\n  public readonly nextMidPrice: Price\r\n  /**\r\n   * The percent difference between the mid price before the trade and the trade execution price.\r\n   */\r\n  public readonly priceImpact: Percent\r\n\r\n  /**\r\n   * Constructs an exact in trade with the given amount in and route\r\n   * @param route route of the exact in trade\r\n   * @param amountIn the amount being passed in\r\n   */\r\n  public static exactIn(route: Route, amountIn: TokenAmount): Trade {\r\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\r\n  }\r\n\r\n  /**\r\n   * Constructs an exact out trade with the given amount out and route\r\n   * @param route route of the exact out trade\r\n   * @param amountOut the amount returned by the trade\r\n   */\r\n  public static exactOut(route: Route, amountOut: TokenAmount): Trade {\r\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\r\n  }\r\n\r\n  public constructor(route: Route, amount: TokenAmount, tradeType: TradeType) {\r\n    const amounts: TokenAmount[] = new Array(route.path.length)\r\n    const nextPairs: Pair[] = new Array(route.pairs.length)\r\n    if (tradeType === TradeType.EXACT_INPUT) {\r\n      invariant(currencyEquals(amount.token, route.input), 'INPUT')\r\n      amounts[0] = amount\r\n      for (let i = 0; i < route.path.length - 1; i++) {\r\n        const pair = route.pairs[i]\r\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\r\n        amounts[i + 1] = outputAmount\r\n        nextPairs[i] = nextPair\r\n      }\r\n    } else {\r\n      invariant(currencyEquals(amount.token, route.output), 'OUTPUT')\r\n      amounts[amounts.length - 1] = amount\r\n      for (let i = route.path.length - 1; i > 0; i--) {\r\n        const pair = route.pairs[i - 1]\r\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\r\n        amounts[i - 1] = inputAmount\r\n        nextPairs[i - 1] = nextPair\r\n      }\r\n    }\r\n\r\n    this.route = route\r\n    this.tradeType = tradeType\r\n    this.inputAmount = tradeType === TradeType.EXACT_INPUT ? amount : amounts[0]\r\n    this.outputAmount = tradeType === TradeType.EXACT_OUTPUT ? amount : amounts[amounts.length - 1]\r\n    this.executionPrice = new Price(this.inputAmount.token, this.outputAmount.token, this.inputAmount.raw, this.outputAmount.raw)\r\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\r\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\r\n  }\r\n\r\n  /**\r\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public minimumAmountOut(slippageTolerance: Percent): TokenAmount {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\r\n      return this.outputAmount\r\n    } else {\r\n      const slippageAdjustedAmountOut = new Fraction(ONE)\r\n        .add(slippageTolerance)\r\n        .invert()\r\n        .multiply(this.outputAmount.raw).quotient\r\n      return new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public maximumAmountIn(slippageTolerance: Percent): TokenAmount {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_INPUT) {\r\n      return this.inputAmount\r\n    } else {\r\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\r\n      return new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\r\n   * amount to an output token, making at most `maxHops` hops.\r\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyAmountIn exact amount of input token to spend\r\n   * @param currencyOut the desired token out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactIn(\r\n    pairs: Pair[],\r\n    currencyAmountIn: TokenAmount,\r\n    currencyOut: Token,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    originalAmountIn: TokenAmount = currencyAmountIn,\r\n    bestTrades: Trade[] = []\r\n  ): Trade[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\r\n    const chainId: ChainId | undefined =\r\n      currencyAmountIn instanceof TokenAmount ? currencyAmountIn.token.chainId : currencyOut instanceof Token ? currencyOut.chainId : undefined\r\n    invariant(chainId !== undefined, 'CHAIN_ID')\r\n\r\n    const amountIn = currencyAmountIn\r\n    const tokenOut = currencyOut\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n      // pair irrelevant\r\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\r\n\r\n      let amountOut: TokenAmount\r\n      try {\r\n        ;[amountOut] = pair.getOutputAmount(amountIn)\r\n      } catch (error) {\r\n        // input too low\r\n        if ((error as any).isInsufficientInputAmountError) {\r\n          continue\r\n        }\r\n        throw error\r\n      }\r\n      // we have arrived at the output token, so this is the final trade of one of the paths\r\n      if (amountOut.token.equals(tokenOut)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(new Route([...currentPairs, pair], originalAmountIn.token, currencyOut), originalAmountIn, TradeType.EXACT_INPUT),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactIn(\r\n          pairsExcludingThisPair,\r\n          amountOut,\r\n          currencyOut,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1\r\n          },\r\n          [...currentPairs, pair],\r\n          originalAmountIn,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n\r\n    return bestTrades\r\n  }\r\n\r\n  /**\r\n   * similar to the above method but instead targets a fixed output amount\r\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\r\n   * to an output token amount, making at most `maxHops` hops\r\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyIn the token to spend\r\n   * @param currencyAmountOut the exact amount of token out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactOut(\r\n    pairs: Pair[],\r\n    currencyIn: Token,\r\n    currencyAmountOut: TokenAmount,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    originalAmountOut: TokenAmount = currencyAmountOut,\r\n    bestTrades: Trade[] = []\r\n  ): Trade[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\r\n    const chainId: ChainId | undefined =\r\n      currencyAmountOut instanceof TokenAmount ? currencyAmountOut.token.chainId : currencyIn instanceof Token ? currencyIn.chainId : undefined\r\n    invariant(chainId !== undefined, 'CHAIN_ID')\r\n\r\n    const amountOut = currencyAmountOut\r\n    const tokenIn = currencyIn\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n      // pair irrelevant\r\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\r\n\r\n      let amountIn: TokenAmount\r\n      try {\r\n        ;[amountIn] = pair.getInputAmount(amountOut)\r\n      } catch (error) {\r\n        // not enough liquidity in this pair\r\n        if ((error as any).isInsufficientReservesError) {\r\n          continue\r\n        }\r\n        throw error\r\n      }\r\n      // we have arrived at the input token, so this is the first trade of one of the paths\r\n      if (amountIn.token.equals(tokenIn)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(new Route([pair, ...currentPairs], currencyIn, originalAmountOut.token), originalAmountOut, TradeType.EXACT_OUTPUT),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactOut(\r\n          pairsExcludingThisPair,\r\n          currencyIn,\r\n          amountIn,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1\r\n          },\r\n          [pair, ...currentPairs],\r\n          originalAmountOut,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n\r\n    return bestTrades\r\n  }\r\n}\r\n", "import { TradeType } from './constants'\r\nimport invariant from 'tiny-invariant'\r\nimport { bnToUint256, Uint256 } from 'starknet/dist/utils/uint256'\r\nimport { Percent, Trade } from './entities'\r\n\r\n/**\r\n * Options for producing the arguments to send call to the router.\r\n */\r\nexport interface TradeOptions {\r\n  /**\r\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\r\n   */\r\n  allowedSlippage: Percent\r\n  /**\r\n   * How long the swap is valid until it expires, in seconds.\r\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\r\n   * are generated.\r\n   */\r\n  ttl: number\r\n  /**\r\n   * The account that should receive the output of the swap.\r\n   */\r\n  recipient: string\r\n\r\n  /**\r\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\r\n   */\r\n  feeOnTransfer?: boolean\r\n}\r\n\r\n/**\r\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\r\n */\r\nexport interface SwapParameters {\r\n  /**\r\n   * The method to call on the Uniswap V2 Router.\r\n   */\r\n  methodName: string\r\n  /**\r\n   * The arguments to pass to the method, all hex encoded.\r\n   */\r\n  args: string[]\r\n}\r\n\r\n/**\r\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\r\n */\r\nexport abstract class Router {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() {}\r\n  /**\r\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n   * @param trade to produce call parameters for\r\n   * @param options options for the call parameters\r\n   */\r\n  public static swapCallParameters(trade: Trade, options: TradeOptions): SwapParameters {\r\n    invariant(options.ttl > 0, 'TTL')\r\n\r\n    const to: string = options.recipient\r\n    const amountIn: Uint256 = bnToUint256(trade.maximumAmountIn(options.allowedSlippage).raw.toString())\r\n    const amountOut: Uint256 = bnToUint256(trade.minimumAmountOut(options.allowedSlippage).raw.toString())\r\n    const path: string[] = trade.route.path.map(token => token.address)\r\n    const deadline = `${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString()}`\r\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\r\n\r\n    let methodName: string\r\n    let args: string[]\r\n    switch (trade.tradeType) {\r\n      case TradeType.EXACT_INPUT:\r\n        methodName = useFeeOnTransfer ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens' : 'swapExactTokensForTokens'\r\n        // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        args = [\r\n          amountIn.low.toString(),\r\n          amountIn.high.toString(),\r\n          amountOut.low.toString(),\r\n          amountOut.high.toString(),\r\n          path.length + '',\r\n          ...path,\r\n          to,\r\n          deadline\r\n        ]\r\n        break\r\n      case TradeType.EXACT_OUTPUT:\r\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\r\n        methodName = 'swapTokensForExactTokens'\r\n        // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        args = [\r\n          amountOut.low.toString(),\r\n          amountOut.high.toString(),\r\n          amountIn.low.toString(),\r\n          amountIn.high.toString(),\r\n          path.length + '',\r\n          ...path,\r\n          to,\r\n          deadline\r\n        ]\r\n        break\r\n    }\r\n    return {\r\n      methodName,\r\n      args\r\n    }\r\n  }\r\n}\r\n", "import { Abi, Contract, Provider } from 'starknet'\r\nimport { TokenAmount } from './entities/fractions/tokenAmount'\r\nimport { Pair } from './entities/pair'\r\nimport l0kPairAbi from './abis/l0kPairAbi.json'\r\nimport invariant from 'tiny-invariant'\r\nimport ERC20 from './abis/ERC20.json'\r\nimport { ChainId } from './constants'\r\nimport { Token } from './entities/token'\r\n\r\nconst NetworkNames: { [chainId in ChainId]: 'mainnet-alpha' | 'goerli-alpha' } = {\r\n  [ChainId.MAINNET]: 'mainnet-alpha',\r\n  [ChainId.TESTNET]: 'goerli-alpha'\r\n}\r\n\r\nlet TOKEN_DECIMALS_CACHE: { [chainId: string]: { [address: string]: number } } = {\r\n  [ChainId.TESTNET]: {\r\n    '0x049d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7': 18 // ETH\r\n  }\r\n}\r\n\r\nasync function getDecimals(chainId: ChainId, address: string, provider: Provider): Promise<number> {\r\n  if (typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number') {\r\n    return TOKEN_DECIMALS_CACHE[chainId][address]\r\n  }\r\n\r\n  const contract = new Contract(ERC20 as Abi, address, provider)\r\n\r\n  const { decimals } = await contract.call('decimals')\r\n\r\n  TOKEN_DECIMALS_CACHE = {\r\n    ...TOKEN_DECIMALS_CACHE,\r\n    [chainId]: {\r\n      ...TOKEN_DECIMALS_CACHE?.[chainId],\r\n      [address]: decimals.toNumber()\r\n    }\r\n  }\r\n\r\n  return decimals.toNumber()\r\n}\r\n\r\n/**\r\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\r\n */\r\nexport abstract class Fetcher {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() { }\r\n\r\n  /**\r\n   * Fetch information for a given token on the given chain, using the given ethers provider.\r\n   * @param chainId chain of the token\r\n   * @param address address of the token on the chain\r\n   * @param provider provider used to fetch the token\r\n   * @param symbol optional symbol of the token\r\n   * @param name optional name of the token\r\n   */\r\n  public static async fetchTokenData(\r\n    chainId: ChainId,\r\n    address: string,\r\n    provider = new Provider({ network: NetworkNames[chainId] }),\r\n    symbol?: string,\r\n    name?: string\r\n  ): Promise<Token> {\r\n    const parsedDecimals = await getDecimals(chainId, address, provider)\r\n\r\n    return new Token(chainId, address, parsedDecimals, symbol, name)\r\n  }\r\n\r\n  /**\r\n   * Fetches information about a pair and constructs a pair from the given two tokens.\r\n   * @param tokenA first token\r\n   * @param tokenB second token\r\n   * @param provider the provider to use to fetch the data\r\n   */\r\n  public static async fetchPairData(tokenA: Token, tokenB: Token, provider = new Provider({ network: NetworkNames[tokenA.chainId] })): Promise<Pair> {\r\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\r\n    const address = Pair.getAddress(tokenA, tokenB)\r\n    const { reserve0, reserve1 } = await new Contract(l0kPairAbi as Abi, address, provider).call('getReserves', [])\r\n    const balances = tokenA.sortsBefore(tokenB) ? [reserve0, reserve1] : [reserve0, reserve1]\r\n\r\n    return new Pair(new TokenAmount(tokenA, balances[0].toString()), new TokenAmount(tokenB, balances[1].toString()))\r\n  }\r\n}\r\n", "\r\n'use strict'\r\n\r\nif (process.env.NODE_ENV === 'production') {\r\n  module.exports = require('./l0k_swap-sdk.cjs.production.min.js')\r\n} else {\r\n  module.exports = require('./l0k_swap-sdk.cjs.development.js')\r\n}\r\n"],
  "mappings": "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",
  "names": ["Math", "imul", "clz32", "JSBI", "abs", "max", "floor", "length", "sign", "i", "a", "u", "setPrototypeOf", "prototype", "__kMaxLength", "RangeError", "e", "result", "digit", "t", "push", "toString", "join", "radix", "__toStringBasePowerOfTwo", "__toStringGeneric", "Error", "newLength", "last", "pop", "__clz30", "__digit", "multiplier", "summand", "mLow", "mHigh", "carry", "high", "d", "dLow", "dHigh", "pLow", "__imul", "pMid1", "pMid2", "pHigh", "g", "v", "o", "__setDigit", "startIndex", "halfDigits", "sum", "__halfDigit", "__setHalfDigit", "subtrahend", "borrow", "current", "r0", "sub", "r15", "n", "l", "D", "shift", "len", "__unsignedDigit", "value", "digitIndex", "previous", "updated", "arg", "Number", "isFinite", "__zero", "__isOneDigitInt", "__oneDigit", "__fromDouble", "__fromString", "SyntaxError", "_typeof", "constructor", "primitive", "__toPrimitive", "BigInt", "TypeError", "x", "xLength", "xMsd", "msdLeadingZeros", "xBitLength", "exponent", "currentDigit", "mantissaHigh", "r", "mantissaHighBitsUnset", "mantissaLow", "mantissaLowBitsUnset", "h", "b", "rounding", "__decideRounding", "signBit", "__kBitConversionInts", "__kBitConversionDouble", "__copy", "__absoluteSubOne", "__trim", "__absoluteAddOne", "y", "unaryMinus", "expValue", "__kMaxLengthBits", "neededDigits", "__initializeDigits", "msd", "runningSquare", "multiply", "resultLength", "__clzmsd", "_", "__multiplyAccumulate", "__absoluteCompare", "quotient", "resultSign", "divisor", "__absoluteDivSmall", "__absoluteDivLarge", "remainderDigit", "__absoluteModSmall", "remainder", "__absoluteAdd", "__absoluteSub", "__rightShiftByAbsolute", "__leftShiftByAbsolute", "__compareToBigInt", "equal", "__absoluteAnd", "y1", "__absoluteOr", "__absoluteAndNot", "__absoluteXor", "neededLength", "topDigit", "compareDigit", "__truncateToNBits", "__truncateAndSubFromPowerOfTwo", "bitsInTopDigit", "__toNumeric", "__isBigInt", "add", "__compare", "EQ", "__equalToNumber", "dataview", "byteOffset", "littleEndian", "asIntN", "DataViewGetBigUint64", "getUint32", "low", "s", "DataViewSetBigUint64", "asUintN", "d1", "setUint32", "mantissaBitsUnset", "topUnconsumedBit", "mask", "rawExponent", "digits", "kMantissaHighTopBit", "msdTopBit", "remainingMantissaBits", "c", "string", "cursor", "charCodeAt", "__isWhitespace", "chars", "bitsPerChar", "__kMaxBitsPerChar", "roundup", "__kBitsPerCharTableMultiplier", "bitsMin", "__kBitsPerCharTableShift", "limDigit", "limAlpha", "parts", "partsBits", "done", "part", "bits", "f", "p", "__fillFromParts", "charsSoFar", "S", "k", "m", "digitsSoFar", "__inplaceMultiplyAdd", "bitsInDigit", "partBits", "charMask", "charsRequired", "Array", "pos", "availableBits", "newDigit", "__kConversionChars", "consumedBits", "isRecursiveCall", "bitLength", "maxBitsPerChar", "minBitsPerChar", "secondHalf", "secondHalfChars", "conqueror", "exponentiate", "input", "divisionResult", "firstHalf", "leftNegative", "bothNegative", "xSign", "__unequalSign", "__absoluteGreater", "__absoluteLess", "ySign", "yAbs", "xDigit", "__compareToDouble", "yBitLength", "compareMantissa", "op", "__comparisonResultToBool", "__compareToNumber", "inputLength", "__setDigitGrow", "yLength", "numPairs", "tmp", "tmpLength", "diff", "multiplicand", "accumulator", "accumulatorIndex", "m2Low", "m2High", "acc", "m1", "m1Low", "m1High", "rLow", "rMid1", "rMid2", "rHigh", "source", "factor", "rx", "ry", "upperHalf", "lowerHalf", "dividend", "wantQuotient", "wantRemainder", "__halfDigitLength", "n2", "q", "qhatv", "__clz15", "__specialLeftShift", "vn1", "halfDigitBuffer", "j", "qhat", "ujn", "rhat", "vn2", "ujn2", "__internalMultiplyAdd", "__inplaceSub", "__inplaceAdd", "__inplaceRightShift", "addDigit", "__toShiftAmount", "digitShift", "bitsShift", "grow", "__rightShiftByMaximum", "mustRoundDown", "obj", "hint", "Symbol", "toPrimitive", "exoticToPrim", "valueOf", "call", "drop", "min", "limit", "resultMsd", "msdBitsConsumed", "minuendMsd", "base", "ArrayBuffer", "Float64Array", "__kBitConversionBuffer", "Int32Array", "LN2", "log", "toFormat", "subtract", "Decimal", "Big", "CAN_SET_PROTOTYPE", "Object", "InsufficientReservesError", "name", "constructor", "setPrototypeOf", "prototype", "Error", "InsufficientInputAmountError", "TradeType", "Rounding", "MINIMUM_LIQUIDITY", "JSBI", "BigInt", "ZERO", "ONE", "TWO", "THREE", "FIVE", "TEN", "_100", "FEES_NUMERATOR", "FEES_DENOMINATOR", "SolidityType", "SOLIDITY_TYPE_MAXIMA", "uint8", "uint256", "PAIR_CONTRACT_CLASS_HASH", "FACTORY_ADDRESSES", "StarknetChainId", "MAINNET", "TESTNET", "CONTRACT_ADDRESS_PREFIX", "encodeShortString", "validateSolidityTypeInstance", "value", "solidityType", "greaterThanOrEqual", "invariant", "lessThanOrEqual", "validateAndParseAddress", "address", "checksummedAddress", "getAddress", "error", "parseBigintIsh", "bigintIsh", "toString", "sqrt", "y", "z", "x", "greaterThan", "add", "divide", "lessThan", "notEqual", "sortedInsert", "items", "maxSize", "comparator", "length", "push", "isFull", "lo", "hi", "mid", "splice", "pop", "getPairAddress", "tokenA", "tokenB", "tokens", "sortsBefore", "salt", "pedersen", "constructorCalldataHash", "computeHashOnElements", "chainId", "isEqualAddress", "addressA", "addressB", "toBN", "eq", "lt", "Token", "decimals", "symbol", "equals", "other", "currencyEquals", "currencyA", "currencyB", "Decimal", "toFormat", "_Decimal", "Big", "_Big", "toSignificantRounding", "ROUND_DOWN", "ROUND_HALF_UP", "ROUND_UP", "toFixedRounding", "Fraction", "numerator", "denominator", "invert", "otherParsed", "equal", "multiply", "subtract", "equalTo", "toSignificant", "significantDigits", "format", "rounding", "groupSeparator", "Number", "isInteger", "set", "precision", "quotient", "div", "toSignificantDigits", "decimalPlaces", "toFixed", "DP", "RM", "remainder", "TokenAmount", "token", "amount", "parsedAmount", "exponentiate", "raw", "toExact", "Price", "baseCurrency", "quoteCurrency", "scalar", "fromRoute", "route", "prices", "pairs", "entries", "i", "pair", "path", "token0", "reserve0", "reserve1", "slice", "reduce", "accumulator", "currentValue", "fraction", "quote", "currencyAmount", "adjusted", "PAIR_ADDRESS_CACHE", "Pair", "tokenAmountA", "tokenAmountB", "tokenAmounts", "liquidityToken", "undefined", "involvesToken", "token1", "priceOf", "token0Price", "token1Price", "reserveOf", "getOutputAmount", "inputAmount", "inputReserve", "outputReserve", "inputAmountWithFee", "outputAmount", "getInputAmount", "getLiquidityMinted", "totalSupply", "liquidity", "amount0", "amount1", "getLiquidityValue", "feeOn", "kLast", "totalSupplyAdjusted", "kLastParsed", "rootK", "rootKLast", "feeLiquidity", "Route", "input", "output", "every", "currentInput", "midPrice", "_100_PERCENT", "Percent", "computePriceImpact", "exactQuote", "slippage", "inputOutputComparator", "a", "b", "tradeComparator", "ioComp", "priceImpact", "Trade", "tradeType", "amounts", "Array", "nextPairs", "EXACT_INPUT", "nextPair", "EXACT_OUTPUT", "executionPrice", "nextMidPrice", "exactIn", "amountIn", "exactOut", "amountOut", "minimumAmountOut", "slippageTolerance", "slippageAdjustedAmountOut", "maximumAmountIn", "slippageAdjustedAmountIn", "bestTradeExactIn", "currencyAmountIn", "currencyOut", "currentPairs", "originalAmountIn", "bestTrades", "maxNumResults", "maxHops", "tokenOut", "isInsufficientInputAmountError", "pairsExcludingThisPair", "concat", "bestTradeExactOut", "currencyIn", "currencyAmountOut", "originalAmountOut", "tokenIn", "isInsufficientReservesError", "Router", "swapCallParameters", "trade", "options", "ttl", "to", "recipient", "bnToUint256", "allowedSlippage", "map", "deadline", "Math", "floor", "Date", "getTime", "useFeeOnTransfer", "Boolean", "feeOnTransfer", "methodName", "args", "low", "high", "getDecimals", "provider", "TOKEN_DECIMALS_CACHE", "contract", "Contract", "ERC20", "call", "toNumber", "NetworkNames", "ChainId", "Fetcher", "fetchTokenData", "Provider", "network", "parsedDecimals", "fetchPairData", "l0kPairAbi", "balances", "require_dist"]
}
