{
  "version": 3,
  "sources": ["../../@ethersproject/logger/src.ts/_version.ts", "../../@ethersproject/logger/src.ts/index.ts", "../../@ethersproject/bytes/src.ts/_version.ts", "../../@ethersproject/bytes/src.ts/index.ts"],
  "sourcesContent": ["export const version = \"logger/5.7.0\";\r\n", "\"use strict\";\r\n\r\nlet _permanentCensorErrors = false;\r\nlet _censorErrors = false;\r\n\r\nconst LogLevels: { [ name: string ]: number } = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\r\nlet _logLevel = LogLevels[\"default\"];\r\n\r\nimport { version } from \"./_version\";\r\n\r\nlet _globalLogger: Logger = null;\r\n\r\nfunction _checkNormalize(): string {\r\n    try {\r\n        const missing: Array<string> = [ ];\r\n\r\n        // Make sure all forms of normalization are supported\r\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\r\n            try {\r\n                if (\"test\".normalize(form) !== \"test\") {\r\n                    throw new Error(\"bad normalize\");\r\n                };\r\n            } catch(error) {\r\n                missing.push(form);\r\n            }\r\n        });\r\n\r\n        if (missing.length) {\r\n            throw new Error(\"missing \" + missing.join(\", \"));\r\n        }\r\n\r\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\r\n            throw new Error(\"broken implementation\")\r\n        }\r\n    } catch (error) {\r\n        return error.message;\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nconst _normalizeError = _checkNormalize();\r\n\r\nexport enum LogLevel {\r\n    DEBUG    = \"DEBUG\",\r\n    INFO     = \"INFO\",\r\n    WARNING  = \"WARNING\",\r\n    ERROR    = \"ERROR\",\r\n    OFF      = \"OFF\"\r\n}\r\n\r\n\r\nexport enum ErrorCode {\r\n\r\n    ///////////////////\r\n    // Generic Errors\r\n\r\n    // Unknown Error\r\n    UNKNOWN_ERROR = \"UNKNOWN_ERROR\",\r\n\r\n    // Not Implemented\r\n    NOT_IMPLEMENTED = \"NOT_IMPLEMENTED\",\r\n\r\n    // Unsupported Operation\r\n    //   - operation\r\n    UNSUPPORTED_OPERATION = \"UNSUPPORTED_OPERATION\",\r\n\r\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\r\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\r\n    NETWORK_ERROR = \"NETWORK_ERROR\",\r\n\r\n    // Some sort of bad response from the server\r\n    SERVER_ERROR = \"SERVER_ERROR\",\r\n\r\n    // Timeout\r\n    TIMEOUT = \"TIMEOUT\",\r\n\r\n    ///////////////////\r\n    // Operational  Errors\r\n\r\n    // Buffer Overrun\r\n    BUFFER_OVERRUN = \"BUFFER_OVERRUN\",\r\n\r\n    // Numeric Fault\r\n    //   - operation: the operation being executed\r\n    //   - fault: the reason this faulted\r\n    NUMERIC_FAULT = \"NUMERIC_FAULT\",\r\n\r\n\r\n    ///////////////////\r\n    // Argument Errors\r\n\r\n    // Missing new operator to an object\r\n    //  - name: The name of the class\r\n    MISSING_NEW = \"MISSING_NEW\",\r\n\r\n    // Invalid argument (e.g. value is incompatible with type) to a function:\r\n    //   - argument: The argument name that was invalid\r\n    //   - value: The value of the argument\r\n    INVALID_ARGUMENT = \"INVALID_ARGUMENT\",\r\n\r\n    // Missing argument to a function:\r\n    //   - count: The number of arguments received\r\n    //   - expectedCount: The number of arguments expected\r\n    MISSING_ARGUMENT = \"MISSING_ARGUMENT\",\r\n\r\n    // Too many arguments\r\n    //   - count: The number of arguments received\r\n    //   - expectedCount: The number of arguments expected\r\n    UNEXPECTED_ARGUMENT = \"UNEXPECTED_ARGUMENT\",\r\n\r\n\r\n    ///////////////////\r\n    // Blockchain Errors\r\n\r\n    // Call exception\r\n    //  - transaction: the transaction\r\n    //  - address?: the contract address\r\n    //  - args?: The arguments passed into the function\r\n    //  - method?: The Solidity method signature\r\n    //  - errorSignature?: The EIP848 error signature\r\n    //  - errorArgs?: The EIP848 error parameters\r\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\r\n    CALL_EXCEPTION = \"CALL_EXCEPTION\",\r\n\r\n    // Insufficient funds (< value + gasLimit * gasPrice)\r\n    //   - transaction: the transaction attempted\r\n    INSUFFICIENT_FUNDS = \"INSUFFICIENT_FUNDS\",\r\n\r\n    // Nonce has already been used\r\n    //   - transaction: the transaction attempted\r\n    NONCE_EXPIRED = \"NONCE_EXPIRED\",\r\n\r\n    // The replacement fee for the transaction is too low\r\n    //   - transaction: the transaction attempted\r\n    REPLACEMENT_UNDERPRICED = \"REPLACEMENT_UNDERPRICED\",\r\n\r\n    // The gas limit could not be estimated\r\n    //   - transaction: the transaction passed to estimateGas\r\n    UNPREDICTABLE_GAS_LIMIT = \"UNPREDICTABLE_GAS_LIMIT\",\r\n\r\n    // The transaction was replaced by one with a higher gas price\r\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\r\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\r\n    //   - hash: original transaction hash\r\n    //   - replacement: the full TransactionsResponse for the replacement\r\n    //   - receipt: the receipt of the replacement\r\n    TRANSACTION_REPLACED = \"TRANSACTION_REPLACED\",\r\n\r\n\r\n    ///////////////////\r\n    // Interaction Errors\r\n\r\n    // The user rejected the action, such as signing a message or sending\r\n    // a transaction\r\n    ACTION_REJECTED = \"ACTION_REJECTED\",\r\n};\r\n\r\nconst HEX = \"0123456789abcdef\";\r\n\r\nexport class Logger {\r\n    readonly version: string;\r\n\r\n    static errors = ErrorCode;\r\n\r\n    static levels = LogLevel;\r\n\r\n    constructor(version: string) {\r\n        Object.defineProperty(this, \"version\", {\r\n            enumerable: true,\r\n            value: version,\r\n            writable: false\r\n        });\r\n    }\r\n\r\n    _log(logLevel: LogLevel, args: Array<any>): void {\r\n        const level = logLevel.toLowerCase();\r\n        if (LogLevels[level] == null) {\r\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\r\n        }\r\n        if (_logLevel > LogLevels[level]) { return; }\r\n        console.log.apply(console, args);\r\n    }\r\n\r\n    debug(...args: Array<any>): void {\r\n        this._log(Logger.levels.DEBUG, args);\r\n    }\r\n\r\n    info(...args: Array<any>): void {\r\n        this._log(Logger.levels.INFO, args);\r\n    }\r\n\r\n    warn(...args: Array<any>): void {\r\n        this._log(Logger.levels.WARNING, args);\r\n    }\r\n\r\n    makeError(message: string, code?: ErrorCode, params?: any): Error {\r\n        // Errors are being censored\r\n        if (_censorErrors) {\r\n            return this.makeError(\"censored error\", code, { });\r\n        }\r\n\r\n        if (!code) { code = Logger.errors.UNKNOWN_ERROR; }\r\n        if (!params) { params = {}; }\r\n\r\n        const messageDetails: Array<string> = [];\r\n        Object.keys(params).forEach((key) => {\r\n            const value = params[key];\r\n            try {\r\n                if (value instanceof Uint8Array) {\r\n                    let hex = \"\";\r\n                    for (let i = 0; i < value.length; i++) {\r\n                      hex += HEX[value[i] >> 4];\r\n                      hex += HEX[value[i] & 0x0f];\r\n                    }\r\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\r\n                } else {\r\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\r\n                }\r\n            } catch (error) {\r\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\r\n            }\r\n        });\r\n        messageDetails.push(`code=${ code }`);\r\n        messageDetails.push(`version=${ this.version }`);\r\n\r\n        const reason = message;\r\n\r\n        let url = \"\";\r\n\r\n        switch (code) {\r\n            case ErrorCode.NUMERIC_FAULT: {\r\n                url = \"NUMERIC_FAULT\";\r\n                const fault = message;\r\n\r\n                switch (fault) {\r\n                    case \"overflow\": case \"underflow\": case \"division-by-zero\":\r\n                        url += \"-\" + fault;\r\n                        break;\r\n                    case \"negative-power\": case \"negative-width\":\r\n                        url += \"-unsupported\";\r\n                        break;\r\n                    case \"unbound-bitwise-result\":\r\n                        url += \"-unbound-result\";\r\n                        break;\r\n                }\r\n                break;\r\n            }\r\n            case ErrorCode.CALL_EXCEPTION:\r\n            case ErrorCode.INSUFFICIENT_FUNDS:\r\n            case ErrorCode.MISSING_NEW:\r\n            case ErrorCode.NONCE_EXPIRED:\r\n            case ErrorCode.REPLACEMENT_UNDERPRICED:\r\n            case ErrorCode.TRANSACTION_REPLACED:\r\n            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\r\n                url = code;\r\n                break;\r\n        }\r\n\r\n        if (url) {\r\n            message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\r\n        }\r\n\r\n        if (messageDetails.length) {\r\n            message += \" (\" + messageDetails.join(\", \") + \")\";\r\n        }\r\n\r\n        // @TODO: Any??\r\n        const error: any = new Error(message);\r\n        error.reason = reason;\r\n        error.code = code\r\n\r\n        Object.keys(params).forEach(function(key) {\r\n            error[key] = params[key];\r\n        });\r\n\r\n        return error;\r\n    }\r\n\r\n    throwError(message: string, code?: ErrorCode, params?: any): never {\r\n        throw this.makeError(message, code, params);\r\n    }\r\n\r\n    throwArgumentError(message: string, name: string, value: any): never {\r\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\r\n            argument: name,\r\n            value: value\r\n        });\r\n    }\r\n\r\n    assert(condition: any, message: string, code?: ErrorCode, params?: any): void {\r\n        if (!!condition) { return; }\r\n        this.throwError(message, code, params);\r\n    }\r\n\r\n    assertArgument(condition: any, message: string, name: string, value: any): void {\r\n        if (!!condition) { return; }\r\n        this.throwArgumentError(message, name, value);\r\n    }\r\n\r\n    checkNormalize(message?: string): void {\r\n        if (message == null) { message = \"platform missing String.prototype.normalize\"; }\r\n        if (_normalizeError) {\r\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\r\n                operation: \"String.prototype.normalize\", form: _normalizeError\r\n            });\r\n        }\r\n    }\r\n\r\n    checkSafeUint53(value: number, message?: string): void {\r\n        if (typeof(value) !== \"number\") { return; }\r\n\r\n        if (message == null) { message = \"value not safe\"; }\r\n\r\n        if (value < 0 || value >= 0x1fffffffffffff) {\r\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\r\n                operation: \"checkSafeInteger\",\r\n                fault: \"out-of-safe-range\",\r\n                value: value\r\n            });\r\n        }\r\n\r\n        if (value % 1) {\r\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\r\n                operation: \"checkSafeInteger\",\r\n                fault: \"non-integer\",\r\n                value: value\r\n            });\r\n        }\r\n    }\r\n\r\n    checkArgumentCount(count: number, expectedCount: number, message?: string): void {\r\n        if (message) {\r\n            message = \": \" + message;\r\n        } else {\r\n            message = \"\";\r\n        }\r\n\r\n        if (count < expectedCount) {\r\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\r\n                count: count,\r\n                expectedCount: expectedCount\r\n            });\r\n        }\r\n\r\n        if (count > expectedCount) {\r\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\r\n                count: count,\r\n                expectedCount: expectedCount\r\n            });\r\n        }\r\n    }\r\n\r\n    checkNew(target: any, kind: any): void {\r\n        if (target === Object || target == null) {\r\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\r\n        }\r\n    }\r\n\r\n    checkAbstract(target: any, kind: any): void {\r\n        if (target === kind) {\r\n            this.throwError(\r\n                \"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\",\r\n                Logger.errors.UNSUPPORTED_OPERATION,\r\n                { name: target.name, operation: \"new\" }\r\n            );\r\n        } else if (target === Object || target == null) {\r\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\r\n        }\r\n    }\r\n\r\n    static globalLogger(): Logger {\r\n        if (!_globalLogger) { _globalLogger = new Logger(version); }\r\n        return _globalLogger;\r\n    }\r\n\r\n    static setCensorship(censorship: boolean, permanent?: boolean): void {\r\n        if (!censorship && permanent) {\r\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\r\n                operation: \"setCensorship\"\r\n            });\r\n        }\r\n\r\n        if (_permanentCensorErrors) {\r\n            if (!censorship) { return; }\r\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\r\n                operation: \"setCensorship\"\r\n            });\r\n        }\r\n\r\n        _censorErrors = !!censorship;\r\n        _permanentCensorErrors = !!permanent;\r\n    }\r\n\r\n    static setLogLevel(logLevel: LogLevel): void {\r\n        const level = LogLevels[logLevel.toLowerCase()];\r\n        if (level == null) {\r\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\r\n            return;\r\n        }\r\n        _logLevel = level;\r\n    }\r\n\r\n    static from(version: string): Logger {\r\n        return new Logger(version);\r\n    }\r\n}\r\n", "export const version = \"bytes/5.7.0\";\r\n", "\"use strict\";\r\n\r\nimport { Logger } from \"@ethersproject/logger\";\r\nimport { version } from \"./_version\";\r\nconst logger = new Logger(version);\r\n\r\n///////////////////////////////\r\n// Exported Types\r\n\r\nexport type Bytes = ArrayLike<number>;\r\n\r\nexport type BytesLike = Bytes | string;\r\n\r\nexport type DataOptions = {\r\n    allowMissingPrefix?: boolean;\r\n    hexPad?: \"left\" | \"right\" | null;\r\n};\r\n\r\nexport interface Hexable {\r\n    toHexString(): string;\r\n}\r\n\r\n\r\n/*\r\nexport interface HexString {\r\n    length: number;\r\n    substring: (start: number, end?: number) => string;\r\n\r\n    [index: number]: string;\r\n}\r\n*/\r\n\r\nexport type SignatureLike  = {\r\n    r: string;\r\n    s?: string;\r\n    _vs?: string,\r\n    recoveryParam?: number;\r\n    v?: number;\r\n} | BytesLike;\r\n\r\nexport interface Signature {\r\n    r: string;\r\n\r\n    s: string;\r\n    _vs: string,\r\n\r\n    recoveryParam: number;\r\n    v: number;\r\n\r\n    yParityAndS: string\r\n    compact: string;\r\n}\r\n\r\n///////////////////////////////\r\n\r\n\r\nfunction isHexable(value: any): value is Hexable {\r\n    return !!(value.toHexString);\r\n}\r\n\r\nfunction addSlice(array: Uint8Array): Uint8Array {\r\n    if (array.slice) { return array; }\r\n\r\n    array.slice = function() {\r\n        const args = Array.prototype.slice.call(arguments);\r\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\r\n    }\r\n\r\n    return array;\r\n}\r\n\r\nexport function isBytesLike(value: any): value is BytesLike {\r\n    return ((isHexString(value) && !(value.length % 2)) || isBytes(value));\r\n}\r\n\r\nfunction isInteger(value: number) {\r\n    return (typeof(value) === \"number\" && value == value && (value % 1) === 0);\r\n}\r\n\r\nexport function isBytes(value: any): value is Bytes {\r\n    if (value == null) { return false; }\r\n\r\n    if (value.constructor === Uint8Array) { return true; }\r\n    if (typeof(value) === \"string\") { return false; }\r\n    if (!isInteger(value.length) || value.length < 0) { return false; }\r\n\r\n    for (let i = 0; i < value.length; i++) {\r\n        const v = value[i];\r\n        if (!isInteger(v) || v < 0 || v >= 256) { return false; }\r\n    }\r\n    return true;\r\n}\r\n\r\n\r\nexport function arrayify(value: BytesLike | Hexable | number, options?: DataOptions): Uint8Array {\r\n    if (!options) { options = { }; }\r\n\r\n    if (typeof(value) === \"number\") {\r\n        logger.checkSafeUint53(value, \"invalid arrayify value\");\r\n\r\n        const result = [];\r\n        while (value) {\r\n            result.unshift(value & 0xff);\r\n            value = parseInt(String(value / 256));\r\n        }\r\n        if (result.length === 0) { result.push(0); }\r\n\r\n        return addSlice(new Uint8Array(result));\r\n    }\r\n\r\n    if (options.allowMissingPrefix && typeof(value) === \"string\" && value.substring(0, 2) !== \"0x\") {\r\n         value = \"0x\" + value;\r\n    }\r\n\r\n    if (isHexable(value)) { value = value.toHexString(); }\r\n\r\n    if (isHexString(value)) {\r\n        let hex = (<string>value).substring(2);\r\n        if (hex.length % 2) {\r\n            if (options.hexPad === \"left\") {\r\n                hex = \"0\" + hex;\r\n            } else if (options.hexPad === \"right\") {\r\n                hex += \"0\";\r\n            } else {\r\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\r\n            }\r\n        }\r\n\r\n        const result = [];\r\n        for (let i = 0; i < hex.length; i += 2) {\r\n            result.push(parseInt(hex.substring(i, i + 2), 16));\r\n        }\r\n\r\n        return addSlice(new Uint8Array(result));\r\n    }\r\n\r\n    if (isBytes(value)) {\r\n        return addSlice(new Uint8Array(value));\r\n    }\r\n\r\n    return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\r\n}\r\n\r\nexport function concat(items: ReadonlyArray<BytesLike>): Uint8Array {\r\n    const objects = items.map(item => arrayify(item));\r\n    const length = objects.reduce((accum, item) => (accum + item.length), 0);\r\n\r\n    const result = new Uint8Array(length);\r\n\r\n    objects.reduce((offset, object) => {\r\n        result.set(object, offset);\r\n        return offset + object.length;\r\n    }, 0);\r\n\r\n    return addSlice(result);\r\n}\r\n\r\nexport function stripZeros(value: BytesLike): Uint8Array {\r\n    let result: Uint8Array = arrayify(value);\r\n\r\n    if (result.length === 0) { return result; }\r\n\r\n    // Find the first non-zero entry\r\n    let start = 0;\r\n    while (start < result.length && result[start] === 0) { start++ }\r\n\r\n    // If we started with zeros, strip them\r\n    if (start) {\r\n        result = result.slice(start);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function zeroPad(value: BytesLike, length: number): Uint8Array {\r\n    value = arrayify(value);\r\n\r\n    if (value.length > length) {\r\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\r\n    }\r\n\r\n    const result = new Uint8Array(length);\r\n    result.set(value, length - value.length);\r\n    return addSlice(result);\r\n}\r\n\r\n\r\nexport function isHexString(value: any, length?: number): boolean {\r\n    if (typeof(value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\r\n        return false\r\n    }\r\n    if (length && value.length !== 2 + 2 * length) { return false; }\r\n    return true;\r\n}\r\n\r\nconst HexCharacters: string = \"0123456789abcdef\";\r\n\r\nexport function hexlify(value: BytesLike | Hexable | number | bigint, options?: DataOptions): string {\r\n    if (!options) { options = { }; }\r\n\r\n    if (typeof(value) === \"number\") {\r\n        logger.checkSafeUint53(value, \"invalid hexlify value\");\r\n\r\n        let hex = \"\";\r\n        while (value) {\r\n            hex = HexCharacters[value & 0xf] + hex;\r\n            value = Math.floor(value / 16);\r\n        }\r\n\r\n        if (hex.length) {\r\n            if (hex.length % 2) { hex = \"0\" + hex; }\r\n            return \"0x\" + hex;\r\n        }\r\n\r\n        return \"0x00\";\r\n    }\r\n\r\n    if (typeof(value) === \"bigint\") {\r\n        value = value.toString(16);\r\n        if (value.length % 2) { return (\"0x0\" + value); }\r\n        return \"0x\" + value;\r\n    }\r\n\r\n    if (options.allowMissingPrefix && typeof(value) === \"string\" && value.substring(0, 2) !== \"0x\") {\r\n         value = \"0x\" + value;\r\n    }\r\n\r\n    if (isHexable(value)) { return value.toHexString(); }\r\n\r\n    if (isHexString(value)) {\r\n        if ((<string>value).length % 2) {\r\n            if (options.hexPad === \"left\") {\r\n                value = \"0x0\" + (<string>value).substring(2);\r\n            } else if (options.hexPad === \"right\") {\r\n                value += \"0\";\r\n            } else {\r\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\r\n            }\r\n        }\r\n        return (<string>value).toLowerCase();\r\n    }\r\n\r\n    if (isBytes(value)) {\r\n        let result = \"0x\";\r\n        for (let i = 0; i < value.length; i++) {\r\n             let v = value[i];\r\n             result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\r\n        }\r\n        return result;\r\n    }\r\n\r\n    return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\r\n}\r\n\r\n/*\r\nfunction unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {\r\n    if (typeof(value) === \"string\" && value.length % 2 && value.substring(0, 2) === \"0x\") {\r\n        return \"0x0\" + value.substring(2);\r\n    }\r\n    return value;\r\n}\r\n*/\r\nexport function hexDataLength(data: BytesLike) {\r\n    if (typeof(data) !== \"string\") {\r\n        data = hexlify(data);\r\n    } else if (!isHexString(data) || (data.length % 2)) {\r\n        return null;\r\n    }\r\n\r\n    return (data.length - 2) / 2;\r\n}\r\n\r\nexport function hexDataSlice(data: BytesLike, offset: number, endOffset?: number): string {\r\n    if (typeof(data) !== \"string\") {\r\n        data = hexlify(data);\r\n    } else if (!isHexString(data) || (data.length % 2)) {\r\n        logger.throwArgumentError(\"invalid hexData\", \"value\", data );\r\n    }\r\n\r\n    offset = 2 + 2 * offset;\r\n\r\n    if (endOffset != null) {\r\n        return \"0x\" + data.substring(offset, 2 + 2 * endOffset);\r\n    }\r\n\r\n    return \"0x\" + data.substring(offset);\r\n}\r\n\r\nexport function hexConcat(items: ReadonlyArray<BytesLike>): string {\r\n    let result = \"0x\";\r\n    items.forEach((item) => {\r\n        result += hexlify(item).substring(2);\r\n    });\r\n    return result;\r\n}\r\n\r\nexport function hexValue(value: BytesLike | Hexable | number | bigint): string {\r\n    const trimmed = hexStripZeros(hexlify(value, { hexPad: \"left\" }));\r\n    if (trimmed === \"0x\") { return \"0x0\"; }\r\n    return trimmed;\r\n}\r\n\r\nexport function hexStripZeros(value: BytesLike): string {\r\n    if (typeof(value) !== \"string\") { value = hexlify(value); }\r\n\r\n    if (!isHexString(value)) {\r\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\r\n    }\r\n    value = value.substring(2);\r\n    let offset = 0;\r\n    while (offset < value.length && value[offset] === \"0\") { offset++; }\r\n    return \"0x\" + value.substring(offset);\r\n}\r\n\r\nexport function hexZeroPad(value: BytesLike, length: number): string {\r\n    if (typeof(value) !== \"string\") {\r\n        value = hexlify(value);\r\n    } else if (!isHexString(value)) {\r\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\r\n    }\r\n\r\n    if (value.length > 2 * length + 2) {\r\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[1]);\r\n    }\r\n\r\n    while (value.length < 2 * length + 2) {\r\n        value = \"0x0\" + value.substring(2);\r\n    }\r\n\r\n    return value;\r\n}\r\n\r\nexport function splitSignature(signature: SignatureLike): Signature {\r\n\r\n    const result = {\r\n        r: \"0x\",\r\n        s: \"0x\",\r\n        _vs: \"0x\",\r\n        recoveryParam: 0,\r\n        v: 0,\r\n        yParityAndS: \"0x\",\r\n        compact: \"0x\"\r\n    };\r\n\r\n    if (isBytesLike(signature)) {\r\n        let bytes: Uint8Array = arrayify(signature);\r\n\r\n        // Get the r, s and v\r\n        if (bytes.length === 64) {\r\n            // EIP-2098; pull the v from the top bit of s and clear it\r\n            result.v = 27 + (bytes[32] >> 7);\r\n            bytes[32] &= 0x7f;\r\n\r\n            result.r = hexlify(bytes.slice(0, 32));\r\n            result.s = hexlify(bytes.slice(32, 64));\r\n\r\n        } else if (bytes.length === 65) {\r\n            result.r = hexlify(bytes.slice(0, 32));\r\n            result.s = hexlify(bytes.slice(32, 64));\r\n            result.v = bytes[64];\r\n        } else {\r\n\r\n            logger.throwArgumentError(\"invalid signature string\", \"signature\", signature);\r\n        }\r\n\r\n\r\n        // Allow a recid to be used as the v\r\n        if (result.v < 27) {\r\n            if (result.v === 0 || result.v === 1) {\r\n                result.v += 27;\r\n            } else {\r\n                logger.throwArgumentError(\"signature invalid v byte\", \"signature\", signature);\r\n            }\r\n        }\r\n\r\n        // Compute recoveryParam from v\r\n        result.recoveryParam = 1 - (result.v % 2);\r\n\r\n        // Compute _vs from recoveryParam and s\r\n        if (result.recoveryParam) { bytes[32] |= 0x80; }\r\n        result._vs = hexlify(bytes.slice(32, 64))\r\n\r\n    } else {\r\n        result.r = signature.r;\r\n        result.s = signature.s;\r\n        result.v = signature.v;\r\n        result.recoveryParam = signature.recoveryParam;\r\n        result._vs = signature._vs;\r\n\r\n        // If the _vs is available, use it to populate missing s, v and recoveryParam\r\n        // and verify non-missing s, v and recoveryParam\r\n        if (result._vs != null) {\r\n            const vs = zeroPad(arrayify(result._vs), 32);\r\n            result._vs = hexlify(vs);\r\n\r\n            // Set or check the recid\r\n            const recoveryParam = ((vs[0] >= 128) ? 1: 0);\r\n            if (result.recoveryParam == null) {\r\n                result.recoveryParam = recoveryParam;\r\n            } else if (result.recoveryParam !== recoveryParam) {\r\n                logger.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\r\n            }\r\n\r\n            // Set or check the s\r\n            vs[0] &= 0x7f;\r\n            const s = hexlify(vs);\r\n            if (result.s == null) {\r\n                result.s = s;\r\n            } else if (result.s !== s) {\r\n                logger.throwArgumentError(\"signature v mismatch _vs\", \"signature\", signature);\r\n            }\r\n        }\r\n\r\n        // Use recid and v to populate each other\r\n        if (result.recoveryParam == null) {\r\n            if (result.v == null) {\r\n                logger.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", signature);\r\n            } else if (result.v === 0 || result.v === 1) {\r\n                result.recoveryParam = result.v;\r\n            } else {\r\n                result.recoveryParam = 1 - (result.v % 2);\r\n            }\r\n        } else {\r\n            if (result.v == null) {\r\n                result.v = 27 + result.recoveryParam;\r\n            } else {\r\n                const recId = (result.v === 0 || result.v === 1) ? result.v :(1 - (result.v % 2));\r\n                if (result.recoveryParam !== recId) {\r\n                    logger.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", signature);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (result.r == null || !isHexString(result.r)) {\r\n            logger.throwArgumentError(\"signature missing or invalid r\", \"signature\", signature);\r\n        } else {\r\n            result.r = hexZeroPad(result.r, 32);\r\n        }\r\n\r\n        if (result.s == null || !isHexString(result.s)) {\r\n            logger.throwArgumentError(\"signature missing or invalid s\", \"signature\", signature);\r\n        } else {\r\n            result.s = hexZeroPad(result.s, 32);\r\n        }\r\n\r\n        const vs = arrayify(result.s);\r\n        if (vs[0] >= 128) {\r\n            logger.throwArgumentError(\"signature s out of range\", \"signature\", signature);\r\n        }\r\n        if (result.recoveryParam) { vs[0] |= 0x80; }\r\n        const _vs = hexlify(vs);\r\n\r\n        if (result._vs) {\r\n            if (!isHexString(result._vs)) {\r\n                logger.throwArgumentError(\"signature invalid _vs\", \"signature\", signature);\r\n            }\r\n            result._vs = hexZeroPad(result._vs, 32);\r\n        }\r\n\r\n        // Set or check the _vs\r\n        if (result._vs == null) {\r\n            result._vs = _vs;\r\n        } else if (result._vs !== _vs) {\r\n            logger.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", signature);\r\n        }\r\n    }\r\n\r\n    result.yParityAndS = result._vs;\r\n    result.compact = result.r + result.yParityAndS.substring(2);\r\n\r\n    return result;\r\n}\r\n\r\nexport function joinSignature(signature: SignatureLike): string {\r\n    signature = splitSignature(signature);\r\n\r\n    return hexlify(concat([\r\n         signature.r,\r\n         signature.s,\r\n         (signature.recoveryParam ? \"0x1c\": \"0x1b\")\r\n    ]));\r\n}\r\n\r\n"],
  "mappings": "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",
  "names": ["LogLevel", "ErrorCode", "version", "error", "version", "init_version", "vs", "init_lib", "init_version", "version"]
}
